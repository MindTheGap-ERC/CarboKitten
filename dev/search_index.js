var documenterSearchIndex = {"docs":
[{"location":"unitful/#Unitful","page":"Unitful","title":"Unitful","text":"","category":"section"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"Physical quantities in CarboKitten are always specified using the Unitful.jl framework.","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"<div class=\"noweb-label\">file:<i>test/Unitful.jl</i></div>","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"@testset \"Unitful\" begin\n    using Unitful\n    using Unitful.DefaultSymbols\n    using CarboKitten.Utility\n\n    <<unitful-spec>>\nend","category":"page"},{"location":"unitful/#Variables-vs.-string-macros","page":"Unitful","title":"Variables vs. string macros","text":"","category":"section"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"Unitful package offers two basic ways to enter quantities: either using predefined symbols (polluting your namespace with one-letter variables), or using special string macros.","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"<div class=\"noweb-label\">⪡unitful-spec⪢≣</div>","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"@test 1.0m === 1.0u\"m\"\n@test 42J/s == 42u\"W\"","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"In many cases, your CarboKitten scripts will contain little else than the input specification. In such a case using Unitful.DefaultSymbols gives a bit cleaner, more readable look.","category":"page"},{"location":"unitful/#Reading-specs","page":"Unitful","title":"Reading specs","text":"","category":"section"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"Suppose we simulate a pendulum. We would have an input spec defined as follows:","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"<div class=\"noweb-label\">⪡unitful-spec⪢≣</div>","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"@kwdef struct Pendulum\n    length :: typeof(1.0m)\n    time_step :: typeof(1.0s)\n    phi0 :: typeof(1.0rad)\n    omega0 :: typeof(1.0rad/s)\nend","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"Then input can be given as follows:","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"<div class=\"noweb-label\">⪡unitful-spec⪢≣</div>","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"pendulum = Pendulum(\n    length = 2.0m,\n    time_step = 1ms,\n    phi0 = 30°,\n    omega0 = 0rad/s\n)","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"Units are automatically converted to the types specified in the API.","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"<div class=\"noweb-label\">⪡unitful-spec⪢≣</div>","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"@test pendulum.time_step === 0.001s\n@test pendulum.phi0 === (π/6)rad","category":"page"},{"location":"unitful/#Dimensions","page":"Unitful","title":"Dimensions","text":"","category":"section"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"Unitful has dimensions of length 𝐋, mass 𝐌 and time 𝐓 as bold upper-case Unicode symbols. These can be entered in Julia with \\bfL, \\bfM etc. When you define a function that needs, say, an energy, which has SI units of rm J = (ms)^2 kg, we can construct the dimensions. Defining a few constants:","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"<div class=\"noweb-label\">⪡unitful-spec⪢≣</div>","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"let 𝐄 = (𝐋/𝐓)^2 * 𝐌,\n    h = 6.62607015e-34u\"J*s\",\n    c = 299792458u\"m/s\"\n    <<unitful-photon-example>>\nend","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"We can abstract over the specific units by defining a generic method. Now we can compute the wavelength of a photon, given its energy in any unit of energy.","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"<div class=\"noweb-label\">⪡unitful-photon-example⪢≣</div>","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"photon_wave_length(E::Quantity{Float64,𝐄,J}) where {J} =\n    uconvert(u\"Å\", h * c / E)\n\n@test photon_wave_length(2.38u\"eV\") ≈ 5209.4201u\"Å\"\n@test_throws MethodError photon_wave_length(1u\"m\")","category":"page"},{"location":"unitful/#Negating-Units","page":"Unitful","title":"Negating Units","text":"","category":"section"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"There is a handy way of negating units (getting back to raw scalars) using the NoUnits function object.","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"<div class=\"noweb-label\">⪡unitful-spec⪢≣</div>","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"@test 23u\"km\" / u\"m\" |> NoUnits == 23000","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"Now, suppose we have a Vector of which we don't know the exact units, but we want to save values in meters to HDF5. When we get a vector in meters, and divide by u\"m\", Unitful will simplify and return a plain Vector{Float64}. However, if the units were u\"km\", then we need to convert by multiplying by 1000. We could do vec .|> NoUnits, but this will always allocate a new vector, even when it is not needed. We have the short-hand in_units_of that solves this issue.","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"<div class=\"noweb-label\">⪡unitful-spec⪢≣</div>","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"@test 23u\"km\" |> in_units_of(u\"m\") == 23000\n@test [4, 5, 6]u\"m\" |> in_units_of(u\"m\") == [4, 5, 6]","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"<div class=\"noweb-label\">⪡utility⪢≣</div>","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"function in_units_of(unit)\n    function magnitude(a::AbstractArray{Quantity{RT, NoDims, U}, dim}) where {RT <: Real, U, dim}\n        return a .|> NoUnits\n    end\n\n    function magnitude(a::AbstractArray{RT, dim}) where {RT <: Real, dim}\n        return a\n    end\n\n    function magnitude(a::RT) where {RT <: Real}\n        return a\n    end\n\n    function magnitude(a::Quantity{RT, NoDims, U}) where {RT <: Real, U}\n        return a |> NoUnits\n    end\n\n    function (x)\n        x / unit |> magnitude\n    end\nend","category":"page"},{"location":"unitful/","page":"Unitful","title":"Unitful","text":"","category":"page"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"H. Bosscher and W. Schlager. Computer simulation of reef growth. Sedimentology 39, 503–512 (1992).\n\n\n\nK. G. Miller, J. V. Browning, W. J. Schmelz, R. E. Kopp, G. S. Mountain and J. D. Wright. Cenozoic sea-level relative to modern from deep-sea geochemical and continental margin records (2020).\n\n\n\nC. Paola, P. L. Heller and C. L. Angevine. The large-scale dynamics of grain-size variation in alluvial basins, 1: Theory. Basin research 4, 73–90 (1992).\n\n\n\nS. C. James, C. A. Jones, M. D. Grace and J. D. Roberts. Advances in sediment transport modelling. Journal of Hydraulic Research 48, 754–763 (2010).\n\n\n\nP. M. Burgess. CarboCAT: A cellular automata model of heterogeneous carbonate strata. Computers & geosciences 53, 129–140 (2013).\n\n\n\nK. G. Miller, M. A. Kominz, J. V. Browning, J. D. Wright, G. S. Mountain, M. E. Katz, P. J. Sugarman, B. S. Cramer, N. Christie-Blick and S. F. Pekar. The Phanerozoic Record of Global Sea-Level Change. Science 310, 1293–1298 (2005). Publisher: American Association for the Advancement of Science.\n\n\n\nY. Yang, Y.-C. Lang, S. Xu, C.-Q. Liu, L.-F. Cui, S. P. Freeman and K. M. Wilcken. Combined unsteady denudation and climatic gradient factors constrain carbonate landscape evolution: New insights from in situ cosmogenic 36Cl. Quaternary Geochronology 58, 101075 (2020). Accessed on Jul 24, 2024.\n\n\n\nF. Thomas, V. Godard, O. Bellier, L. Benedetti, V. Ollivier, M. Rizza, V. Guillou, F. Hollender, G. Aumaître, D. L. Bourlès and K. Keddadouche. Limited influence of climatic gradients on the denudation of a Mediterranean carbonate landscape. Geomorphology 316, 44–58 (2018).\n\n\n\nK. Krklec, R. Braucher, D. Perica and D. Domínguez-Villar. Long-term denudation rate of karstic North Dalmatian Plain (Croatia) calculated from 36Cl cosmogenic nuclides. Geomorphology 413, 108358 (2022). Accessed on Jul 24, 2024.\n\n\n\nP. Thapa. Spatial estimation of soil erosion using RUSLE modeling: a case study of Dolakha district, Nepal. Environmental Systems Research 9, 15 (2020).\n\n\n\nG. Kaufmann and J. Braun. Modelling karst denudation on a synthetic landscape. Terra Nova 13, 313–320 (2001).\n\n\n\nF. Gabrovšek. On concepts and methods for the estimation of dissolutional denudation rates in karst areas. Geomorphology 106, 9–14 (2009). Accessed on Jul 11, 2024.\n\n\n\nG. Kaufmann and W. Dreybrodt. Calcite dissolution kinetics in the system CaCO3–H2O–CO2 at high undersaturation. Geochimica et Cosmochimica Acta 71, 1398–1410 (2007). Accessed on Jul 11, 2024.\n\n\n\nG. Tucker, S. Lancaster, N. Gasparini and R. Bras. The Channel-Hillslope Integrated Landscape Development Model (CHILD). In: Landscape Erosion and Evolution Modeling, edited by R. S. Harmon and W. W. Doe (Springer US, 2001); pp. 349–388. Accessed on Jul 24, 2024.\n\n\n\nM. J. Van De Wiel, T. J. Coulthard, M. G. Macklin and J. Lewin. Embedding reach-scale fluvial dynamics within the CAESAR cellular automaton landscape evolution model. Geomorphology 90, 283–301 (2007). Accessed on Jul 24, 2024.\n\n\n\n","category":"page"},{"location":"references/","page":"References","title":"References","text":"","category":"page"},{"location":"components/boxes/#Box","page":"Boxes","title":"Box","text":"","category":"section"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"<div class=\"component-dag\" style=\"overflow: scroll\"><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.50.0 (20211204.2007)\n -->\n<!-- Pages: 1 -->\n<svg width=\"170pt\" height=\"87pt\"\n viewBox=\"0.00 0.00 170.00 87.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 83)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-83 166,-83 166,4 -4,4\"/>\n<!-- Boxes -->\n<g id=\"node1\" class=\"node\">\n<title>Boxes</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150,-79C150,-79 12,-79 12,-79 6,-79 0,-73 0,-67 0,-67 0,-12 0,-12 0,-6 6,0 12,0 12,0 150,0 150,0 156,0 162,-6 162,-12 162,-12 162,-67 162,-67 162,-73 156,-79 150,-79\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-48.5 155,-48.5 \"/>\n<text text-anchor=\"start\" x=\"57.5\" y=\"-57.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Boxes</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"7,-25.5 7,-48.5 54,-48.5 54,-25.5 7,-25.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-25.5 54,-25.5 54,-48.5 7,-48.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-33.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"54,-25.5 54,-48.5 108,-48.5 108,-25.5 54,-25.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"54,-25.5 54,-48.5 108,-48.5 108,-25.5 54,-25.5\"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-33.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"108,-25.5 108,-48.5 155,-48.5 155,-25.5 108,-25.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"155,-48.5 108,-48.5 108,-25.5 155,-25.5 \"/>\n<text text-anchor=\"start\" x=\"112\" y=\"-33.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"54,-6.5 54,-25.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\">box</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"108,-6.5 108,-25.5 \"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"111\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n</g>\n</svg>\n</div>","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"This module makes sure we have access to box properties.","category":"page"},{"location":"components/boxes/#Box-topology","page":"Boxes","title":"Box topology","text":"","category":"section"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"CarboKitten has a 3-dimensional state space, where two dimensions represent cartesian topographic coordinates, and the third dimension is a track record of sedimentation. The cartesian topographic coordinates are always on a regular grid, but depending on the scenario you may choose different map topologies.","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"periodic boundaries To study sedimentation in a small isolated patch, periodic boundaries seem sufficient. The field is assumed to be infinite in all directions.\nVon Neumann boundaries In the case of an island it is nicer to have boundaries with constant derivatives. Produced sediment that flows out of the box is lost to the seas.\ncoastal boundaries Supposing we simulate a narrow cross section of a coast, we'll have one periodic boundary (in y-direction) and Von Neumann boundaries in the x-direction.","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"We parametrize these boundaries as type-level constants in Julia. This way we can use the multiple dispatch mechanism in Julia to obtain specialized implementations for each boundary case, selected at compile time, resulting in efficient run-times.","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"<div class=\"noweb-label\">⪡boundary-types⪢≣</div>","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"abstract type Boundary{dim} end\nstruct Reflected{dim} <: Boundary{dim} end\nstruct Periodic{dim} <: Boundary{dim} end\nstruct Constant{dim,value} <: Boundary{dim} end\nstruct Coast <: Boundary{2} end\n\nconst Shelf = Coast  # FIXME: Old name, should be removed","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"The Boundary type is part of the generic Box dimension specification.","category":"page"},{"location":"components/boxes/#Offset-indexing","page":"Boxes","title":"Offset indexing","text":"","category":"section"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"Now we can use these topology types to define three methods for indexing on an offset from some index that is assumed to be within bounds.","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"<div class=\"noweb-label\">⪡spec⪢≣</div>","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"@testset \"offset_value\" begin\n    @test CartesianIndex(1, 1) == offset_index(Reflected{2}, (3, 3), CartesianIndex(1, 1), CartesianIndex(0, 0))\nend","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"<div class=\"noweb-label\">⪡offset-indexing⪢≣</div>","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"function offset_index(::Type{BT}, shape::NTuple{dim,Int}, i::CartesianIndex, Δi::CartesianIndex) where {dim, BT <: Boundary{dim}}\n    canonical(BT, shape, i + Δi)\nend\n\nfunction offset_value(BT::Type{B}, z::AbstractArray, i::CartesianIndex, Δi::CartesianIndex) where {dim,B<:Boundary{dim}}\n    z[offset_index(BT, size(z), i, Δi)]\nend\n\nfunction offset_value(::Type{Constant{dim,value}}, z::AbstractArray, i::CartesianIndex, Δi::CartesianIndex) where {dim,value}\n    j = i + Δi\n    (checkbounds(Bool, z, j) ? z[j] : value)\nend","category":"page"},{"location":"components/boxes/#Canonical-coordinates","page":"Boxes","title":"Canonical coordinates","text":"","category":"section"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"For both Periodic and Reflected boundaries it is also possible to write a function that makes any coordinate within bounds. This uses the fact that reflected boundaries are also periodic for a box twice the size.","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"<div class=\"noweb-label\">⪡canonical-coordinates⪢≣</div>","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"function canonical(::Type{Periodic{dim}}, shape::NTuple{dim,Int}, i::CartesianIndex) where {dim}\n    CartesianIndex(mod1.(Tuple(i), shape)...)\nend\n\nfunction canonical(::Type{Reflected{dim}}, shape::NTuple{dim,Int}, i::CartesianIndex) where {dim}\n    modflip(a, l) = let b = mod1(a, 2l)\n        b > l ? 2l - b + 1 : b\n    end\n    CartesianIndex(modflip.(Tuple(i), shape)...) \nend\n\nfunction canonical(::Type{Constant{dim, value}}, shape::NTuple{dim,Int}, i::CartesianIndex) where {dim, value}\n    all(checkindex.(Bool, range.(1, shape), Tuple(i))) ? i : nothing\nend","category":"page"},{"location":"components/boxes/#Coast-boundary","page":"Boxes","title":"Coast boundary","text":"","category":"section"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"The Coast boundary type is specially designed for the simulation of a transect perpendicular to the coast direction. We are periodic in the y-direction and have a Neumannesque constant boundary at the edges of the simulation area.","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"<div class=\"noweb-label\">⪡offset-indexing⪢≣</div>","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"function canonical(::Type{Coast}, shape::NTuple{2, Int}, i::CartesianIndex)\n    if i[1] < 1 || i[1] > shape[1]\n        return nothing\n    end\n    return CartesianIndex(i[1], mod1(i[2], shape[2]))\nend\n\nfunction offset_value(::Type{Coast}, z::AbstractArray, i::CartesianIndex, Δi::CartesianIndex)\n    j = i + Δi\n    shape = size(z)\n    if j[1] < 1\n        return z[1, mod1(j[2], shape[2])]\n    elseif j[1] > shape[1]\n        return z[shape[1], mod1(j[2], shape[2])]\n    else\n        return z[j[1], mod1(j[2], shape[2])]\n    end\nend","category":"page"},{"location":"components/boxes/#BoundaryTrait-module","page":"Boxes","title":"BoundaryTrait module","text":"","category":"section"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"<div class=\"noweb-label\">file:<i>src/BoundaryTrait.jl</i></div>","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"# FIXME: Rename this module\nmodule BoundaryTrait\n\nexport Boundary, Reflected, Periodic, Constant, Coast, Shelf, offset_index, offset_value, canonical\n\n<<boundary-types>>\n<<offset-indexing>>\n<<canonical-coordinates>>\n\nend","category":"page"},{"location":"components/boxes/#Box-properties","page":"Boxes","title":"Box properties","text":"","category":"section"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"<div class=\"noweb-label\">⪡box-type⪢≣</div>","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"abstract type AbstractBox{BT} end\n\nstruct Box{BT} <: AbstractBox{BT}\n    grid_size::NTuple{2,Int}\n    phys_scale::typeof(1.0u\"m\")\n    phys_size::Vec2\n\n    function Box{BT}(;grid_size::NTuple{2, Int}, phys_scale::Quantity{Float64, 𝐋, U}) where {BT <: Boundary{2}, U}\n        new{BT}(grid_size, phys_scale, phys_size(grid_size, phys_scale))\n    end\nend\n\nfunction axes(box::Box)\n\ty_axis = (0:(box.grid_size[2] - 1)) .* box.phys_scale\n\tx_axis = (0:(box.grid_size[1] - 1)) .* box.phys_scale\n\treturn x_axis, y_axis\nend\n\nphys_size(grid_size, phys_scale) = (\n    x = grid_size[1] * (phys_scale / m |> NoUnits),\n    y = grid_size[2] * (phys_scale / m |> NoUnits))","category":"page"},{"location":"components/boxes/#Floating-point-vectors","page":"Boxes","title":"Floating-point vectors","text":"","category":"section"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"We need to define how particles move past boundaries. Similar to the grid based offset_index method, we define the offset method for a Vec2.","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"<div class=\"noweb-label\">⪡vector-offset⪢≣</div>","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"Base.in(a::Vec2, box::Box) =\n    a.x >= 0.0 && a.x < box.phys_size.x && a.y >= 0.0 && a.y < box.phys_size.y\n\nfunction offset(box::AbstractBox{Reflected{2}}, a::Vec2, Δa::Vec2)\n    clip(i, a, b) = (i < a ? a + a - i : (i > b ? b + b - i : i))\n    (x=clip(a.x+Δa.x, 0.0, box.phys_size.x)\n    ,y=clip(a.y+Δa.y, 0.0, box.phys_size.y))\nend\n\nfunction offset(box::AbstractBox{Periodic{2}}, a::Vec2, Δa::Vec2)\n    (x=mod(a.x+Δa.x, box.phys_size.x)\n    ,y=mod(a.y+Δa.y, box.phys_size.y))\nend\n\nfunction offset(box::AbstractBox{Constant{2,Value}}, a::Vec2, Δa::Vec2) where Value\n    b = a + Δa\n    if b ∉ box\n        nothing\n    else\n        b\n    end\nend\n\nfunction offset(box::AbstractBox{Shelf}, a::Vec2, Δa::Vec2)\n    b = a + Δa\n    if b.x < 0.0 || b.x >= box.phys_size.x\n        nothing\n    else\n        (x=b.x, y=mod(b.y, box.phys_size.y))\n    end\nend","category":"page"},{"location":"components/boxes/#Modules","page":"Boxes","title":"Modules","text":"","category":"section"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"<div class=\"noweb-label\">file:<i>src/Boxes.jl</i></div>","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"module Boxes\n\nusing ..BoundaryTrait\nusing ..Vectors\nusing Unitful\nusing Unitful.DefaultSymbols\n\nexport AbstractBox, Box, axes\n\n<<box-type>>\n<<vector-offset>>\n\nend","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"<div class=\"noweb-label\">file:<i>test/Components/BoxesSpec.jl</i></div>","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"module BoxesSpec\n    using Test\n    using CarboKitten.Components.Common\n    using CarboKitten.Components.Boxes\n\n    @testset \"Components/Boxes\" begin\n        let box = Box{Periodic{2}}(grid_size=(10, 10), phys_scale=2.0u\"m\"),\n            input = Boxes.Input(box=box)\n            @test input.box.grid_size == (10, 10)\n            @test input.box.phys_scale == 2.0u\"m\"\n        end\n    end\nend","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"<div class=\"noweb-label\">file:<i>src/Components/Boxes.jl</i></div>","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"@compose module Boxes\nusing ..Common\n\n@kwdef struct Input <: AbstractInput\n    box::Box\nend\n\nfunction write_header(fid, input::AbstractInput)\n    x, y = Common.axes(input.box)\n\n    gid = fid[\"input\"]\n    gid[\"x\"] = collect(x) |> in_units_of(u\"m\")\n    gid[\"y\"] = collect(y) |> in_units_of(u\"m\")\nend\nend","category":"page"},{"location":"components/boxes/","page":"Boxes","title":"Boxes","text":"","category":"page"},{"location":"components/production/#Production","page":"Production","title":"Production","text":"","category":"section"},{"location":"components/production/","page":"Production","title":"Production","text":"<div class=\"component-dag\" style=\"overflow: scroll\"><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.50.0 (20211204.2007)\n -->\n<!-- Pages: 1 -->\n<svg width=\"497pt\" height=\"393pt\"\n viewBox=\"0.00 0.00 497.00 393.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 389)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-389 493,-389 493,4 -4,4\"/>\n<!-- TimeIntegration -->\n<g id=\"node1\" class=\"node\">\n<title>TimeIntegration</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150,-385C150,-385 12,-385 12,-385 6,-385 0,-379 0,-373 0,-373 0,-318 0,-318 0,-312 6,-306 12,-306 12,-306 150,-306 150,-306 156,-306 162,-312 162,-318 162,-318 162,-373 162,-373 162,-379 156,-385 150,-385\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-354.5 155,-354.5 \"/>\n<text text-anchor=\"start\" x=\"15.5\" y=\"-363.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">TimeIntegration</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"7,-331.5 7,-354.5 54,-354.5 54,-331.5 7,-331.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-331.5 54,-331.5 54,-354.5 7,-354.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-339.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"54,-331.5 54,-354.5 108,-354.5 108,-331.5 54,-331.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"54,-331.5 54,-354.5 108,-354.5 108,-331.5 54,-331.5\"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-339.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"108,-331.5 108,-354.5 155,-354.5 155,-331.5 108,-331.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"155,-354.5 108,-354.5 108,-331.5 155,-331.5 \"/>\n<text text-anchor=\"start\" x=\"112\" y=\"-339.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"54,-312.5 54,-331.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-319.5\" font-family=\"monospace\" font-size=\"10.00\">time</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"108,-312.5 108,-331.5 \"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-319.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"111\" y=\"-319.5\" font-family=\"monospace\" font-size=\"10.00\">step</text>\n</g>\n<!-- WaterDepth -->\n<g id=\"node2\" class=\"node\">\n<title>WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M297,-270C297,-270 45,-270 45,-270 39,-270 33,-264 33,-258 33,-258 33,-165 33,-165 33,-159 39,-153 45,-153 45,-153 297,-153 297,-153 303,-153 309,-159 309,-165 309,-165 309,-258 309,-258 309,-264 303,-270 297,-270\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"40,-239.5 302,-239.5 \"/>\n<text text-anchor=\"start\" x=\"123.5\" y=\"-248.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">WaterDepth</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"40,-216.5 40,-239.5 151,-239.5 151,-216.5 40,-216.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"40,-216.5 151,-216.5 151,-239.5 40,-239.5 \"/>\n<text text-anchor=\"start\" x=\"44\" y=\"-224.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"151,-216.5 151,-239.5 205,-239.5 205,-216.5 151,-216.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"151,-216.5 151,-239.5 205,-239.5 205,-216.5 151,-216.5\"/>\n<text text-anchor=\"start\" x=\"155\" y=\"-224.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"205,-216.5 205,-239.5 302,-239.5 302,-216.5 205,-216.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"302,-239.5 205,-239.5 205,-216.5 302,-216.5 \"/>\n<text text-anchor=\"start\" x=\"209\" y=\"-224.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"151,-197.5 151,-216.5 \"/>\n<text text-anchor=\"start\" x=\"44\" y=\"-204.5\" font-family=\"monospace\" font-size=\"10.00\">sea_level</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"205,-197.5 205,-216.5 \"/>\n<text text-anchor=\"start\" x=\"155\" y=\"-204.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"208\" y=\"-204.5\" font-family=\"monospace\" font-size=\"10.00\">sediment_height</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"151,-178.5 151,-197.5 \"/>\n<text text-anchor=\"start\" x=\"44\" y=\"-185.5\" font-family=\"monospace\" font-size=\"10.00\">bedrock_elevation</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"205,-178.5 205,-197.5 \"/>\n<text text-anchor=\"start\" x=\"155\" y=\"-185.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"208\" y=\"-185.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"151,-159.5 151,-178.5 \"/>\n<text text-anchor=\"start\" x=\"44\" y=\"-166.5\" font-family=\"monospace\" font-size=\"10.00\">subsidence_rate</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"205,-159.5 205,-178.5 \"/>\n<text text-anchor=\"start\" x=\"155\" y=\"-166.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"208\" y=\"-166.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- TimeIntegration&#45;&gt;WaterDepth -->\n<g id=\"edge1\" class=\"edge\">\n<title>TimeIntegration&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M107.27,-305.97C113.07,-297.46 119.38,-288.21 125.69,-278.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"128.73,-280.7 131.48,-270.47 122.95,-276.76 128.73,-280.7\"/>\n</g>\n<!-- Production -->\n<g id=\"node5\" class=\"node\">\n<title>Production</title>\n<path fill=\"none\" stroke=\"black\" d=\"M412.5,-117C412.5,-117 165.5,-117 165.5,-117 159.5,-117 153.5,-111 153.5,-105 153.5,-105 153.5,-12 153.5,-12 153.5,-6 159.5,0 165.5,0 165.5,0 412.5,0 412.5,0 418.5,0 424.5,-6 424.5,-12 424.5,-12 424.5,-105 424.5,-105 424.5,-111 418.5,-117 412.5,-117\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"161,-86.5 418,-86.5 \"/>\n<text text-anchor=\"start\" x=\"245.5\" y=\"-95.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Production</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"161,-63.5 161,-86.5 230,-86.5 230,-63.5 161,-63.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"161,-63.5 230,-63.5 230,-86.5 161,-86.5 \"/>\n<text text-anchor=\"start\" x=\"165\" y=\"-71.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"230,-63.5 230,-86.5 371,-86.5 371,-63.5 230,-63.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"230,-63.5 230,-86.5 371,-86.5 371,-63.5 230,-63.5\"/>\n<text text-anchor=\"start\" x=\"234\" y=\"-71.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"371,-63.5 371,-86.5 418,-86.5 418,-63.5 371,-63.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"418,-86.5 371,-86.5 371,-63.5 418,-63.5 \"/>\n<text text-anchor=\"start\" x=\"375\" y=\"-71.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"230,-44.5 230,-63.5 \"/>\n<text text-anchor=\"start\" x=\"165\" y=\"-51.5\" font-family=\"monospace\" font-size=\"10.00\">insolation</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"371,-44.5 371,-63.5 \"/>\n<text text-anchor=\"start\" x=\"234\" y=\"-51.5\" font-family=\"monospace\" font-size=\"10.00\">maximum_growth_rate</text>\n<text text-anchor=\"start\" x=\"374\" y=\"-51.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"230,-25.5 230,-44.5 \"/>\n<text text-anchor=\"start\" x=\"165\" y=\"-32.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"371,-25.5 371,-44.5 \"/>\n<text text-anchor=\"start\" x=\"234\" y=\"-32.5\" font-family=\"monospace\" font-size=\"10.00\">extinction_coefficient</text>\n<text text-anchor=\"start\" x=\"374\" y=\"-32.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"230,-6.5 230,-25.5 \"/>\n<text text-anchor=\"start\" x=\"165\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"371,-6.5 371,-25.5 \"/>\n<text text-anchor=\"start\" x=\"234\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\">saturation_intensity</text>\n<text text-anchor=\"start\" x=\"374\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- WaterDepth&#45;&gt;Production -->\n<g id=\"edge3\" class=\"edge\">\n<title>WaterDepth&#45;&gt;Production</title>\n<path fill=\"none\" stroke=\"black\" d=\"M215.95,-152.98C223.05,-143.89 230.44,-134.44 237.68,-125.18\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"240.58,-127.14 243.98,-117.11 235.07,-122.83 240.58,-127.14\"/>\n</g>\n<!-- Boxes -->\n<g id=\"node3\" class=\"node\">\n<title>Boxes</title>\n<path fill=\"none\" stroke=\"black\" d=\"M330,-385C330,-385 192,-385 192,-385 186,-385 180,-379 180,-373 180,-373 180,-318 180,-318 180,-312 186,-306 192,-306 192,-306 330,-306 330,-306 336,-306 342,-312 342,-318 342,-318 342,-373 342,-373 342,-379 336,-385 330,-385\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"187,-354.5 335,-354.5 \"/>\n<text text-anchor=\"start\" x=\"237.5\" y=\"-363.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Boxes</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"187,-331.5 187,-354.5 234,-354.5 234,-331.5 187,-331.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"187,-331.5 234,-331.5 234,-354.5 187,-354.5 \"/>\n<text text-anchor=\"start\" x=\"191\" y=\"-339.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"234,-331.5 234,-354.5 288,-354.5 288,-331.5 234,-331.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"234,-331.5 234,-354.5 288,-354.5 288,-331.5 234,-331.5\"/>\n<text text-anchor=\"start\" x=\"238\" y=\"-339.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"288,-331.5 288,-354.5 335,-354.5 335,-331.5 288,-331.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"335,-354.5 288,-354.5 288,-331.5 335,-331.5 \"/>\n<text text-anchor=\"start\" x=\"292\" y=\"-339.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"234,-312.5 234,-331.5 \"/>\n<text text-anchor=\"start\" x=\"191\" y=\"-319.5\" font-family=\"monospace\" font-size=\"10.00\">box</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"288,-312.5 288,-331.5 \"/>\n<text text-anchor=\"start\" x=\"238\" y=\"-319.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"291\" y=\"-319.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- Boxes&#45;&gt;WaterDepth -->\n<g id=\"edge2\" class=\"edge\">\n<title>Boxes&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M234.73,-305.97C228.93,-297.46 222.62,-288.21 216.31,-278.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"219.05,-276.76 210.52,-270.47 213.27,-280.7 219.05,-276.76\"/>\n</g>\n<!-- FaciesBase -->\n<g id=\"node4\" class=\"node\">\n<title>FaciesBase</title>\n<path fill=\"none\" stroke=\"black\" d=\"M477,-251C477,-251 339,-251 339,-251 333,-251 327,-245 327,-239 327,-239 327,-184 327,-184 327,-178 333,-172 339,-172 339,-172 477,-172 477,-172 483,-172 489,-178 489,-184 489,-184 489,-239 489,-239 489,-245 483,-251 477,-251\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"334,-220.5 482,-220.5 \"/>\n<text text-anchor=\"start\" x=\"364\" y=\"-229.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">FaciesBase</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"334,-197.5 334,-220.5 381,-220.5 381,-197.5 334,-197.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"334,-197.5 381,-197.5 381,-220.5 334,-220.5 \"/>\n<text text-anchor=\"start\" x=\"338\" y=\"-205.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"381,-197.5 381,-220.5 435,-220.5 435,-197.5 381,-197.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"381,-197.5 381,-220.5 435,-220.5 435,-197.5 381,-197.5\"/>\n<text text-anchor=\"start\" x=\"385\" y=\"-205.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"435,-197.5 435,-220.5 482,-220.5 482,-197.5 435,-197.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"482,-220.5 435,-220.5 435,-197.5 482,-197.5 \"/>\n<text text-anchor=\"start\" x=\"439\" y=\"-205.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"381,-178.5 381,-197.5 \"/>\n<text text-anchor=\"start\" x=\"338\" y=\"-185.5\" font-family=\"monospace\" font-size=\"10.00\">facies</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"435,-178.5 435,-197.5 \"/>\n<text text-anchor=\"start\" x=\"385\" y=\"-185.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"438\" y=\"-185.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- FaciesBase&#45;&gt;Production -->\n<g id=\"edge4\" class=\"edge\">\n<title>FaciesBase&#45;&gt;Production</title>\n<path fill=\"none\" stroke=\"black\" d=\"M377.35,-171.61C366.21,-157.48 353.29,-141.08 340.82,-125.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"343.3,-122.74 334.36,-117.05 337.8,-127.08 343.3,-122.74\"/>\n</g>\n</g>\n</svg>\n</div>","category":"page"},{"location":"components/production/","page":"Production","title":"Production","text":"The Production module specifies the production rate following the model by Bosscher & Schlager 1992 [1]. The growth rate is given as","category":"page"},{"location":"components/production/","page":"Production","title":"Production","text":"g(w) = g_m tanhleft(I_0 e^-kw over I_kright)","category":"page"},{"location":"components/production/","page":"Production","title":"Production","text":"This can be understood as a smooth transition between the maximum growth rate under saturated conditions, and exponential decay due to light intensity dropping with greater water depth.","category":"page"},{"location":"components/production/","page":"Production","title":"Production","text":"<div class=\"noweb-label\">⪡component-production-rate⪢≣</div>","category":"page"},{"location":"components/production/","page":"Production","title":"Production","text":"function production_rate(insolation, facies, water_depth)\n    gₘ = facies.maximum_growth_rate\n    I = insolation / facies.saturation_intensity\n    x = water_depth * facies.extinction_coefficient\n    return water_depth > 0.0u\"m\" ? gₘ * tanh(I * exp(-x)) : 0.0u\"m/Myr\"\nend","category":"page"},{"location":"components/production/","page":"Production","title":"Production","text":"From just this equation we can define a uniform production process. This requires that we have a Facies that defines the maximum_growth_rate, extinction_coefficient and saturation_intensity.","category":"page"},{"location":"components/production/","page":"Production","title":"Production","text":"<div class=\"noweb-label\">file:<i>test/Components/ProductionSpec.jl</i></div>","category":"page"},{"location":"components/production/","page":"Production","title":"Production","text":"module ProductionSpec\n    using Test\n    using CarboKitten.Components.Common\n    using CarboKitten.Components.Production: Facies, Input, uniform_production\n    using CarboKitten.Components.WaterDepth: initial_state\n\n    @testset \"Components/Production\" begin\n        let facies = Facies(\n                maximum_growth_rate = 500u\"m/Myr\",\n                extinction_coefficient = 0.8u\"m^-1\",\n                saturation_intensity = 60u\"W/m^2\"),\n            input = Input(\n                box = Box{Periodic{2}}(grid_size=(10, 1), phys_scale=1.0u\"m\"),\n                time = TimeProperties(Δt=1.0u\"kyr\", steps=10),\n                sea_level = t -> 0.0u\"m\",\n\t\t        bedrock_elevation = (x, y) -> -10u\"m\",\n\t\t        subsidence_rate = 0.0u\"m/Myr\",\n                facies = [facies],\n                insolation = 400.0u\"W/m^2\")\n\n            state = initial_state(input)\n            prod = uniform_production(input)(state)\n            @test all(prod[1:end-1,:] .>= prod[2:end,:])\n        end     \n    end\nend","category":"page"},{"location":"components/production/","page":"Production","title":"Production","text":"<div class=\"noweb-label\">file:<i>src/Components/Production.jl</i></div>","category":"page"},{"location":"components/production/","page":"Production","title":"Production","text":"@compose module Production\n@mixin WaterDepth, FaciesBase\nusing ..Common\nusing ..WaterDepth: water_depth\nusing HDF5\n\nexport production_rate, uniform_production\n\n@kwdef struct Facies <: AbstractFacies\n    maximum_growth_rate::Rate\n    extinction_coefficient::typeof(1.0u\"m^-1\")\n    saturation_intensity::Intensity\nend\n\n@kwdef struct Input <: AbstractInput\n    insolation::Intensity\nend\n\nfunction write_header(fid, input::AbstractInput)\n    attributes(fid[\"input\"])[\"insolation\"] = input.insolation |> in_units_of(u\"W/m^2\")\n    for (i, f) in enumerate(input.facies)\n        attr = attributes(fid[\"input/facies$(i)\"])\n        attr[\"maximum_growth_rate\"] = f.maximum_growth_rate |> in_units_of(u\"m/Myr\")\n        attr[\"extinction_coefficient\"] = f.extinction_coefficient |> in_units_of(u\"m^-1\")\n        attr[\"saturation_intensity\"] = f.saturation_intensity |> in_units_of(u\"W/m^2\")\n    end\nend\n\n<<component-production-rate>>\n\nfunction uniform_production(input::AbstractInput)\n    w = water_depth(input)\n    na = [CartesianIndex()]\n\n    return function (state::AbstractState)\n        return production_rate.(\n            input.insolation,\n            input.facies[:, na, na],\n            w(state)[na, :, :])\n    end\nend\nend","category":"page"},{"location":"components/production/#CA-Production","page":"Production","title":"CA Production","text":"","category":"section"},{"location":"components/production/","page":"Production","title":"Production","text":"<div class=\"component-dag\" style=\"overflow: scroll\"><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.50.0 (20211204.2007)\n -->\n<!-- Pages: 1 -->\n<svg width=\"610pt\" height=\"465pt\"\n viewBox=\"0.00 0.00 609.50 465.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 461)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-461 605.5,-461 605.5,4 -4,4\"/>\n<!-- TimeIntegration -->\n<g id=\"node1\" class=\"node\">\n<title>TimeIntegration</title>\n<path fill=\"none\" stroke=\"black\" d=\"M207,-457C207,-457 69,-457 69,-457 63,-457 57,-451 57,-445 57,-445 57,-390 57,-390 57,-384 63,-378 69,-378 69,-378 207,-378 207,-378 213,-378 219,-384 219,-390 219,-390 219,-445 219,-445 219,-451 213,-457 207,-457\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"64,-426.5 212,-426.5 \"/>\n<text text-anchor=\"start\" x=\"72.5\" y=\"-435.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">TimeIntegration</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"64,-403.5 64,-426.5 111,-426.5 111,-403.5 64,-403.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"64,-403.5 111,-403.5 111,-426.5 64,-426.5 \"/>\n<text text-anchor=\"start\" x=\"68\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"111,-403.5 111,-426.5 165,-426.5 165,-403.5 111,-403.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"111,-403.5 111,-426.5 165,-426.5 165,-403.5 111,-403.5\"/>\n<text text-anchor=\"start\" x=\"115\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"165,-403.5 165,-426.5 212,-426.5 212,-403.5 165,-403.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"212,-426.5 165,-426.5 165,-403.5 212,-403.5 \"/>\n<text text-anchor=\"start\" x=\"169\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"111,-384.5 111,-403.5 \"/>\n<text text-anchor=\"start\" x=\"68\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\">time</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"165,-384.5 165,-403.5 \"/>\n<text text-anchor=\"start\" x=\"115\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"168\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\">step</text>\n</g>\n<!-- WaterDepth -->\n<g id=\"node3\" class=\"node\">\n<title>WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M264,-342C264,-342 12,-342 12,-342 6,-342 0,-336 0,-330 0,-330 0,-237 0,-237 0,-231 6,-225 12,-225 12,-225 264,-225 264,-225 270,-225 276,-231 276,-237 276,-237 276,-330 276,-330 276,-336 270,-342 264,-342\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-311.5 269,-311.5 \"/>\n<text text-anchor=\"start\" x=\"90.5\" y=\"-320.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">WaterDepth</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"7,-288.5 7,-311.5 118,-311.5 118,-288.5 7,-288.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-288.5 118,-288.5 118,-311.5 7,-311.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-296.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"118,-288.5 118,-311.5 172,-311.5 172,-288.5 118,-288.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"118,-288.5 118,-311.5 172,-311.5 172,-288.5 118,-288.5\"/>\n<text text-anchor=\"start\" x=\"122\" y=\"-296.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"172,-288.5 172,-311.5 269,-311.5 269,-288.5 172,-288.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"269,-311.5 172,-311.5 172,-288.5 269,-288.5 \"/>\n<text text-anchor=\"start\" x=\"176\" y=\"-296.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"118,-269.5 118,-288.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-276.5\" font-family=\"monospace\" font-size=\"10.00\">sea_level</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"172,-269.5 172,-288.5 \"/>\n<text text-anchor=\"start\" x=\"122\" y=\"-276.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"175\" y=\"-276.5\" font-family=\"monospace\" font-size=\"10.00\">sediment_height</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"118,-250.5 118,-269.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-257.5\" font-family=\"monospace\" font-size=\"10.00\">bedrock_elevation</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"172,-250.5 172,-269.5 \"/>\n<text text-anchor=\"start\" x=\"122\" y=\"-257.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"175\" y=\"-257.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"118,-231.5 118,-250.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\">subsidence_rate</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"172,-231.5 172,-250.5 \"/>\n<text text-anchor=\"start\" x=\"122\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"175\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- TimeIntegration&#45;&gt;WaterDepth -->\n<g id=\"edge1\" class=\"edge\">\n<title>TimeIntegration&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M138,-377.97C138,-369.98 138,-361.34 138,-352.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"141.5,-352.47 138,-342.47 134.5,-352.47 141.5,-352.47\"/>\n</g>\n<!-- Boxes -->\n<g id=\"node2\" class=\"node\">\n<title>Boxes</title>\n<path fill=\"none\" stroke=\"black\" d=\"M470,-457C470,-457 332,-457 332,-457 326,-457 320,-451 320,-445 320,-445 320,-390 320,-390 320,-384 326,-378 332,-378 332,-378 470,-378 470,-378 476,-378 482,-384 482,-390 482,-390 482,-445 482,-445 482,-451 476,-457 470,-457\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"327,-426.5 475,-426.5 \"/>\n<text text-anchor=\"start\" x=\"377.5\" y=\"-435.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Boxes</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"327,-403.5 327,-426.5 374,-426.5 374,-403.5 327,-403.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"327,-403.5 374,-403.5 374,-426.5 327,-426.5 \"/>\n<text text-anchor=\"start\" x=\"331\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"374,-403.5 374,-426.5 428,-426.5 428,-403.5 374,-403.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"374,-403.5 374,-426.5 428,-426.5 428,-403.5 374,-403.5\"/>\n<text text-anchor=\"start\" x=\"378\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"428,-403.5 428,-426.5 475,-426.5 475,-403.5 428,-403.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"475,-426.5 428,-426.5 428,-403.5 475,-403.5 \"/>\n<text text-anchor=\"start\" x=\"432\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"374,-384.5 374,-403.5 \"/>\n<text text-anchor=\"start\" x=\"331\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\">box</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"428,-384.5 428,-403.5 \"/>\n<text text-anchor=\"start\" x=\"378\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"431\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- Boxes&#45;&gt;WaterDepth -->\n<g id=\"edge2\" class=\"edge\">\n<title>Boxes&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M324.22,-377.97C304.72,-368.18 283.26,-357.41 262.07,-346.77\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"263.51,-343.58 253,-342.22 260.37,-349.83 263.51,-343.58\"/>\n</g>\n<!-- CellularAutomaton -->\n<g id=\"node7\" class=\"node\">\n<title>CellularAutomaton</title>\n<path fill=\"none\" stroke=\"black\" d=\"M589.5,-179.5C589.5,-179.5 328.5,-179.5 328.5,-179.5 322.5,-179.5 316.5,-173.5 316.5,-167.5 316.5,-167.5 316.5,-93.5 316.5,-93.5 316.5,-87.5 322.5,-81.5 328.5,-81.5 328.5,-81.5 589.5,-81.5 589.5,-81.5 595.5,-81.5 601.5,-87.5 601.5,-93.5 601.5,-93.5 601.5,-167.5 601.5,-167.5 601.5,-173.5 595.5,-179.5 589.5,-179.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"324,-149.5 595,-149.5 \"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-158.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">CellularAutomaton</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"324,-126.5 324,-149.5 417,-149.5 417,-126.5 324,-126.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"324,-126.5 417,-126.5 417,-149.5 324,-149.5 \"/>\n<text text-anchor=\"start\" x=\"328\" y=\"-134.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"417,-126.5 417,-149.5 522,-149.5 522,-126.5 417,-126.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"417,-126.5 417,-149.5 522,-149.5 522,-126.5 417,-126.5\"/>\n<text text-anchor=\"start\" x=\"421\" y=\"-134.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"522,-126.5 522,-149.5 595,-149.5 595,-126.5 522,-126.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"595,-149.5 522,-149.5 522,-126.5 595,-126.5 \"/>\n<text text-anchor=\"start\" x=\"526\" y=\"-134.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"417,-107.5 417,-126.5 \"/>\n<text text-anchor=\"start\" x=\"328\" y=\"-114.5\" font-family=\"monospace\" font-size=\"10.00\">ca_interval</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"522,-107.5 522,-126.5 \"/>\n<text text-anchor=\"start\" x=\"421\" y=\"-114.5\" font-family=\"monospace\" font-size=\"10.00\">viability_range</text>\n<text text-anchor=\"start\" x=\"525\" y=\"-114.5\" font-family=\"monospace\" font-size=\"10.00\">ca</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"417,-88.5 417,-107.5 \"/>\n<text text-anchor=\"start\" x=\"328\" y=\"-95.5\" font-family=\"monospace\" font-size=\"10.00\">ca_random_seed</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"522,-88.5 522,-107.5 \"/>\n<text text-anchor=\"start\" x=\"421\" y=\"-95.5\" font-family=\"monospace\" font-size=\"10.00\">activation_range</text>\n<text text-anchor=\"start\" x=\"525\" y=\"-95.5\" font-family=\"monospace\" font-size=\"10.00\">ca_priority</text>\n</g>\n<!-- Boxes&#45;&gt;CellularAutomaton -->\n<g id=\"edge7\" class=\"edge\">\n<title>Boxes&#45;&gt;CellularAutomaton</title>\n<path fill=\"none\" stroke=\"black\" d=\"M443.11,-377.81C452.03,-367.16 460.2,-354.95 465,-342 483.17,-292.97 479.16,-233.01 472.09,-189.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"475.49,-188.81 470.34,-179.55 468.6,-190 475.49,-188.81\"/>\n</g>\n<!-- Production -->\n<g id=\"node5\" class=\"node\">\n<title>Production</title>\n<path fill=\"none\" stroke=\"black\" d=\"M286.5,-189C286.5,-189 39.5,-189 39.5,-189 33.5,-189 27.5,-183 27.5,-177 27.5,-177 27.5,-84 27.5,-84 27.5,-78 33.5,-72 39.5,-72 39.5,-72 286.5,-72 286.5,-72 292.5,-72 298.5,-78 298.5,-84 298.5,-84 298.5,-177 298.5,-177 298.5,-183 292.5,-189 286.5,-189\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"35,-158.5 292,-158.5 \"/>\n<text text-anchor=\"start\" x=\"119.5\" y=\"-167.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Production</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"35,-135.5 35,-158.5 104,-158.5 104,-135.5 35,-135.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"35,-135.5 104,-135.5 104,-158.5 35,-158.5 \"/>\n<text text-anchor=\"start\" x=\"39\" y=\"-143.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"104,-135.5 104,-158.5 245,-158.5 245,-135.5 104,-135.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"104,-135.5 104,-158.5 245,-158.5 245,-135.5 104,-135.5\"/>\n<text text-anchor=\"start\" x=\"108\" y=\"-143.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"245,-135.5 245,-158.5 292,-158.5 292,-135.5 245,-135.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"292,-158.5 245,-158.5 245,-135.5 292,-135.5 \"/>\n<text text-anchor=\"start\" x=\"249\" y=\"-143.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"104,-116.5 104,-135.5 \"/>\n<text text-anchor=\"start\" x=\"39\" y=\"-123.5\" font-family=\"monospace\" font-size=\"10.00\">insolation</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"245,-116.5 245,-135.5 \"/>\n<text text-anchor=\"start\" x=\"108\" y=\"-123.5\" font-family=\"monospace\" font-size=\"10.00\">maximum_growth_rate</text>\n<text text-anchor=\"start\" x=\"248\" y=\"-123.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"104,-97.5 104,-116.5 \"/>\n<text text-anchor=\"start\" x=\"39\" y=\"-104.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"245,-97.5 245,-116.5 \"/>\n<text text-anchor=\"start\" x=\"108\" y=\"-104.5\" font-family=\"monospace\" font-size=\"10.00\">extinction_coefficient</text>\n<text text-anchor=\"start\" x=\"248\" y=\"-104.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"104,-78.5 104,-97.5 \"/>\n<text text-anchor=\"start\" x=\"39\" y=\"-85.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"245,-78.5 245,-97.5 \"/>\n<text text-anchor=\"start\" x=\"108\" y=\"-85.5\" font-family=\"monospace\" font-size=\"10.00\">saturation_intensity</text>\n<text text-anchor=\"start\" x=\"248\" y=\"-85.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- WaterDepth&#45;&gt;Production -->\n<g id=\"edge3\" class=\"edge\">\n<title>WaterDepth&#45;&gt;Production</title>\n<path fill=\"none\" stroke=\"black\" d=\"M147.52,-224.98C148.92,-216.54 150.37,-207.77 151.8,-199.14\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"155.28,-199.54 153.46,-189.11 148.38,-198.4 155.28,-199.54\"/>\n</g>\n<!-- FaciesBase -->\n<g id=\"node4\" class=\"node\">\n<title>FaciesBase</title>\n<path fill=\"none\" stroke=\"black\" d=\"M444,-323C444,-323 306,-323 306,-323 300,-323 294,-317 294,-311 294,-311 294,-256 294,-256 294,-250 300,-244 306,-244 306,-244 444,-244 444,-244 450,-244 456,-250 456,-256 456,-256 456,-311 456,-311 456,-317 450,-323 444,-323\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"301,-292.5 449,-292.5 \"/>\n<text text-anchor=\"start\" x=\"331\" y=\"-301.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">FaciesBase</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"301,-269.5 301,-292.5 348,-292.5 348,-269.5 301,-269.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"301,-269.5 348,-269.5 348,-292.5 301,-292.5 \"/>\n<text text-anchor=\"start\" x=\"305\" y=\"-277.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"348,-269.5 348,-292.5 402,-292.5 402,-269.5 348,-269.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"348,-269.5 348,-292.5 402,-292.5 402,-269.5 348,-269.5\"/>\n<text text-anchor=\"start\" x=\"352\" y=\"-277.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"402,-269.5 402,-292.5 449,-292.5 449,-269.5 402,-269.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"449,-292.5 402,-292.5 402,-269.5 449,-269.5 \"/>\n<text text-anchor=\"start\" x=\"406\" y=\"-277.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"348,-250.5 348,-269.5 \"/>\n<text text-anchor=\"start\" x=\"305\" y=\"-257.5\" font-family=\"monospace\" font-size=\"10.00\">facies</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"402,-250.5 402,-269.5 \"/>\n<text text-anchor=\"start\" x=\"352\" y=\"-257.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"405\" y=\"-257.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- FaciesBase&#45;&gt;Production -->\n<g id=\"edge4\" class=\"edge\">\n<title>FaciesBase&#45;&gt;Production</title>\n<path fill=\"none\" stroke=\"black\" d=\"M320.68,-243.81C299.83,-228.96 275.45,-211.59 252.17,-195.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"254.17,-192.14 244,-189.19 250.11,-197.84 254.17,-192.14\"/>\n</g>\n<!-- FaciesBase&#45;&gt;CellularAutomaton -->\n<g id=\"edge8\" class=\"edge\">\n<title>FaciesBase&#45;&gt;CellularAutomaton</title>\n<path fill=\"none\" stroke=\"black\" d=\"M396.63,-243.61C405.95,-226.87 417.03,-206.95 427.25,-188.58\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"430.38,-190.15 432.18,-179.71 424.26,-186.75 430.38,-190.15\"/>\n</g>\n<!-- CAProduction -->\n<g id=\"node6\" class=\"node\">\n<title>CAProduction</title>\n<path fill=\"none\" stroke=\"black\" d=\"M360.5,-36C360.5,-36 261.5,-36 261.5,-36 255.5,-36 249.5,-30 249.5,-24 249.5,-24 249.5,-12 249.5,-12 249.5,-6 255.5,0 261.5,0 261.5,0 360.5,0 360.5,0 366.5,0 372.5,-6 372.5,-12 372.5,-12 372.5,-24 372.5,-24 372.5,-30 366.5,-36 360.5,-36\"/>\n<text text-anchor=\"start\" x=\"256.5\" y=\"-15.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">CAProduction</text>\n</g>\n<!-- Production&#45;&gt;CAProduction -->\n<g id=\"edge6\" class=\"edge\">\n<title>Production&#45;&gt;CAProduction</title>\n<path fill=\"none\" stroke=\"black\" d=\"M240.03,-71.98C254.16,-61.43 268.15,-51 279.92,-42.21\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"282.14,-44.91 288.06,-36.12 277.96,-39.3 282.14,-44.91\"/>\n</g>\n<!-- CellularAutomaton&#45;&gt;CAProduction -->\n<g id=\"edge5\" class=\"edge\">\n<title>CellularAutomaton&#45;&gt;CAProduction</title>\n<path fill=\"none\" stroke=\"black\" d=\"M394.52,-81.35C376.24,-67.71 357.19,-53.48 341.9,-42.07\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"343.93,-39.21 333.82,-36.04 339.74,-44.82 343.93,-39.21\"/>\n</g>\n</g>\n</svg>\n</div>","category":"page"},{"location":"components/production/","page":"Production","title":"Production","text":"The CAProduction component gives production that depends on the provided CA.","category":"page"},{"location":"components/production/","page":"Production","title":"Production","text":"<div class=\"noweb-label\">file:<i>src/Components/CAProduction.jl</i></div>","category":"page"},{"location":"components/production/","page":"Production","title":"Production","text":"@compose module CAProduction\n    @mixin TimeIntegration, CellularAutomaton, Production\n    using ..Common\n    using ..Production: production_rate\n    using ..WaterDepth: water_depth\n\n    function production(input::AbstractInput)\n        w = water_depth(input)\n        na = [CartesianIndex()]\n        output = Array{Amount, 3}(undef, n_facies(input), input.box.grid_size...)\n\n        w = water_depth(input)\n        p(f, w) = production_rate(input.insolation, input.facies[f], w) .* input.time.Δt\n\n        return function(state::AbstractState)\n            for f = 1:n_facies(input)\n                output[f, :, :] = ifelse.(state.ca .== f, p.(f, w(state)), 0.0u\"m\")\n            end\n            return output\n        end \n    end\nend","category":"page"},{"location":"components/production/","page":"Production","title":"Production","text":"","category":"page"},{"location":"active-layer-transport/#Active-Layer-Transport","page":"Active Layer Transport","title":"Active Layer Transport","text":"","category":"section"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"The following is inspired on well-known active layer approaches in river bed sediment transport [3] [4] [1]. All quantities with subscript f are facies dependent. Sediment is measured in meters of deposited material. P_f is the production of sediment per facies in ms. Further unit calculations would be more readable if we consider the unit of sediment as separate, so for instance it doesn't cancel against m^2 in the units of sediment flux. In the implementation, nu has the units of rm m which is totaly weird. TBC","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"[1]: Literature on active (or mixing) layer transport modeling is vast. Most of which is concerned with much smaller time scales, and more complicated physics than we are mostly dealing with.","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"In a model without transport, we could write","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"sigma + sum_f partial eta_f over partial t = sum_f P_f","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"where sigma is the subsidence rate in ms. We consider the mass balance for each facies separately.","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"We suppose that loose sediment, either fresh production or disintegrated older sediment, is being transported in a layer on top of the sea bed. The flux in this layer is assumed to be directly proportional to the local slope of the sea bed  nabla_x eta_* , where eta_* = sum_f eta_f, the sum over all facies contributions, including eta_0, the initial bedrock eleveation.","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"(Image: Schematic of Active Layer approach)","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"The active layer now contains a concentration C_f particles of different grain size (for each facies f). If needed, C_f = alpha_f P_f where alpha_f is some facies parameter determining the fraction of production that is available for transport. The sediment flux is given as,","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"bf q_f = -nu_f C_f bf nabla_x eta_*","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"The following is the mass balance:","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"sigma + partial eta_* over partial t = -sum_f bf nabla_x cdot bf q_f + sum_f P_f","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"In our modelling we keep track of individual contributions per facies over time [2].","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"[2]: Note that in other approaches to active layer transport, like Paola 1992, there would be a factor 1C_f. Here we have a different interpretation to what the concentration means: the sediment settles down after transport, such that the concentration has no impact on the change in sediment surface elevation.","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"Combining these equations, and ignoring subsidence for the moment (which is a global effect and can't be expressed on a per-facies basis), we get a component-wise diffusion equation","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"partial eta_f(x)overpartial t = bf nabla_x cdot big nu_f alpha_f P_f(x) bf nabla_x eta_*(x) big + P_f(x)","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"In our model we need to solve this equation one time-step each iteration. If we solve this using forward methods, we should be reminded of the CFL limit for diffusion equations (depending on the diffusion constants and grid size we shouldn't pick the time steps too large). Alternatively, for these two-dimensional situations, an implicit approach is feasible. Also we should take care that somehow nabla(nualpha P nabla eta) + P  0. The interpretation being that we can't transport more than we produce, even if there is capacity to do so.","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"To solve this equation, it is nicer to expand the transport-diffusion term using the product rule, in short notation:","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"partial_t eta_f = nu nabla P_f(x) cdot nabla eta(x) + nu P_f(x) nabla^2 eta(x) + P_f(x)","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"where nu = nu_f alpha_f","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"So we have a advection component with velocity nu nabla P_f and a diffusion component with a coefficient nu P_f.","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"As part of the production P_f we disintegrate older sediment at a fixed rate.","category":"page"},{"location":"active-layer-transport/#Test-1:-production-transport","page":"Active Layer Transport","title":"Test 1: production transport","text":"","category":"section"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"Suppose we have an incline in one direction, as per usual on a coastal slice. Production is happening in a circular patch in our box, with constant rate. In addition, we'll release the top 1m of sediment for further transport.","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"<details><summary>Test model</summary>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"<div class=\"noweb-label\">file:<i>examples/transport/active-layer.jl</i></div>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"module ActiveLayer\n\nusing Unitful\nusing CarboKitten.Stencil: convolution, stencil\nusing CarboKitten.Config: Box, axes\nusing CarboKitten.BoundaryTrait: Shelf\nusing CarboKitten.Utility: in_units_of\nusing CarboKitten.Transport.ActiveLayer: pde_stencil, Amount, Rate\n\n<<example-active-layer>>\n\nend","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"</details>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"Our input structure facilitates a single facies, specifying an initial bedrock elevation, sediment layer and a function for a location dependent constant production rate. The transport is parametrized by a disintegration rate and a diffusion coefficient.","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"<div class=\"noweb-label\">⪡example-active-layer⪢≣</div>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"@kwdef struct Input\n    box\n    Δt::typeof(1.0u\"Myr\")\n    t_end::typeof(1.0u\"Myr\")\n    bedrock_elevation   # function (x::u\"m\", y::u\"m\") -> u\"m\"\n    initial_sediment    # function (x::u\"m\", y::u\"m\") -> u\"m\"\n    production          # function (x::u\"m\", y::u\"m\") -> u\"m/s\"\n    disintegration_rate::typeof(1.0u\"m/Myr\")\n    subsidence_rate::typeof(1.0u\"m/Myr\")\n    diffusion_coefficient::typeof(1.0u\"m\")\nend","category":"page"},{"location":"active-layer-transport/#Production-patch","page":"Active Layer Transport","title":"Production patch","text":"","category":"section"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"Establish a grid of 100x50, 15km on each side, dropping from 0 to 50m depth. Keeping the disintegration rate to a similar value as the production rate seems a sensible choice.","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"<div class=\"noweb-label\">⪡example-active-layer⪢≣</div>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"production_patch(center, radius, rate) = function(x, y)\n    (pcx, pcy) = center\n    (x - pcx)^2 + (y - pcy)^2 < radius^2 ?\n        rate :\n        0.0u\"m/Myr\"\nend\n\nconst input = Input(\n    box=Box{Shelf}(grid_size=(100, 50), phys_scale=150.0u\"m\"),\n    Δt=0.001u\"Myr\",\n    t_end=1.0u\"Myr\",\n\n    bedrock_elevation = (x, y) -> -x / 300.0,\n    initial_sediment = (x, y) -> 0.0u\"m\",\n\n    production = production_patch(\n        (5000.0u\"m\", 3750.0u\"m\"),\n        2.0u\"km\",\n        50.0u\"m/Myr\"),\n\n    disintegration_rate = 50.0u\"m/Myr\",\n    subsidence_rate = 50.0u\"m/Myr\",\n\n    diffusion_coefficient = 10000.0u\"m\"\n)","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"(Image: Production patch on an inclining bedrock)","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"<details><summary>Plotting code</summary>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"<div class=\"noweb-label\">file:<i>examples/transport/active-layer-plot-production.jl</i></div>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"#| requires: examples/transport/active-layer.jl\n#| creates: docs/src/_fig/active-layer-production-patch.png\n#| collect: figures\n\ninclude(\"active-layer.jl\")\nusing Unitful\nusing CarboKitten.Config: axes\nusing CarboKitten.Utility: in_units_of\nusing CairoMakie\nusing .ActiveLayer: input\n\nfunction main()\n  (x, y) = axes(input.box)\n  η = input.bedrock_elevation.(x, y')\n  p = input.production.(x, y')\n\n  fig = Figure()\n  ax = Axis3(fig[1,1], xlabel=\"x (km)\", ylabel=\"y (km)\", zlabel=\"η (m)\", azimuth=5π/3)\n  surface!(ax, x |> in_units_of(u\"km\"), y |> in_units_of(u\"km\"), η |> in_units_of(u\"m\"), color = p |> in_units_of(u\"m/Myr\"))\n  save(\"docs/src/_fig/active-layer-production-patch.png\", fig)\nend\n\nmain()","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"</details>","category":"page"},{"location":"active-layer-transport/#Solving-the-PDE","page":"Active Layer Transport","title":"Solving the PDE","text":"","category":"section"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"Just as a reminder:","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"partial_t eta_f = nu nabla P_f(x) cdot nabla eta(x) + nu P_f(x) nabla^2 eta(x) + P_f(x)","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"Below is the kernel encoding a central differencing scheme i.e. [-1, 0, 1]/(2Δx) for first derivative and [0 -1 0; -1 4 -1; 0 -1 0]/Δx^2 for the laplacian.","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"<div class=\"noweb-label\">file:<i>src/Transport/ActiveLayer.jl</i></div>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"module ActiveLayer\n\nusing Unitful\nusing ...BoundaryTrait\nusing ...Boxes: Box\nusing ...Stencil: stencil\n\nconst Rate = typeof(1.0u\"m/Myr\")\nconst Amount = typeof(1.0u\"m\")\n\nfunction pde_stencil(box::Box{BT}, ν) where {BT <: Boundary{2}}\n    Δx = box.phys_scale\n\n    function kernel(x)\n        adv = ν * ((x[3, 2][1] - x[1, 2][1]) * (x[3, 2][2] - x[1, 2][2]) +\n                    (x[2, 3][1] - x[2, 1][1]) * (x[2, 3][2] - x[2, 1][2])) /\n                  (2Δx)^2\n\n        dif = ν * x[2, 2][2] * (x[3, 2][1] + x[2, 3][1] + x[1, 2][1] +\n                  x[2, 1][1] - 4*x[2, 2][1]) / (Δx)^2\n\n        prd = x[2, 2][2]\n\n        return max(0.0u\"m\", adv + dif + prd)\n    end\n\n    stencil(Tuple{Amount, Amount}, Amount, BT, (3, 3), kernel)\nend\n\nend","category":"page"},{"location":"active-layer-transport/#Model-loop","page":"Active Layer Transport","title":"Model loop","text":"","category":"section"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"Every iteration we determine the maximum disintegrated sediment. If the total amount of sediment is smaller than the maximum, then that amount is disintegrated instead. We compute the concentrations in the active layer in terms of amounts of sediment, so P Delta t. Since P appears in every term of the PDE, we're free to do so.","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"<div class=\"noweb-label\">⪡example-active-layer⪢≣</div>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"mutable struct State\n    time::typeof(1.0u\"Myr\")\n    sediment::Matrix{typeof(1.0u\"m\")}\nend\n\nfunction initial_state(input)\n    x, y = axes(input.box)\n    State(0.0u\"Myr\", input.initial_sediment.(x, y'))\nend\n\nstruct Frame\n    t::typeof(1.0u\"Myr\")\n    δ::Matrix{Amount}\nend\n\nfunction propagator(input)\n    δ = Matrix{Amount}(undef, input.box.grid_size...)\n    x, y = axes(input.box)\n    μ0 = input.bedrock_elevation.(x, y')\n\n    function active_layer(state)\n        max_amount = input.disintegration_rate * input.Δt\n        amount = min.(max_amount, state.sediment)\n        state.sediment .-= amount\n\n        input.production.(x, y') * input.Δt .+ amount\n    end\n\n    stc = pde_stencil(input.box, input.diffusion_coefficient)\n    apply_pde(μ::Matrix{Amount}, p::Matrix{Amount}) = stc(tuple.(μ, p), δ)\n\n    function (state)\n        p = active_layer(state)\n        apply_pde(state.sediment .+ μ0, p)\n        return Frame(state.time, δ)\n    end\nend\n\nfunction run_model(input)\n    state = initial_state(input)\n    prop = propagator(input)\n\n    Channel{State}() do ch\n        while state.time < input.t_end\n            Δ = prop(state)\n            state.sediment .+= Δ.δ\n            state.time += input.Δt\n            put!(ch, state)\n        end\n    end\nend","category":"page"},{"location":"active-layer-transport/#Running-the-model","page":"Active Layer Transport","title":"Running the model","text":"","category":"section"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"We run the model with 1000 time steps but only inspect one in every 100.","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"(Image: Active layer test)","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"<details><summary>Plotting code</summary>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"<div class=\"noweb-label\">file:<i>examples/transport/active-layer-plot-result.jl</i></div>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"#| requires: examples/transport/active-layer.jl\n#| creates: docs/src/_fig/active-layer-test.png\n#| collect: figures\n\nmodule ActiveLayerPlot\n\ninclude(\"active-layer.jl\")\nusing CairoMakie\nusing Unitful\nusing CarboKitten.Config: axes\nusing CarboKitten.Utility: in_units_of\nusing .ActiveLayer: input, run_model\n\nfunction main()\n  result = Iterators.map(deepcopy,\n      Iterators.filter(x -> mod(x[1], 100) == 0, enumerate(run_model(input)))) |> collect\n\n    (x, y) = axes(input.box)\n    η = input.bedrock_elevation.(x, y') .+ result[10][2].sediment .- input.subsidence_rate * result[10][2].time\n    # p = input.production.(x, y')\n\n    fig = Figure(size=(800, 1000))\n    ax = Axis3(fig[1:2,1], xlabel=\"x (km)\", ylabel=\"y (km)\", zlabel=\"η (m)\", azimuth=5π/3)\n    surface!(ax, x |> in_units_of(u\"km\"), y |> in_units_of(u\"km\"), η |> in_units_of(u\"m\"))\n\n    ax2 = Axis(fig[3,1], xlabel=\"x (km)\", ylabel=\"η (m)\")\n\n    for i in 1:10\n        η = input.bedrock_elevation.(x, y') .+ result[i][2].sediment .- input.subsidence_rate * result[i][2].time\n\n        lines!(ax2, x |> in_units_of(u\"km\"), η[:, 25] |> in_units_of(u\"m\"))\n    end\n\n    save(\"docs/src/_fig/active-layer-test.png\", fig)\nend\n\nend\n\nActiveLayerPlot.main()","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"</details>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"Note in the bottom figure, due to sedimentation not keeping up with subsidence, the lines go down in time. We see the sediment transport being favoured to downslope areas, which is what we want. This effect could be made more extreme by increasing the disintegration rate.","category":"page"},{"location":"active-layer-transport/#Test-2:-erosion","page":"Active Layer Transport","title":"Test 2: erosion","text":"","category":"section"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"Suppose now we have no production, but we start with a steep gradient in the existing sediment. We expect this gradient to erode.","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"In the input we set the production to zero, but we specify an initial sediment that contains both a step and a top-hat function. Erodability of these kind of features could be a measurable quantity to which we could potentially calibrate this transport model.","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"Note that, due to the way we populate the active layer, the gradient nabla P will vanish, leaving us with a pure diffusion system.","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"<div class=\"noweb-label\">⪡example-active-layer-erosion⪢≣</div>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"function initial_sediment(x, y)\n  if x < 5.0u\"km\"\n    return 30.0u\"m\"\n  end\n\n  if x > 10.0u\"km\" && x < 11.0u\"km\"\n    return 20.0u\"m\"\n  end\n\n  return 5.0u\"m\"\nend\n\nconst INPUT = ActiveLayer.Input(\n    box                   = Box{Shelf}(grid_size=(100, 1), phys_scale=150.0u\"m\"),\n    Δt                    = 0.001u\"Myr\",\n    t_end                 = 1.0u\"Myr\",\n\n    bedrock_elevation     = (x, y) -> -30.0u\"m\",\n    initial_sediment      = initial_sediment,\n    production            = (x, y) -> 0.0u\"m/Myr\",\n\n    disintegration_rate   = 50.0u\"m/Myr\",\n    subsidence_rate       = 50.0u\"m/Myr\",\n    diffusion_coefficient = 10000.0u\"m\")","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"(Image: Active layer erosion test)","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"<details><summary>Plotting code</summary>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"<div class=\"noweb-label\">file:<i>examples/transport/active-layer-erosion.jl</i></div>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"#| requires: examples/transport/active-layer.jl\n#| creates: docs/src/_fig/active-layer-erosion.png\n#| collect: figures\n\nmodule ActiveLayerErosion\n\ninclude(\"active-layer.jl\")\n\nusing Unitful\nusing CarboKitten.BoundaryTrait: Shelf\nusing CarboKitten.Config: Box, axes\nusing CarboKitten.Utility: in_units_of\nusing CairoMakie\n\n<<example-active-layer-erosion>>\n\nfunction main(input)\n    y_idx = 1\n    result = Iterators.map(deepcopy,\n          Iterators.filter(x -> mod(x[1]-1, 400) == 0, enumerate(ActiveLayer.run_model(input)))) |> collect\n\n    (x, y) = axes(input.box)\n    # p = input.production.(x, y')\n\n    fig = Figure(size=(800, 600))\n    # ax = Axis3(fig[1:2,1], xlabel=\"x (km)\", ylabel=\"y (km)\", zlabel=\"η (m)\", azimuth=5π/3)\n    # surface!(ax, x |> in_units_of(u\"km\"), y |> in_units_of(u\"km\"), η |> in_units_of(u\"m\"))\n\n    ax2 = Axis(fig[1,1], xlabel=\"x (km)\", ylabel=\"η (m)\")\n\n    for r in result\n        η = input.bedrock_elevation.(x, y') .+ r[2].sediment .- input.subsidence_rate * r[2].time\n\n        lines!(ax2, x |> in_units_of(u\"km\"), η[:, y_idx] |> in_units_of(u\"m\"))\n    end\n\n    save(\"docs/src/_fig/active-layer-erosion.png\", fig)\nend\n\nend\n\nActiveLayerErosion.main(ActiveLayerErosion.INPUT)","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"</details>","category":"page"},{"location":"active-layer-transport/#Active-Layer-Component","page":"Active Layer Transport","title":"Active Layer Component","text":"","category":"section"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"<div class=\"component-dag\" style=\"overflow: scroll\"><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.50.0 (20211204.2007)\n -->\n<!-- Pages: 1 -->\n<svg width=\"794pt\" height=\"355pt\"\n viewBox=\"0.00 0.00 794.00 355.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 351)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-351 790,-351 790,4 -4,4\"/>\n<!-- TimeIntegration -->\n<g id=\"node1\" class=\"node\">\n<title>TimeIntegration</title>\n<path fill=\"none\" stroke=\"black\" d=\"M207,-347C207,-347 69,-347 69,-347 63,-347 57,-341 57,-335 57,-335 57,-280 57,-280 57,-274 63,-268 69,-268 69,-268 207,-268 207,-268 213,-268 219,-274 219,-280 219,-280 219,-335 219,-335 219,-341 213,-347 207,-347\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"64,-316.5 212,-316.5 \"/>\n<text text-anchor=\"start\" x=\"72.5\" y=\"-325.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">TimeIntegration</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"64,-293.5 64,-316.5 111,-316.5 111,-293.5 64,-293.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"64,-293.5 111,-293.5 111,-316.5 64,-316.5 \"/>\n<text text-anchor=\"start\" x=\"68\" y=\"-301.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"111,-293.5 111,-316.5 165,-316.5 165,-293.5 111,-293.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"111,-293.5 111,-316.5 165,-316.5 165,-293.5 111,-293.5\"/>\n<text text-anchor=\"start\" x=\"115\" y=\"-301.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"165,-293.5 165,-316.5 212,-316.5 212,-293.5 165,-293.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"212,-316.5 165,-316.5 165,-293.5 212,-293.5 \"/>\n<text text-anchor=\"start\" x=\"169\" y=\"-301.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"111,-274.5 111,-293.5 \"/>\n<text text-anchor=\"start\" x=\"68\" y=\"-281.5\" font-family=\"monospace\" font-size=\"10.00\">time</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"165,-274.5 165,-293.5 \"/>\n<text text-anchor=\"start\" x=\"115\" y=\"-281.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"168\" y=\"-281.5\" font-family=\"monospace\" font-size=\"10.00\">step</text>\n</g>\n<!-- WaterDepth -->\n<g id=\"node2\" class=\"node\">\n<title>WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M264,-232C264,-232 12,-232 12,-232 6,-232 0,-226 0,-220 0,-220 0,-127 0,-127 0,-121 6,-115 12,-115 12,-115 264,-115 264,-115 270,-115 276,-121 276,-127 276,-127 276,-220 276,-220 276,-226 270,-232 264,-232\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-201.5 269,-201.5 \"/>\n<text text-anchor=\"start\" x=\"90.5\" y=\"-210.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">WaterDepth</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"7,-178.5 7,-201.5 118,-201.5 118,-178.5 7,-178.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-178.5 118,-178.5 118,-201.5 7,-201.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-186.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"118,-178.5 118,-201.5 172,-201.5 172,-178.5 118,-178.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"118,-178.5 118,-201.5 172,-201.5 172,-178.5 118,-178.5\"/>\n<text text-anchor=\"start\" x=\"122\" y=\"-186.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"172,-178.5 172,-201.5 269,-201.5 269,-178.5 172,-178.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"269,-201.5 172,-201.5 172,-178.5 269,-178.5 \"/>\n<text text-anchor=\"start\" x=\"176\" y=\"-186.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"118,-159.5 118,-178.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-166.5\" font-family=\"monospace\" font-size=\"10.00\">sea_level</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"172,-159.5 172,-178.5 \"/>\n<text text-anchor=\"start\" x=\"122\" y=\"-166.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"175\" y=\"-166.5\" font-family=\"monospace\" font-size=\"10.00\">sediment_height</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"118,-140.5 118,-159.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-147.5\" font-family=\"monospace\" font-size=\"10.00\">bedrock_elevation</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"172,-140.5 172,-159.5 \"/>\n<text text-anchor=\"start\" x=\"122\" y=\"-147.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"175\" y=\"-147.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"118,-121.5 118,-140.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-128.5\" font-family=\"monospace\" font-size=\"10.00\">subsidence_rate</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"172,-121.5 172,-140.5 \"/>\n<text text-anchor=\"start\" x=\"122\" y=\"-128.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"175\" y=\"-128.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- TimeIntegration&#45;&gt;WaterDepth -->\n<g id=\"edge1\" class=\"edge\">\n<title>TimeIntegration&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M138,-267.97C138,-259.98 138,-251.34 138,-242.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"141.5,-242.47 138,-232.47 134.5,-242.47 141.5,-242.47\"/>\n</g>\n<!-- ActiveLayer -->\n<g id=\"node6\" class=\"node\">\n<title>ActiveLayer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M522.5,-79C522.5,-79 227.5,-79 227.5,-79 221.5,-79 215.5,-73 215.5,-67 215.5,-67 215.5,-12 215.5,-12 215.5,-6 221.5,0 227.5,0 227.5,0 522.5,0 522.5,0 528.5,0 534.5,-6 534.5,-12 534.5,-12 534.5,-67 534.5,-67 534.5,-73 528.5,-79 522.5,-79\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"223,-48.5 528,-48.5 \"/>\n<text text-anchor=\"start\" x=\"329.5\" y=\"-57.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">ActiveLayer</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"223,-25.5 223,-48.5 346,-48.5 346,-25.5 223,-25.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"223,-25.5 346,-25.5 346,-48.5 223,-48.5 \"/>\n<text text-anchor=\"start\" x=\"227\" y=\"-33.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"346,-25.5 346,-48.5 481,-48.5 481,-25.5 346,-25.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"346,-25.5 346,-48.5 481,-48.5 481,-25.5 346,-25.5\"/>\n<text text-anchor=\"start\" x=\"350\" y=\"-33.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"481,-25.5 481,-48.5 528,-48.5 528,-25.5 481,-25.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"528,-48.5 481,-48.5 481,-25.5 528,-25.5 \"/>\n<text text-anchor=\"start\" x=\"485\" y=\"-33.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"346,-6.5 346,-25.5 \"/>\n<text text-anchor=\"start\" x=\"227\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\">disintegration_rate</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"481,-6.5 481,-25.5 \"/>\n<text text-anchor=\"start\" x=\"350\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\">diffusion_coefficient</text>\n<text text-anchor=\"start\" x=\"484\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- WaterDepth&#45;&gt;ActiveLayer -->\n<g id=\"edge4\" class=\"edge\">\n<title>WaterDepth&#45;&gt;ActiveLayer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M241.26,-114.99C259.85,-104.63 278.95,-94 296.68,-84.12\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"298.79,-86.95 305.83,-79.03 295.39,-80.84 298.79,-86.95\"/>\n</g>\n<!-- Boxes -->\n<g id=\"node3\" class=\"node\">\n<title>Boxes</title>\n<path fill=\"none\" stroke=\"black\" d=\"M543,-347C543,-347 405,-347 405,-347 399,-347 393,-341 393,-335 393,-335 393,-280 393,-280 393,-274 399,-268 405,-268 405,-268 543,-268 543,-268 549,-268 555,-274 555,-280 555,-280 555,-335 555,-335 555,-341 549,-347 543,-347\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"400,-316.5 548,-316.5 \"/>\n<text text-anchor=\"start\" x=\"450.5\" y=\"-325.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Boxes</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"400,-293.5 400,-316.5 447,-316.5 447,-293.5 400,-293.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"400,-293.5 447,-293.5 447,-316.5 400,-316.5 \"/>\n<text text-anchor=\"start\" x=\"404\" y=\"-301.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"447,-293.5 447,-316.5 501,-316.5 501,-293.5 447,-293.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"447,-293.5 447,-316.5 501,-316.5 501,-293.5 447,-293.5\"/>\n<text text-anchor=\"start\" x=\"451\" y=\"-301.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"501,-293.5 501,-316.5 548,-316.5 548,-293.5 501,-293.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"548,-316.5 501,-316.5 501,-293.5 548,-293.5 \"/>\n<text text-anchor=\"start\" x=\"505\" y=\"-301.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"447,-274.5 447,-293.5 \"/>\n<text text-anchor=\"start\" x=\"404\" y=\"-281.5\" font-family=\"monospace\" font-size=\"10.00\">box</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"501,-274.5 501,-293.5 \"/>\n<text text-anchor=\"start\" x=\"451\" y=\"-281.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"504\" y=\"-281.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- Boxes&#45;&gt;WaterDepth -->\n<g id=\"edge2\" class=\"edge\">\n<title>Boxes&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M392.66,-274.55C360.44,-261.89 322.35,-246.92 285.58,-232.48\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"286.86,-229.22 276.27,-228.82 284.3,-235.73 286.86,-229.22\"/>\n</g>\n<!-- SedimentBuffer -->\n<g id=\"node5\" class=\"node\">\n<title>SedimentBuffer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M774,-222.5C774,-222.5 486,-222.5 486,-222.5 480,-222.5 474,-216.5 474,-210.5 474,-210.5 474,-136.5 474,-136.5 474,-130.5 480,-124.5 486,-124.5 486,-124.5 774,-124.5 774,-124.5 780,-124.5 786,-130.5 786,-136.5 786,-136.5 786,-210.5 786,-210.5 786,-216.5 780,-222.5 774,-222.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"481,-192.5 779,-192.5 \"/>\n<text text-anchor=\"start\" x=\"567\" y=\"-201.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">SedimentBuffer</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"481,-169.5 481,-192.5 628,-192.5 628,-169.5 481,-169.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"481,-169.5 628,-169.5 628,-192.5 481,-192.5 \"/>\n<text text-anchor=\"start\" x=\"485\" y=\"-177.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"628,-169.5 628,-192.5 682,-192.5 682,-169.5 628,-169.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"628,-169.5 628,-192.5 682,-192.5 682,-169.5 628,-169.5\"/>\n<text text-anchor=\"start\" x=\"632\" y=\"-177.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"682,-169.5 682,-192.5 779,-192.5 779,-169.5 682,-169.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"779,-192.5 682,-192.5 682,-169.5 779,-169.5 \"/>\n<text text-anchor=\"start\" x=\"686\" y=\"-177.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"628,-150.5 628,-169.5 \"/>\n<text text-anchor=\"start\" x=\"485\" y=\"-157.5\" font-family=\"monospace\" font-size=\"10.00\">sediment_buffer_size</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"682,-150.5 682,-169.5 \"/>\n<text text-anchor=\"start\" x=\"632\" y=\"-157.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"685\" y=\"-157.5\" font-family=\"monospace\" font-size=\"10.00\">sediment_buffer</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"628,-131.5 628,-150.5 \"/>\n<text text-anchor=\"start\" x=\"485\" y=\"-138.5\" font-family=\"monospace\" font-size=\"10.00\">depositional_resolution</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"682,-131.5 682,-150.5 \"/>\n<text text-anchor=\"start\" x=\"632\" y=\"-138.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"685\" y=\"-138.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- Boxes&#45;&gt;SedimentBuffer -->\n<g id=\"edge3\" class=\"edge\">\n<title>Boxes&#45;&gt;SedimentBuffer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M519.54,-267.97C533.79,-255.91 549.79,-242.37 565.1,-229.42\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"567.65,-231.84 573.03,-222.71 563.13,-226.5 567.65,-231.84\"/>\n</g>\n<!-- FaciesBase -->\n<g id=\"node4\" class=\"node\">\n<title>FaciesBase</title>\n<path fill=\"none\" stroke=\"black\" d=\"M444,-213C444,-213 306,-213 306,-213 300,-213 294,-207 294,-201 294,-201 294,-146 294,-146 294,-140 300,-134 306,-134 306,-134 444,-134 444,-134 450,-134 456,-140 456,-146 456,-146 456,-201 456,-201 456,-207 450,-213 444,-213\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"301,-182.5 449,-182.5 \"/>\n<text text-anchor=\"start\" x=\"331\" y=\"-191.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">FaciesBase</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"301,-159.5 301,-182.5 348,-182.5 348,-159.5 301,-159.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"301,-159.5 348,-159.5 348,-182.5 301,-182.5 \"/>\n<text text-anchor=\"start\" x=\"305\" y=\"-167.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"348,-159.5 348,-182.5 402,-182.5 402,-159.5 348,-159.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"348,-159.5 348,-182.5 402,-182.5 402,-159.5 348,-159.5\"/>\n<text text-anchor=\"start\" x=\"352\" y=\"-167.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"402,-159.5 402,-182.5 449,-182.5 449,-159.5 402,-159.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"449,-182.5 402,-182.5 402,-159.5 449,-159.5 \"/>\n<text text-anchor=\"start\" x=\"406\" y=\"-167.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"348,-140.5 348,-159.5 \"/>\n<text text-anchor=\"start\" x=\"305\" y=\"-147.5\" font-family=\"monospace\" font-size=\"10.00\">facies</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"402,-140.5 402,-159.5 \"/>\n<text text-anchor=\"start\" x=\"352\" y=\"-147.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"405\" y=\"-147.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- FaciesBase&#45;&gt;ActiveLayer -->\n<g id=\"edge5\" class=\"edge\">\n<title>FaciesBase&#45;&gt;ActiveLayer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M375,-133.97C375,-120.13 375,-104.33 375,-89.7\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"378.5,-89.31 375,-79.31 371.5,-89.31 378.5,-89.31\"/>\n</g>\n<!-- SedimentBuffer&#45;&gt;ActiveLayer -->\n<g id=\"edge6\" class=\"edge\">\n<title>SedimentBuffer&#45;&gt;ActiveLayer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M537.22,-124.47C511.6,-111.21 483.95,-96.9 458.87,-83.92\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"460.25,-80.69 449.76,-79.2 457.03,-86.9 460.25,-80.69\"/>\n</g>\n</g>\n</svg>\n</div>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"<div class=\"noweb-label\">file:<i>src/Components/ActiveLayer.jl</i></div>","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"@compose module ActiveLayer\n@mixin WaterDepth, FaciesBase, SedimentBuffer\n\nexport disintegration, transportation\n\nusing ..Common\nusing CarboKitten.Transport.ActiveLayer: pde_stencil\nusing Unitful\n\n@kwdef struct Facies <: AbstractFacies\n    diffusion_coefficient::typeof(1.0u\"m\")\nend\n\n@kwdef struct Input <: AbstractInput\n    disintegration_rate::Rate = 50.0u\"m/Myr\"\nend\n\n\"\"\"\n    disintegration(input) -> f!\n\nPrepares the disintegration step. Returns a function `f!(state::State)`. The returned function\nmodifies the state, popping sediment from the `sediment_buffer` and returns an array of `Amount`.\n\"\"\"\nfunction disintegration(input)\n    max_h = input.disintegration_rate * input.time.Δt\n    output = Array{Float64, 3}(undef, n_facies(input), input.box.grid_size...)\n\n    return function(state)\n        h = min.(max_h, state.sediment_height)\n        state.sediment_height .-= h\n        pop_sediment!(state.sediment_buffer, h ./ input.depositional_resolution .|> NoUnits, output)\n        return output .* input.depositional_resolution\n    end\nend\n\n\"\"\"\n    transportation(input::Input) -> f\n\nPrepares the transportation step. Returns a function `f(state::State, active_layer)`,\ntransporting the active layer, returning a transported `Amount` of sediment.\n\"\"\"\nfunction transportation(input)\n    x, y = axes(input.box)\n    μ0 = input.bedrock_elevation.(x, y')\n    # We always return this array\n    transported_output = Array{Amount, 3}(undef, n_facies(input), input.box.grid_size...)\n    stencils = [\n        let stc = pde_stencil(input.box, f.diffusion_coefficient)\n            (μ, p) -> @views stc(tuple.(μ, p[i,:,:]), transported_output[i,:,:])\n        end for (i, f) in enumerate(input.facies) ]\n\n    return function(state, active_layer::Array{Amount, 3})\n        μ = state.sediment_height .+ μ0\n        for stc in stencils\n            stc(μ, active_layer)\n        end\n\n        return transported_output\n    end\nend\n\nend","category":"page"},{"location":"active-layer-transport/","page":"Active Layer Transport","title":"Active Layer Transport","text":"","category":"page"},{"location":"denudation/physical_erosion/#Physical-erosion-and-sediment-redistribution","page":"Physical Erosion","title":"Physical erosion and sediment redistribution","text":"","category":"section"},{"location":"denudation/physical_erosion/","page":"Physical Erosion","title":"Physical Erosion","text":"This method not only considers the amount of materials that have been removed, but also how the eroded materials being distributed to the neighboring regions depending on slopes on each direction.","category":"page"},{"location":"denudation/physical_erosion/#Physical-erosion","page":"Physical Erosion","title":"Physical erosion","text":"","category":"section"},{"location":"denudation/physical_erosion/","page":"Physical Erosion","title":"Physical Erosion","text":"The equations used to estimate how much material could one cell provide to the lower cells is described underneath. The equation is found in [14]. We choose this equation mainly because it specifically deals with bedrock substrates instead of loose sediments. In the equation, k_v is erodibility, and the default value is 0.23 according to the paper. (1 - I_f) indicates run-off generated in one cell and slope is the slope calculated based on ArcGis: how slope works. Note that the algorithms to calculate slope does not work on depressions.","category":"page"},{"location":"denudation/physical_erosion/","page":"Physical Erosion","title":"Physical Erosion","text":"D_phys = -k_v * (1 - I_f)^13 nabla h^23","category":"page"},{"location":"denudation/physical_erosion/","page":"Physical Erosion","title":"Physical Erosion","text":"<div class=\"noweb-label\">⪡physical-erosion⪢≣</div>","category":"page"},{"location":"denudation/physical_erosion/","page":"Physical Erosion","title":"Physical Erosion","text":"function physical_erosion(slope::Float64, Facies::facies)\n    local kv = 0.23 #very arguable paramster\n    #stencil(Float64,Reflected{2},(3,3),function(w)\n    -kv .* (1-Facies.inf).^(1/3) .* slope.^(2/3)\nend","category":"page"},{"location":"denudation/physical_erosion/#Redistribution-of-sediments","page":"Physical Erosion","title":"Redistribution of sediments","text":"","category":"section"},{"location":"denudation/physical_erosion/","page":"Physical Erosion","title":"Physical Erosion","text":"The redistribution of sediments after physical erosion is based on [15]: the eroded sediments calculated from the above equation are distributed to the neighboring 8 cells according to the slopes (defined as elevation differences/horizontal differences) towards each direction. The amount of sediments of one cell received is calculated by three functions below:","category":"page"},{"location":"denudation/physical_erosion/#Current-implementation","page":"Physical Erosion","title":"Current implementation","text":"","category":"section"},{"location":"denudation/physical_erosion/","page":"Physical Erosion","title":"Physical Erosion","text":"<div class=\"noweb-label\">file:<i>src/Denudation/PhysicalErosionMod.jl</i></div>","category":"page"},{"location":"denudation/physical_erosion/","page":"Physical Erosion","title":"Physical Erosion","text":"module PhysicalErosionMod\n\nimport ..Abstract: DenudationType, denudation, redistribution\nusing ...Stencil: Boundary, Periodic, offset_value, offset_index, stencil\nusing ...BoundaryTrait\nusing ...Boxes: Box\n\nusing Unitful\n\n@kwdef struct PhysicalErosion <: DenudationType\n    erodability::typeof((1.0u\"m/yr\"))\nend\n\nfunction physical_erosion(slope::Any, inf::Any, erodability::Float64)\n    -1 * -erodability .* (1 - inf) .^ (1 / 3) .* slope .^ (2 / 3) .* u\"m/kyr\"\nend\n\nfunction redistribution_kernel(w::Array{Float64}, cellsize::Float64)\n    s = zeros(Float64, (3, 3))\n    s[1, 1] = -(w[1, 1] - w[2, 2]) / cellsize\n    s[1, 2] = -(w[1, 2] - w[2, 2]) / cellsize / sqrt(2)\n    s[1, 3] = -(w[1, 3] - w[2, 2]) / cellsize\n    s[2, 1] = -(w[2, 1] - w[2, 2]) / cellsize / sqrt(2)\n    s[2, 2] = -(w[2, 2] - w[2, 2]) / cellsize\n    s[2, 3] = -(w[2, 3] - w[2, 2]) / cellsize / sqrt(2)\n    s[3, 1] = -(w[3, 1] - w[2, 2]) / cellsize\n    s[3, 2] = -(w[3, 2] - w[2, 2]) / cellsize / sqrt(2)\n    s[3, 3] = -(w[3, 3] - w[2, 2]) / cellsize\n\n    s[s.<0.0] .= 0.0\n    sumslope = sum(s)\n\n    if sumslope == 0.0\n        return zeros(Float64, (3, 3))\n    else\n        return s ./ sumslope\n    end\nend\n\nfunction mass_erosion(box::Box{BT}, denudation_mass, water_depth::Array{Float64}, i::CartesianIndex) where {BT<:Boundary{2}}\n    wd = zeros(Float64, 3, 3)\n    for (k, Δi) in enumerate(CartesianIndices((-1:1, -1:1)))\n        wd[k] = offset_value(BT, water_depth, i, Δi)\n    end\n    cell_size = box.phys_scale ./ u\"m\"\n    return redistribution_kernel(wd, cell_size) .* denudation_mass[i]\nend\n\nfunction total_mass_redistribution(box::Box{BT}, denudation_mass, water_depth) where {BT<:Boundary{2}}\n    mass = zeros(typeof(0.0u\"m/kyr\"), box.grid_size...)\n    for i in CartesianIndices(mass)\n        redis = mass_erosion(box, denudation_mass, water_depth, i)\n        for subidx in CartesianIndices((-1:1, -1:1))\n            target = offset_index(BT, size(water_depth), i, subidx)\n            if target === nothing\n                continue\n            end\n            mass[target] += redis[2+subidx[1], 2+subidx[2]]\n        end\n    end\n    return mass\nend\n\nfunction denudation(::Box, p::PhysicalErosion, water_depth::Any, slope, facies, state)\n    erodability = p.erodability ./ u\"m/yr\"\n    denudation_mass = zeros(typeof(1.0u\"m/kyr\"), size(slope)...)\n    for idx in CartesianIndices(state.ca)\n        f = state.ca[idx]\n        if f == 0\n            continue\n        end\n        if water_depth[idx] >= 0\n            denudation_mass[idx] = physical_erosion.(slope[idx], facies[f].infiltration_coefficient, erodability)\n        end\n    end\n    return denudation_mass\nend\n\nfunction redistribution(box::Box{BT}, p::PhysicalErosion, denudation_mass, water_depth) where {BT<:Boundary}\n    return total_mass_redistribution(box, denudation_mass, water_depth)\nend\n\nend","category":"page"},{"location":"denudation/physical_erosion/","page":"Physical Erosion","title":"Physical Erosion","text":"","category":"page"},{"location":"carbocat/#About","page":"Summary","title":"About","text":"","category":"section"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"CarboCAT is primarily based on a very simple cellular automaton (CA). We may explore this CA as a first step in implementing the model in Julia.","category":"page"},{"location":"carbocat/#Overview","page":"Summary","title":"Overview","text":"","category":"section"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"The CarboCAT model [5] consists of several components, many of which are optional or contain optional levels of complexity.","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"Species habitation: an algorithm is in place to evolve the locality of a number of factory species.\nSediment production: each species will produce sediment according to some model.\nTransport: sediment may be transported from a production site to elsewhere due to gravity, waves or other types of mixing.\nErosion: sediment may erode depending on local circumstances or sediment type.\nCompactification: different types of sediment may respond to compression forces differently.","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"These processes describe the intrinsic properties of the model. Any parameters that change these processes will be referred to as model parameters. Next to that, there are some extrinsic parameters that change the specific output of a model: the initial depth of the sea bed (also known as bathymetry) and variation in sea level (including subsidence). These we call input parameters.","category":"page"},{"location":"carbocat/#Carbonate-production","page":"Summary","title":"Carbonate production","text":"","category":"section"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"By itself, a sediment production model is enough to model a cross-section of a carbonate platform [BS92: @Bosscher1992]. As a first step, we have reproduced some results of BS92. Using a reasonably simple approximation of a growth rate as","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"[partial_t h = - g_m tanh leftfracI_0I_k exp(-k * (h - s(t))right]{#eq:growth-rate-eqn}","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"where h is the depth of the sea floor, g_m is the maximum growth rate, I_0 the surface light intensity, I_k the saturating light intensity, k the extinction coefficient, and s the (extrinsic) sea-level. In one example given by BS92, we arrived at the following profile.","category":"page"},{"location":"carbocat/#Species-habitation","page":"Summary","title":"Species habitation","text":"","category":"section"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"These species can be anything, just remember that they are the progenitor of some (limestone) facies type. In the original 2013 model, this stage is implemented by a celullar automaton (or CA). The CA has the nice property of giving pseudo-random output with at least some degree of coherence. There is no physical basis to the CA model, but neither is there very much data to test a physical model against.","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"We have implemented the CA used in Burgess 2013. Using three species with identical 4-6-10-10 rules (survival between 4 to 10 neighbours, birth between 6-10 live neighbours).","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"(Image: )","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"An interesting question is under what rules is this CA stable (i.e. keeps evolving)?","category":"page"},{"location":"carbocat/#Combination","page":"Summary","title":"Combination","text":"","category":"section"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"The minimal Carbocat model would consist of only species habitation and production.","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":":::details","category":"page"},{"location":"carbocat/#Some-submodules","page":"Summary","title":"Some submodules","text":"","category":"section"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"<div class=\"noweb-label\">file:<i>src/Burgess2013.jl</i></div>","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"module Burgess2013\n\ninclude(\"Burgess2013/CA.jl\")\n\nend","category":"page"},{"location":"carbocat/#Crowding","page":"Summary","title":"Crowding","text":"","category":"section"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"In crowded areas carbonate production rates are reduced. For cells where","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"n_min le n le n_opt","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"and","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"n_opt le n le n_max","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"(n_min and n_max for living cells are 4 and 10)","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"we have a linear increase and linear decrease of production rate (i.e. a triangle function).","category":"page"},{"location":"carbocat/#Subsidence","page":"Summary","title":"Subsidence","text":"","category":"section"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"Subsidence refers to gradual lowering or lifting of the underlying floor bed. This could be either sea level rise due to climate change, but also tectonic activity. Sea level also changes according to a given recipe with say three sinusoidals (e.g. Milankovich cycles). When a cell gets \"subaerial exposure\", i.e. the water level drops below the cell elevation (stupid jargon), accumulation stops and the cell becomes dormant. On reflooding, the cell resumes activity. From the text it is not entirely clear, but I think deactivated cells don't take part in the CA, so they count as dead neighbours.","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"reference on accommodation, also links to a model called SedFlux.","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"T + E = S + W","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"Saying Tectonic subsidence plus Eustatic sea-level change equals Sedimentation plus change in Water depth.","category":"page"},{"location":"carbocat/#Steps","page":"Summary","title":"Steps","text":"","category":"section"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"Update waterdepth, given subsidence\nUpdate sea level elevation, given eustatics\nRun CA\nCompute thickness of carbonate production\nCompute sediment transport","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"We need to keep a state with the following components:","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"height map\nspecies\nglobal time, implying:\nsea level and subsidence","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"Every cycle we may export a layer of sediment to archive.","category":"page"},{"location":"carbocat/#References","page":"Summary","title":"References","text":"","category":"section"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"","category":"page"},{"location":"carbocat/","page":"Summary","title":"Summary","text":"","category":"page"},{"location":"visualization/#Visualization","page":"Visualizations","title":"Visualization","text":"","category":"section"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"The visualization of CarboKitten output is implemented in a Julia package extension. This is done so that CarboKitten.jl itself doesn't have to depend on Makie.jl (our main visualization tool), which has a large transient dependency stack. To make the Visualization extension of CarboKitten available, make sure to activate a Julia project where Makie is installed.","category":"page"},{"location":"visualization/#Makie-primer","page":"Visualizations","title":"Makie primer","text":"","category":"section"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"Makie.jl is a visualization package that creates exceptionally good looking (publication quality) plots in both 2D and 3D. There are three back-ends for Makie:","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"CairoMakie for publication quality vector graphics, writing to SVG, PDF or PNG.\nGLMakie has better run-time performance than CairoMakie, especially when dealing with larger datasets and/or 3D visualizations. However, GLMakie can only produce rasterized images, so PNG, JPEG or directly to screen for interactive use.\nWGLMakie for online publication using WebGL. If you want interactive plots, like 3D plots that you can rotate in the browser, this is the one to use. Fair warning: this is also the least stable back-end for Makie.","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"To work with Makie, you need to import one of the three back-end packages. In general, every plot available in Makie has two variants. One is a direct function for plotting:","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"using CairoMakie\n\nx = randn(10)\ny = randn(10)\n\nscatter(x, y)","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"The other requires a bit more prep, but gives you more control.","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"fig = Figure()\nax = Axis(fig[1,1])\nscatter!(ax, x, y)","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"Here, we create a figure explicitly, then create a new set of axes somewhere on the grid in the figure, and then plot on that set of axes. The plotting functions accepting an Axis argument actually modify an existing context, which is why these functions always end with an exclamation mark, in this case scatter!.","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"If you like to know more about Makie, their \"Getting started\" is a good place to start.","category":"page"},{"location":"visualization/#Colours","page":"Visualizations","title":"Colours","text":"","category":"section"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"We like to use colorblind safe pallete of colours as described on Paul Tol's website: '#4477AA', '#EE6677', '#228833', '#CCBB44', '#66CCEE', '#AA3377', '#BBBBBB'.","category":"page"},{"location":"visualization/#Project-Extension","page":"Visualizations","title":"Project Extension","text":"","category":"section"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"The Project Extension requires a front-end where the available methods are exposed.","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"<div class=\"noweb-label\">file:<i>src/Visualization.jl</i></div>","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"module Visualization\nexport sediment_profile!, sediment_profile, wheeler_diagram!, wheeler_diagram, production_curve!,\n       production_curve, glamour_view!, summary_plot\n\nfunction print_instructions(func_name, args)\n    println(\"Called `$(func_name)` with args `$(typeof.(args))`\")\n    println(\"This is an extension and only becomes available when you import {Cairo,GL,WGL}Makie before using this.\")\nend\n\nsediment_profile!(args...) = print_instructions(\"sediment_profile!\", args)\nsediment_profile(args...) = print_instructions(\"sediment_profile\", args)\nwheeler_diagram!(args...) = print_instructions(\"wheeler_diagram!\", args)\nwheeler_diagram(args...) = print_instructions(\"wheeler_diagram\", args)\nproduction_curve(args...) = print_instructions(\"production_curve\", args)\nproduction_curve!(args...) = print_instructions(\"production_curve!\", args)\nstratigraphic_column!(args...) = print_instructions(\"production_curve!\", args)\nage_depth_model!(args...) = print_instructions(\"age_depth_model!\", args)\nglamour_view!(args...) = print_instructions(\"glamour_view!\", args)\nsummary_plot(args...) = print_instructions(\"summary_plot\", args)\n\nend  # module","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"<div class=\"noweb-label\">file:<i>ext/VisualizationExt.jl</i></div>","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"module VisualizationExt\n\ninclude(\"WheelerDiagram.jl\")\ninclude(\"ProductionCurve.jl\")\ninclude(\"StratigraphicColumn.jl\")\ninclude(\"AgeDepthModel.jl\")\ninclude(\"SedimentProfile.jl\")\ninclude(\"GlamourView.jl\")\ninclude(\"SummaryPlot.jl\")\n\nend","category":"page"},{"location":"visualization/#Summary-collage","page":"Visualizations","title":"Summary collage","text":"","category":"section"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"(Image: Collage)","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"<div class=\"noweb-label\">file:<i>ext/SummaryPlot.jl</i></div>","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"module SummaryPlot\n\nusing CarboKitten.Visualization\nimport CarboKitten.Visualization: summary_plot\nusing CarboKitten.Export: read_header, read_slice\nusing CarboKitten.Utility: in_units_of\nusing HDF5\nusing Unitful\nusing Makie\n\nsummary_plot(filename::AbstractString; kwargs...) = h5open(fid->summary_plot(fid; kwargs...), filename, \"r\")\n\nfunction summary_plot(fid::HDF5.File; wheeler_smooth=(1, 1))\n\theader = read_header(fid)\n    y_slice = div(length(header.axes.y), 2) + 1\n    max_depth = minimum(header.bedrock_elevation)\n\tdata = read_slice(fid, :, y_slice)\n\n\tn_facies = size(data.production)[1]\n\tfig = Figure(size=(1200, 1000), backgroundcolor=:gray80)\n\n\tax1 = Axis(fig[1:2,1:2])\n\tsediment_profile!(ax1, header, data)\n\n\tax2 = Axis(fig[4,1])\n\tax3 = Axis(fig[4,2])\n\tsm, df = wheeler_diagram!(ax2, ax3, header, data; smooth_size=wheeler_smooth)\n\tColorbar(fig[3,1], sm; vertical=false, label=\"sediment accumulation [m/Myr]\")\n\tColorbar(fig[3,2], df; vertical=false, label=\"dominant facies\", ticks=1:n_facies)\n\n\tax4 = Axis(fig[4,3], title=\"sealevel curve\", xlabel=\"sealevel [m]\",\n        limits=(nothing, (header.axes.t[1] |> in_units_of(u\"Myr\"),\n\t\t\t\t\t\t  header.axes.t[end] |> in_units_of(u\"Myr\"))))\n\tlines!(ax4, header.sea_level |> in_units_of(u\"m\"), header.axes.t |> in_units_of(u\"Myr\"))\n\n\tax5 = Axis(fig[2,3])\n\tproduction_curve!(ax5, fid[\"input\"], max_depth=max_depth)\n\n\tlinkyaxes!(ax2, ax3, ax4)\n\n\tax = Axis3(fig[1, 3]; zlabel=\"depth [m]\", xlabel=\"x [km]\", ylabel=\"y [km]\")\n\tglamour_view!(ax, fid)\n\n\tfig\nend\n\nend","category":"page"},{"location":"visualization/#Wheeler-diagram","page":"Visualizations","title":"Wheeler diagram","text":"","category":"section"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"(Image: Wheeler diagram)","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"<div class=\"noweb-label\">file:<i>examples/visualization/wheeler_diagram.jl</i></div>","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"#| creates: docs/src/_fig/wheeler_diagram.png\n#| requires: data/output/alcap2.h5\n#| collect: figures\n\nmodule Script\n\nusing CairoMakie\nusing CarboKitten.Export: read_slice\nusing CarboKitten.Visualization: wheeler_diagram\n\nfunction main()\n  header, data = read_slice(\"data/output/alcap2.h5\", :, 25)\n  fig = wheeler_diagram(header, data)\n  save(\"docs/src/_fig/wheeler_diagram.png\", fig)\nend\n\nend\n\nScript.main()","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"<div class=\"noweb-label\">file:<i>ext/WheelerDiagram.jl</i></div>","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"module WheelerDiagram\n\nimport CarboKitten.Visualization: wheeler_diagram, wheeler_diagram!\nusing CarboKitten.Export: Header, Data, DataSlice, read_data, read_slice\nusing CarboKitten.Utility: in_units_of\nusing Makie\nusing Unitful\nusing CarboKitten.BoundaryTrait\nusing CarboKitten.Stencil: convolution\n\n\nconst na = [CartesianIndex()]\n\nelevation(h::Header, d::DataSlice) =\n    let bl = h.bedrock_elevation[d.slice..., na],\n        sr = h.axes.t[end] * h.subsidence_rate\n\n        bl .+ d.sediment_elevation .- sr\n    end\n\nwater_depth(header::Header, data::DataSlice) =\n    let h = elevation(header, data),\n        s = header.subsidence_rate .* (header.axes.t .- header.axes.t[end]),\n        l = header.sea_level\n\n        h .- (s.+l)[na, :]\n    end\n\nconst Rate = typeof(1.0u\"m/Myr\")\n\nfunction sediment_accumulation!(ax::Axis, header::Header, data::DataSlice;\n    smooth_size::NTuple{2,Int}=(3, 11),\n    colormap=Reverse(:curl),\n    range::NTuple{2,Rate}=(-100.0u\"m/Myr\", 100.0u\"m/Myr\"))\n    magnitude = sum(data.deposition .- data.disintegration; dims=1)[1, :, :] ./ (header.Δt * header.write_interval)\n    blur = convolution(Shelf, ones(Float64, smooth_size...) ./ *(smooth_size...))\n    wd = zeros(Float64, length(header.axes.x), length(header.axes.t))\n    blur(water_depth(header, data) / u\"m\", wd)\n    mag = zeros(Float64, length(header.axes.x), length(header.axes.t) - 1)\n    blur(magnitude / u\"m/Myr\", mag)\n\n    ax.ylabel = \"time [Myr]\"\n    ax.xlabel = \"position [km]\"\n\n    sa = heatmap!(ax, header.axes.x / u\"km\", header.axes.t / u\"Myr\", mag;\n        colormap=colormap, colorrange=range ./ u\"m/Myr\")\n    contour!(ax, header.axes.x / u\"km\", header.axes.t / u\"Myr\", wd;\n        levels=[0], color=:red, linewidth=2, linestyle=:dash)\n    return sa\nend\n\nfunction dominant_facies!(ax::Axis, header::Header, data::DataSlice;\n    smooth_size::NTuple{2,Int}=(3, 11),\n    colors=Makie.wong_colors())\n    n_facies = size(data.production)[1]\n    colormax(d) = getindex.(argmax(d; dims=1)[1, :, :], 1)\n\n    dominant_facies = colormax(data.deposition)\n    blur = convolution(Shelf, ones(Float64, smooth_size...) ./ *(smooth_size...))\n    wd = zeros(Float64, length(header.axes.x), length(header.axes.t))\n    blur(water_depth(header, data) / u\"m\", wd)\n\n    ax.ylabel = \"time [Myr]\"\n    ax.xlabel = \"position [km]\"\n\n    ft = heatmap!(ax, header.axes.x / u\"km\", header.axes.t / u\"Myr\", dominant_facies;\n        colormap=cgrad(colors[1:n_facies], n_facies, categorical=true),\n        colorrange=(0.5, n_facies + 0.5))\n    contourf!(ax, header.axes.x / u\"km\", header.axes.t / u\"Myr\", wd;\n        levels=[0.0, 10000.0], colormap=Reverse(:grays))\n    contour!(ax, header.axes.x / u\"km\", header.axes.t / u\"Myr\", wd;\n        levels=[0], color=:black, linewidth=2)\n    return ft\nend\n\nfunction wheeler_diagram!(ax1::Axis, ax2::Axis, header::Header, data::DataSlice;\n    smooth_size::NTuple{2,Int}=(3, 11),\n    range::NTuple{2,Rate}=(-100.0u\"m/Myr\", 100.0u\"m/Myr\"))\n\n    linkyaxes!(ax1, ax2)\n    sa = sediment_accumulation!(ax1, header, data; smooth_size=smooth_size, range=range)\n    ft = dominant_facies!(ax2, header, data; smooth_size=smooth_size)\n    ax2.ylabel = \"\"\n\n    return sa, ft\nend\n\nfunction wheeler_diagram(header::Header, data::DataSlice;\n    smooth_size::NTuple{2,Int}=(3, 11),\n    range::NTuple{2,Rate}=(-100.0u\"m/Myr\", 100.0u\"m/Myr\"))\n\n    fig = Figure(size=(1000, 600))\n    ax1 = Axis(fig[2, 1])\n    ax2 = Axis(fig[2, 2])\n\n    sa, ft = wheeler_diagram!(ax1, ax2, header, data; smooth_size=smooth_size, range=range)\n\n    Colorbar(fig[1, 1], sa; vertical=false, label=\"sediment accumulation [m/Myr]\")\n    Colorbar(fig[1, 2], ft; vertical=false, ticks=1:3, label=\"dominant facies\")\n    fig\nend\n\nend","category":"page"},{"location":"visualization/#Production-curve","page":"Visualizations","title":"Production curve","text":"","category":"section"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"(Image: Production curve)","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"<div class=\"noweb-label\">file:<i>examples/visualization/production_curve.jl</i></div>","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"#| creates: docs/src/_fig/production_curve.svg\n#| requires: data/output/alcap2.h5\n#| collect: figures\n\nusing CairoMakie\nusing CarboKitten.Visualization: production_curve\n\nsave(\"docs/src/_fig/production_curve.svg\", production_curve(\"data/output/alcap2.h5\"))","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"<div class=\"noweb-label\">file:<i>ext/ProductionCurve.jl</i></div>","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"module ProductionCurve\n\nusing Makie\nusing Unitful\nusing HDF5\n\nimport CarboKitten.Components.Common: AbstractInput\nimport CarboKitten.Visualization: production_curve!, production_curve\nusing CarboKitten.Components.Production: Facies, production_rate\n\nfunction production_curve!(ax, input::I) where I <: AbstractInput\n    ax.title = \"production at $(sprint(show, input.insolation; context=:fancy_exponent=>true))\"\n    ax.xlabel = \"production [m/Myr]\"\n    ax.ylabel = \"depth [m]\"\n    ax.yreversed = true\n\n    for f in input.facies\n        depth = (0.1:0.1:50.0)u\"m\"\n        prod = [production_rate(input.insolation, f, d) for d in depth]\n        lines!(ax, prod / u\"m/Myr\", depth / u\"m\")\n    end\nend\n\nfunction production_curve(input::I) where I <: AbstractInput\n    fig = Figure()\n    ax = Axis(fig[1, 1])\n    production_curve!(ax, input)\n    fig\nend\n\nfunction production_curve(filename::AbstractString)\n    h5open(filename, \"r\") do fid\n        fig = Figure()\n        ax = Axis(fig[1, 1])\n        production_curve!(ax, fid[\"input\"])\n        fig\n    end\nend\n\nfunction production_curve!(ax, g::HDF5.Group; max_depth=-50.0u\"m\")\n    a = HDF5.attributes(g)\n    insolation = a[\"insolation\"][] * u\"W/m^2\"\n\n    ax.title = \"production at $(sprint(show, insolation; context=:fancy_exponent=>true))\"\n    ax.xlabel = \"production [m/Myr]\"\n    ax.ylabel = \"depth [m]\"\n\n    for i in 1:a[\"n_facies\"][]\n        fa = HDF5.attributes(g[\"facies$(i)\"])\n        f = Facies(\n            fa[\"maximum_growth_rate\"][] * u\"m/Myr\",\n            fa[\"extinction_coefficient\"][] * u\"m^-1\",\n            fa[\"saturation_intensity\"][] * u\"W/m^2\")\n        depth = (0.1u\"m\":0.1u\"m\":-max_depth)\n        prod = [production_rate(insolation, f, d) for d in depth]\n        lines!(ax, prod / u\"m/Myr\", - depth / u\"m\")\n    end\nend\n\nend","category":"page"},{"location":"visualization/#Sediment-profile","page":"Visualizations","title":"Sediment profile","text":"","category":"section"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"(Image: Sediment profile)","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"<div class=\"noweb-label\">file:<i>examples/visualization/sediment_profile.jl</i></div>","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"#| creates: docs/src/_fig/sediment_profile.png\n#| requires: data/output/alcap2.h5\n#| collect: figures\n\nusing CairoMakie\nusing CarboKitten.Export: read_slice\nusing CarboKitten.Visualization: sediment_profile\n\nsave(\"docs/src/_fig/sediment_profile.png\",\n    sediment_profile(read_slice(\"data/output/alcap2.h5\", :, 25)...))","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"<div class=\"noweb-label\">file:<i>ext/SedimentProfile.jl</i></div>","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"module SedimentProfile\n\nimport CarboKitten.Visualization: sediment_profile, sediment_profile!\n\nusing CarboKitten.Visualization\nusing CarboKitten.Utility: in_units_of\nusing CarboKitten.Export: Header, Data, DataSlice, read_data, read_slice\nusing CarboKitten.Skeleton: skeleton\n\nusing Makie\nusing GeometryBasics\nusing Unitful\n\nusing Statistics: mean\n\nconst Rate = typeof(1.0u\"m/Myr\")\nconst Amount = typeof(1.0u\"m\")\nconst Length = typeof(1.0u\"m\")\nconst Time = typeof(1.0u\"Myr\")\n\nconst na = [CartesianIndex()]\n\nelevation(h::Header, d::Data) =\n    let bl = h.bedrock_elevation[:, :, na],\n        sr = h.axes.t[end] * h.subsidence_rate\n\n        bl .+ d.sediment_elevation .- sr\n    end\n\nelevation(h::Header, d::DataSlice) =\n    let bl = h.bedrock_elevation[d.slice..., na],\n        sr = h.axes.t[end] * h.subsidence_rate\n\n        bl .+ d.sediment_elevation .- sr\n    end\n\ncolormax(d::Data) = getindex.(argmax(d.deposition; dims=1)[1, :, :, :], 1)\ncolormax(d::DataSlice) = getindex.(argmax(d.deposition; dims=1)[1, :, :], 1)\n\n\"\"\"\n    explode_quad_vertices(v)\n\nTakes a three dimensional array representing a grid of vertices. This function duplicates these\nvertices in the vertical direction, so that an amount of sediment can be given a single color.\n\nReturns a tuple of vertices and faces (triangles), suitable for plotting with Makie's `mesh`\nfunction.\n\"\"\"\nfunction explode_quad_vertices(v::Array{Float64,3})\n    w, h, d = size(v)\n    points = zeros(Float64, w, h - 1, 2, d)\n    n_vertices = 2 * w * (h - 1)\n    n_quads = (w - 1) * (h - 1)\n    @views points[:, :, 1, :] = v[1:end, 1:end-1, :]\n    @views points[:, :, 2, :] = v[1:end, 2:end, :]\n    idx = reshape(1:n_vertices, w, (h - 1), 2)\n    vtx1 = reshape(idx[1:end-1, :, 1], n_quads)\n    vtx2 = reshape(idx[2:end, :, 1], n_quads)\n    vtx3 = reshape(idx[2:end, :, 2], n_quads)\n    vtx4 = reshape(idx[1:end-1, :, 2], n_quads)\n    return reshape(points, n_vertices, d),\n    vcat(hcat(vtx1, vtx2, vtx3), hcat(vtx1, vtx3, vtx4))\nend\n\nfunction sediment_profile!(ax::Axis, header::Header, data::DataSlice)\n    x = header.axes.x |> in_units_of(u\"km\")\n    t = header.axes.t |> in_units_of(u\"Myr\")\n    n_facies = size(data.production)[1]\n    ξ = elevation(header, data)  # |> in_units_of(u\"m\")\n\n    verts = zeros(Float64, length(x), length(t), 2)\n    @views verts[:, :, 1] .= x\n    @views verts[:, :, 2] .= ξ |> in_units_of(u\"m\")\n    v, f = explode_quad_vertices(verts)\n\n    water_depth = ξ .- (header.subsidence_rate.*(header.axes.t.-header.axes.t[end]).+header.sea_level)[na, :]\n    hiatus = skeleton(water_depth .> 0.0u\"m\")\n\n    total_subsidence = header.subsidence_rate * header.axes.t[end]\n    bedrock = (header.bedrock_elevation[data.slice...] .- total_subsidence) |> in_units_of(u\"m\")\n    lower_limit = minimum(bedrock) - 20\n    band!(ax, x, lower_limit, bedrock; color=:gray)\n    lines!(ax, x, bedrock; color=:black)\n    ylims!(ax, lower_limit + 10, nothing)\n    xlims!(ax, x[1], x[end])\n    ax.xlabel = \"position [km]\"\n    ax.ylabel = \"depth [m]\"\n    ax.title = \"sediment profile\"\n\n    c = reshape(colormax(data)[:, :], length(x) * (length(t) - 1))\n    mesh!(ax, v, f, color=vcat(c, c), alpha=1.0, colormap=cgrad(Makie.wong_colors()[1:n_facies], n_facies, categorical=true))\n\n    verts = [(x[pt[1]], ξ[pt...] |> in_units_of(u\"m\")) for pt in hiatus[1]]\n    linesegments!(ax, vec(permutedims(verts[hiatus[2]])); color=:white, linestyle=:dash, linewidth=2)\nend\n\nfunction sediment_profile(header::Header, data_slice::DataSlice)\n    fig = Figure(size=(1000, 600))\n    ax = Axis(fig[1, 1])\n    sediment_profile!(ax, header, data_slice)\n    return fig\nend\n\nend  # module","category":"page"},{"location":"visualization/#Stratigraphic-Column","page":"Visualizations","title":"Stratigraphic Column","text":"","category":"section"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"<div class=\"noweb-label\">file:<i>ext/StratigraphicColumn.jl</i></div>","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"module StratigraphicColumn\n\nusing Makie\nusing Unitful\n\nimport CarboKitten.Visualization: stratigraphic_column!\nusing CarboKitten.Export: Header, DataColumn, stratigraphic_column, age_depth_model\n\n\nfunction scdata(header::Header, data::DataColumn)\n    n_facies = size(data.production)[1]\n    n_times = length(header.axes.t) - 1\n    sc = zeros(Float64, n_facies, n_times)\n    for f = 1:n_facies\n        sc[f, :] = stratigraphic_column(header, data, f) / u\"m\"\n    end\n\n    colormax(d) = getindex.(argmax(d; dims=1)[1, :], 1)\n    adm = age_depth_model(data.sediment_elevation)\n\n    return (ys_low=adm[1:end-1] / u\"m\", ys_high=adm[2:end] / u\"m\", facies=colormax(sc)[1:end])\nend\n\n\nfunction stratigraphic_column!(ax::Axis, header::Header, data::DataColumn; color=Makie.wong_colors())\n    (ys_low, ys_high, facies) = scdata(header, data)\n    hspan!(ax, ys_low, ys_high; color=color[facies])\nend\n\nfunction stratigraphic_column!(ax::Axis, header::Header, data::Observable{DataColumn}; color=Makie.wong_colors())\n    _scdata = lift(d -> scdata(header, d), data)\n    _ys_low = lift(d -> d.ys_low, _scdata)\n    _ys_high = lift(d -> d.ys_high, _scdata)\n    _color = lift(d -> color[d.facies], _scdata)\n    hspan!(ax, _ys_low, _ys_high; color=_color)\nend\n\nend","category":"page"},{"location":"visualization/#Skeleton","page":"Visualizations","title":"Skeleton","text":"","category":"section"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"<div class=\"noweb-label\">file:<i>src/Skeleton.jl</i></div>","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"module Skeleton\n\nusing .Iterators: filter, map as imap, product, flatten, drop\nusing ..Utility: enumerate_seq, find_ranges\n\nconst Vertex = Tuple{Int, UnitRange{Int}}\n\npairs(it) = zip(it, drop(it, 1))\nedge(a::Vertex, b::Vertex) = isempty(a[2] ∩ b[2]) ? nothing : (a[1], b[1])\nedges_between(a, b) = filter(!isnothing, imap(splat(edge), product(a, b)))\nmiddle(a::UnitRange{Int}) = (a.start + a.stop) ÷ 2\n\n\"\"\"\n    skeleton(bitmap::AbstractMatrix{Bool})\n\nComputes the skeleton of a bitmap, i.e. reduces features with some thickness to\na set of line segments. This function is designed with stratigraphic application\nin mind: we scan each row in the bitmap for connected regions, then link neighbouring\nregions when they overlap. The result is a graph that represents hiatus in the sediment\naccumulation.\n\nReturns a tuple of `vertices` and `edges`, where `vertices` is a vector of 2-tuples and\n`edges` is a nx2 matrix of indices into the `vertices`.\n\"\"\"\nfunction skeleton(bitmap::AbstractMatrix{Bool}; minwidth=10)\n    vertex_rows = (filter(r->length(r)>=minwidth, find_ranges(row)) for row in eachrow(bitmap))\n    edges = flatten(map(splat(edges_between), pairs(enumerate_seq(vertex_rows))))\n    vertices = flatten(((i, middle(v)) for v in vs) for (i, vs) in enumerate(vertex_rows))\n    return collect(vertices), reshape(reinterpret(Int, collect(edges)), (2,:))'\nend\n\nend","category":"page"},{"location":"visualization/#Glamour-View-(3D)","page":"Visualizations","title":"Glamour View (3D)","text":"","category":"section"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"Not very useful but highly glamourous.","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"(Image: Glamour view)","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"<div class=\"noweb-label\">file:<i>examples/visualization/glamour_view.jl</i></div>","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"#| creates: docs/src/_fig/glamour_view.png\n#| requires: data/output/cap1.h5\n#| collect: figures\n\nmodule Script\n\nusing GLMakie\nusing CarboKitten.Visualization: glamour_view!\nusing HDF5\n\nfunction main()\n    fig = Figure()\n    ax = Axis3(fig[1,1])\n    h5open(\"data/output/cap1.h5\", \"r\") do fid\n        glamour_view!(ax, fid)\n    end\n    save(\"docs/src/_fig/glamour_view.png\", fig)\nend\n\nend\n\nScript.main()","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"<div class=\"noweb-label\">file:<i>ext/GlamourView.jl</i></div>","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"module GlamourView\n\nimport CarboKitten.Visualization: glamour_view!\nusing CarboKitten.Utility: in_units_of\nusing CarboKitten.Export: read_header\nusing Makie\nusing HDF5\nusing Unitful\n\nfunction glamour_view!(ax::Makie.Axis3, fid::HDF5.File; colormap=Reverse(:speed))\n\theader = read_header(fid)\n\tx = header.axes.x |> in_units_of(u\"km\")\n\ty = header.axes.y |> in_units_of(u\"km\")\n\txy_aspect = x[end] / y[end]\n\n\tax.aspect = (xy_aspect, 1, 1)\n\tax.azimuth = -π/3\n\n\tn_steps = length(header.axes.t)\n\tgrid_size = (length(x), length(y))\n\tsteps_between = 2\n\tselected_steps = [1, ((1:steps_between) .* n_steps .÷ (steps_between + 1))..., n_steps]\n\tbedrock = header.bedrock_elevation .- header.axes.t[end] * header.subsidence_rate\n\n\tresult = Array{Float64, 3}(undef, grid_size..., length(selected_steps))\n\tfor (i, j) in enumerate(selected_steps)\n\t\tresult[:, :, i] = fid[\"sediment_height\"][:,:,j] .+ bedrock / u\"m\"\n\tend\n\n\tsurface!(ax, x, y, result[:,:,1];\n\t\tcolor=ones(grid_size),\n\t\tcolormap=:grays)\n\n\tfor s in eachslice(result[:,:,2:end-1], dims=3)\n\t\tsurface!(ax, x, y, s;\n\t\t\tcolormap=(colormap, 0.7))\t\t\n\tend\n\n\tsurface!(ax, x, y, result[:,:,end];\n\t\tcolormap=colormap)\n\tlines!(ax, x, zeros(grid_size[1]), result[:, 1, end]; color=(:white, 0.5), linewidth=1)\n\tlines!(ax, fill(x[end], grid_size[2]), y, result[end, :, end]; color=(:white, 0.5), linewidth=1)\nend\n\nend","category":"page"},{"location":"visualization/#Age-depth-Model","page":"Visualizations","title":"Age-depth Model","text":"","category":"section"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"<div class=\"noweb-label\">file:<i>ext/AgeDepthModel.jl</i></div>","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"module AgeDepthModel\n\nusing Makie\nusing Unitful\n\nusing CarboKitten.Visualization\nusing CarboKitten.Export\n\nend","category":"page"},{"location":"visualization/","page":"Visualizations","title":"Visualizations","text":"","category":"page"},{"location":"denudation/denudation/#Denudation","page":"Denudation","title":"Denudation","text":"","category":"section"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"Denudation could be achieved by three ways: modelling physical erosion, modelling chemical dissolution and estimating total denudation rates based on chlorine (Cl) isotope data.","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"Physical Erosion\nChemical Dissolution\nEmpirical Denudation","category":"page"},{"location":"denudation/denudation/#How-to-use?","page":"Denudation","title":"How to use?","text":"","category":"section"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"In CarboKitten, you could choose which type of the three you would like to attempt. To do this you could simply change the erosion_type in the input.","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"Example: in examples, you find caps_miller_diss.jl, caps_miller_emp.jl, caps_miller_phys.jl, for chemical dissolution, empirical denudation or physical denudation, respectively. This file uses the [6] cure as sea level curve input. You could try different erosion types by changing the erosion_type:","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"NoDenudation means no erosion, and is used for debugging only.\nDissolution means chemical dissolution. The default input parameters are: Temperature = 273K, precipitation = 1000mm/yr, atmospheric CO2 partial pressure = 10^(-1.5)* ATM, and reaction rate = 0.002 m/yr.\nPhysicalErosion means physical erosion and sediments redistribution. The default parameters is erodability = 0.001 m/yr.\nEmpericalDenudation means total denudation calculated based on emperical relationship by Cl isotope observations. The default input parameter is: precipitation = 1000mm/yr.","category":"page"},{"location":"denudation/denudation/#Tests-for-three-modes-of-denudation","page":"Denudation","title":"Tests for three modes of denudation","text":"","category":"section"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"In this module, 7 tests are implemented.","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"Tests 1:","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"@test sum(denudation_mass_LOW_T) < sum(denudation_mass_HIGH_T)","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"This means that higher temperature would dissolve faster than the colder scenario. It tests the Dissolution mode.","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"Test2:","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"@test sum(denudation_mass_LOW_P) < sum(denudation_mass_HIGH_P)","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"This means more humid scenario has higher denudation rates than the arid scenario. This tests emperical denudation mode.","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"Test3:","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"@test sum(denudation_mass_phys) > sum(denudation_mass_phys_flat)","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"This means more topography has higher denudation rates than the flatter topography. This tests physical erosion.","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"Test4:","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"@test sum(denudation_mass_phys) ≈ sum(redistribution_mass)","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"This means in physical erosion mode, the total amount of eroded material = the total amount of redistributed material. In this case, boundary condition of 'Periodic has been used.","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"Test 5 to 7 are regression tests: the outputs from the module is similar to the values calculated by calculator.","category":"page"},{"location":"denudation/denudation/#API","page":"Denudation","title":"API","text":"","category":"section"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"The different denudation models all follow the same API.","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"<div class=\"noweb-label\">file:<i>src/Denudation/Abstract.jl</i></div>","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"module Abstract\n\nusing ...BoundaryTrait: Boundary\nusing ...Boxes: Box\n\nusing Unitful\n\nabstract type DenudationType end\n\n\"\"\"\n    denudation(box, param, state)\n\nFIXME Computes the denudation for a single time-step, given denudation parameters `param` and a simulation state `state`. `param` should have a `DenudationType` type and `state` should contain the `height` property and `sealevel`.\n\"\"\"\nfunction denudation(input)\n    function (state, water_depth, slope)\n        return denudation(input.box, input.denudation, water_depth, slope, input.facies,state)\n    end\nend\n\n\"\"\"\n    denudation(box::Box, param::DenudationType, water_depth, slope, facies)\n\nComputes the amount of denudation. This function is called on a pixel by pixel basis, so all arguments can be assumed to be scalar. The `param` argument should be of a subtype of `DenudationType` containing all the input parameters for this specific denudation model.\n\"\"\"\nfunction denudation(box::Box, param::DenudationType, water_depth, slope, facies, state)\n    error(\"Abstract `denudation` function called.\")\nend\n\n\"\"\"\n    redistribution()\n\nFIXME\n\"\"\"\nfunction redistribution(input)\n    function (state, water_depth, denudation_mass)\n        return redistribution(input.box, input.denudation, denudation_mass, water_depth)\n    end\nend\n\nfunction redistribution(box::Box, param::DenudationType, denudation_mass, water_depth)\n    error(\"Abstract `redistribution` function called.\")\nend\n\nend  # module","category":"page"},{"location":"denudation/denudation/#No-Denudation","page":"Denudation","title":"No Denudation","text":"","category":"section"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"<div class=\"noweb-label\">file:<i>src/Denudation/NoDenudationMod.jl</i></div>","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"\"\"\"\n    module NoDenudation\n\nDoesn't do any denudation: used for testing purposes.\n\"\"\"\nmodule NoDenudationMod\n\nimport ..Abstract: DenudationType, denudation, redistribution\nusing ...Boxes: Box\nusing Unitful\n\nstruct NoDenudation <: DenudationType end\n\nfunction denudation(box::Box, p::NoDenudation, water_depth::Any, slope, facies, state)\n    return nothing\nend\n\nfunction redistribution(box::Box, p::NoDenudation, denudation_mass, water_depth)\n    return nothing\nend\n\nend","category":"page"},{"location":"denudation/denudation/","page":"Denudation","title":"Denudation","text":"","category":"page"},{"location":"bosscher-1992/#Carbonate-Production","page":"Bosscher and Schlager 1992","title":"Carbonate Production","text":"","category":"section"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"The paper by Bosscher and Schlager (1992) [1] is an early computer model for simulating reef growth. This paper contains some of the essential ingredients that we find back in CarboKitten. We reproduce their results within the framework of CarboKitten's larger design.","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"The BS92 model assumes a direct relation between water depth and sediment accumulation rate. That way we can model reef growth by integrating an Ordinary Differential Equation (ODE). The Production component provides this model for the rest of CarboKitten.","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"(Image: summary plot)","category":"page"},{"location":"bosscher-1992/#Parameters","page":"Bosscher and Schlager 1992","title":"Parameters","text":"","category":"section"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"Maximum growth rate G_m. The maximum rate of reef growth is in the range of 10-15 rm mm yr^-1 (Macintyre etal., 1977; Adey, 1978; Davies, 1983).\nExtinction coefficient k. This is a measure of the extinction of photosynthetically active radiation (PAR), i.e. light with a wavelength of 400-700 nm.  The value of k for oceanic waters ranges from 004 to 016 rm m^-1 (Jerlov, 1976); reported values for reef waters also lie within this range (Brakel, 1979; Van den Hoek et al., 1975; Weinberg, 1976; Chalker, 1981; Porter, 1985).\nSurface light intensity I_0. The light intensity at the water surface at midday in the tropics lies in the range of 2000-2250 rm mu E m^-2s^-1.\nSaturating light intensity I_k. Light saturating intensities are in the range 50-450 rm mu E m^-2s^-1, depending on species and water depth (Chalker, 1981; Wyman et al., 1987). Photoadaptation of reef-building corals has not been taken into account. More generally, light does not become a limiting factor for coral growth until it reaches roughly 10% of its surface value (B. E. Chalker, in Done, 1983).","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"from BS92","category":"page"},{"location":"bosscher-1992/#Growth-Rate","page":"Bosscher and Schlager 1992","title":"Growth Rate","text":"","category":"section"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"The growth rate is given as","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"g(w) = g_m tanhleft(I_0 e^-kw over I_kright)","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<div class=\"noweb-label\">⪡carbonate-production⪢≣</div>","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"g(gₘ, I₀, Iₖ, k, w) = gₘ * tanh(I₀/Iₖ * exp(-w * k))","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<div class=\"noweb-label\">⪡b92-model⪢≣</div>","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<<carbonate-production>>\n\nstruct Parameters\n     I₀::Float64\n     Iₖ::Float64\n     k::Float64\n     gₘ::Float64\nend\n\ng(p::Parameters, w) = g(p.gₘ, p.I₀, p.Iₖ, p.k, w)","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"where w is the water depth in meters, g_m is the maximum growth rate in rm m rm My^-1, I_0 is surface light intensity, I_k is saturation light intensity, and k is the extinction coefficient. We have exponential decay of light intensity as we get to deeper water, and the carbonate factories respond to light intensity through a tanh (hyperbolic tangent function). This is by no means an exact relation, rather the tanh function interpolates smoothly between one and zero. We specify a maximum growth rate and a typical intensity at which the species is no longer productive.","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"The shape of tanh circ exp look like this:","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"(Image: Tangens hyperbolicus)","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"Notice that the numbers inside the exponential need to be unit-free, so does the output. The value of tanh circ exp at a depth of 0 is 07615dots. This does not make much sense, as I believe we should start at a value of 1 at the surface. By setting I_0  I_k to some value 1 this can be alleviated, but it changes the interpretation of the constants a little. The idea is that above a certain insolation, light is not the limiting factor to the rate of photosynthesis.","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"To reproduce Figure 2 in B13, I had to change the values for g_m to 500, 250, and 125 respectively, the other values from Table 2 remained the same. I guess this was done for illustration purposes.","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"(Image: Production curves)","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<details><summary>Plotting code</summary>","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<div class=\"noweb-label\">file:<i>examples/plot-tanh.gnuplot</i></div>","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"set term svg size 700, 300 font \"sans serif, 14\" linewidth 1.5\nset xrange [-5:10]\nset yrange [-0.1:1.1]\nset grid\nset key outside\nset xlabel \"x\"\nset ylabel \"y\"\nplot tanh(exp(-x)) lc rgb 'black', tanh(exp(4)*exp(-x)), tanh(exp(-0.5*x))","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<div class=\"noweb-label\">file:<i>examples/burgess2013-fig2.gnuplot</i></div>","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"set term svg size 500, 600 font \"sans serif,14\" linewidth 1.5\nset trange [0:100]\nset yrange [100:0]\nset xrange [-20:520]\nset parametric\nset key right bottom\nset grid\nset ylabel \"Water depth (m)\"\nset xlabel \"Production rates\"\nplot 500*tanh(6.7 * exp(-0.8 * t)), t title 'Carbonate factory 1', \\\n     250*tanh(6.7 * exp(-0.1 * t)), t title 'Carbonate factory 2', \\\n     125*tanh(6.7 * exp(-0.005 * t)), t title 'Carbonate factory 3'","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"</details>","category":"page"},{"location":"bosscher-1992/#Depth-Evolution","page":"Bosscher and Schlager 1992","title":"Depth Evolution","text":"","category":"section"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"The use of water depth in both BS92 and B13 can be a bit confusing. Plots are shown up-side-down and little is done to disambiguate depth with sea level rising or lowering, or sediment accreting. Growth in deposition should give shallower sea bed. BS92 write w = (h_0 + h(t)) - (s_0 + s(t)). Actually s_0 is best set to 0, or simply included into s(t) and h_0 can be replaced with setting h(t=0) = h_0. Then, as we have the growth rate as a function of water depth g(w), we can say","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"partial_t h = -g_m rm tanhleftfracI_0I_k exp(-k (h - s(t)))right","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<div class=\"noweb-label\">⪡b92-model⪢≣</div>","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"function model(p::Parameters, s, t_end::Float64, h₀::Float64)\n     ∂h(h::Float64, t::Float64) = let w = h - s(t)\n          w >= 0.0 ? -g(p, h - s(t)) : 0.0\n     end\n\n     dt = 1000.0\n     times = 0.0:dt:t_end\n     result = zeros(Float64, length(times))\n     result[1] = h₀\n     for (i, t) in enumerate(times[1:end-1])\n          h = result[i]\n          for j = 0:99\n               h += ∂h(h, t + j * dt/100) * (dt/100)\n          end\n          result[i+1] = h\n     end\n     return result\nend","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"It seems Eq. 5 in BS92 (the most important equation in the paper mind you!) is missing both a minus sign and a set of parentheses. Also, we should remark that at negative depth (subareal exposure) we should halt all growth.","category":"page"},{"location":"bosscher-1992/#Crosssection","page":"Bosscher and Schlager 1992","title":"Crosssection","text":"","category":"section"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"The most impressive result in BS92 is the last figure. They show an input curve for s(t) but give no functional description. The curve starts with a linear drop from 0 to 120m depth over a time of 20000 years, then slowly rises with s(t) = a +  bt + A sin(2pi t  P), with a period P = sim 15-20 rm kyr, amplitude A = sim 40 rm m. It might be easiest to take a screenshot of the PDF and convert the graph into a table.","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"Using DifferentialEquations.jl we can integrate Equation @eq:growth-eqn. Interestingly, the only integrator that gave me noise free results is Euler. This may be due to the sudden shut-down of production at w = 0.","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<div class=\"noweb-label\">file:<i>examples/model/bs92/using_ode.jl</i></div>","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"module BS92\n\nusing CarboKitten.DataSets: bosscher_schlager_1992\nusing Interpolations\nusing Unitful\n\n<<b92-model>>\n\nfunction sealevel_curve()\n     data = bosscher_schlager_1992()\n     linear_interpolation(data.time / u\"yr\", data.sealevel / u\"m\")\nend\n\nstruct Scenario\n     param::Parameters\n     sealevel\n     t_end::Float64\nend\n\nmodel(s::Scenario, h₀::Float64) = model(s.param, s.sealevel, s.t_end, h₀)\n\nSCENARIO_A = Scenario(\n     Parameters(2000.0, 250.0, 0.05, 0.005),\n     sealevel_curve(),\n     80_000.0)\n\nend","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"Finally, we can try to reproduce figure 8 in BS92.","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"(Image: stratigraphy following fig. 8 in BS92)","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"Note the simplicity of this result: there is no dependency on space, only on the initial depth h_0.","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<details><summary>Plotting code</summary>","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<div class=\"noweb-label\">file:<i>examples/model/bs92/fig8.jl</i></div>","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"#| creates: docs/src/_fig/bs92-fig8.svg\n#| requires: examples/model/bs92/using_ode.jl\n#| collect: figures\n\nmodule Script\n     include(\"using_ode.jl\")\n     using CairoMakie\n\n     function main()\n          h0 = LinRange(0, 200, 101)\n          result = hcat([BS92.model(BS92.SCENARIO_A, h) for h in h0]...)\n          t = LinRange(0, 80_000, 81)\n\n          fig = Figure(resolution=(600,900))\n          ax = Axis(fig[1,1], xlabel=\"initial depth (m)\", ylabel=\"depth (m)\", yreversed=true)\n          for l in eachrow(result)\n               lines!(ax, h0, vec(l); color=:steelblue4, linewidth=0.5)\n          end\n          ax = Axis(fig[2,1], xlabel=\"time (years)\", ylabel=\"depth (m)\", yreversed=true)\n          lines!(ax, t, BS92.SCENARIO_A.sealevel(t); color=:steelblue4)\n\n          save(\"docs/src/_fig/bs92-fig8.svg\", fig)\n     end\nend\n\nScript.main()","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"</details>","category":"page"},{"location":"bosscher-1992/#BS92-in-CarboKitten-stack","page":"Bosscher and Schlager 1992","title":"BS92 in CarboKitten stack","text":"","category":"section"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<div class=\"component-dag\" style=\"overflow: scroll\"><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.50.0 (20211204.2007)\n -->\n<!-- Pages: 1 -->\n<svg width=\"623pt\" height=\"465pt\"\n viewBox=\"0.00 0.00 623.00 465.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 461)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-461 619,-461 619,4 -4,4\"/>\n<!-- Boxes -->\n<g id=\"node1\" class=\"node\">\n<title>Boxes</title>\n<path fill=\"none\" stroke=\"black\" d=\"M276,-457C276,-457 138,-457 138,-457 132,-457 126,-451 126,-445 126,-445 126,-390 126,-390 126,-384 132,-378 138,-378 138,-378 276,-378 276,-378 282,-378 288,-384 288,-390 288,-390 288,-445 288,-445 288,-451 282,-457 276,-457\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"133,-426.5 281,-426.5 \"/>\n<text text-anchor=\"start\" x=\"183.5\" y=\"-435.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Boxes</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"133,-403.5 133,-426.5 180,-426.5 180,-403.5 133,-403.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"133,-403.5 180,-403.5 180,-426.5 133,-426.5 \"/>\n<text text-anchor=\"start\" x=\"137\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"180,-403.5 180,-426.5 234,-426.5 234,-403.5 180,-403.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"180,-403.5 180,-426.5 234,-426.5 234,-403.5 180,-403.5\"/>\n<text text-anchor=\"start\" x=\"184\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"234,-403.5 234,-426.5 281,-426.5 281,-403.5 234,-403.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"281,-426.5 234,-426.5 234,-403.5 281,-403.5 \"/>\n<text text-anchor=\"start\" x=\"238\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"180,-384.5 180,-403.5 \"/>\n<text text-anchor=\"start\" x=\"137\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\">box</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"234,-384.5 234,-403.5 \"/>\n<text text-anchor=\"start\" x=\"184\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"237\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- WaterDepth -->\n<g id=\"node3\" class=\"node\">\n<title>WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M423,-342C423,-342 171,-342 171,-342 165,-342 159,-336 159,-330 159,-330 159,-237 159,-237 159,-231 165,-225 171,-225 171,-225 423,-225 423,-225 429,-225 435,-231 435,-237 435,-237 435,-330 435,-330 435,-336 429,-342 423,-342\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"166,-311.5 428,-311.5 \"/>\n<text text-anchor=\"start\" x=\"249.5\" y=\"-320.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">WaterDepth</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"166,-288.5 166,-311.5 277,-311.5 277,-288.5 166,-288.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"166,-288.5 277,-288.5 277,-311.5 166,-311.5 \"/>\n<text text-anchor=\"start\" x=\"170\" y=\"-296.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"277,-288.5 277,-311.5 331,-311.5 331,-288.5 277,-288.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"277,-288.5 277,-311.5 331,-311.5 331,-288.5 277,-288.5\"/>\n<text text-anchor=\"start\" x=\"281\" y=\"-296.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"331,-288.5 331,-311.5 428,-311.5 428,-288.5 331,-288.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"428,-311.5 331,-311.5 331,-288.5 428,-288.5 \"/>\n<text text-anchor=\"start\" x=\"335\" y=\"-296.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"277,-269.5 277,-288.5 \"/>\n<text text-anchor=\"start\" x=\"170\" y=\"-276.5\" font-family=\"monospace\" font-size=\"10.00\">sea_level</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"331,-269.5 331,-288.5 \"/>\n<text text-anchor=\"start\" x=\"281\" y=\"-276.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"334\" y=\"-276.5\" font-family=\"monospace\" font-size=\"10.00\">sediment_height</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"277,-250.5 277,-269.5 \"/>\n<text text-anchor=\"start\" x=\"170\" y=\"-257.5\" font-family=\"monospace\" font-size=\"10.00\">bedrock_elevation</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"331,-250.5 331,-269.5 \"/>\n<text text-anchor=\"start\" x=\"281\" y=\"-257.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"334\" y=\"-257.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"277,-231.5 277,-250.5 \"/>\n<text text-anchor=\"start\" x=\"170\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\">subsidence_rate</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"331,-231.5 331,-250.5 \"/>\n<text text-anchor=\"start\" x=\"281\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"334\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- Boxes&#45;&gt;WaterDepth -->\n<g id=\"edge2\" class=\"edge\">\n<title>Boxes&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M233.27,-377.97C239.07,-369.46 245.38,-360.21 251.69,-350.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"254.73,-352.7 257.48,-342.47 248.95,-348.76 254.73,-352.7\"/>\n</g>\n<!-- TimeIntegration -->\n<g id=\"node2\" class=\"node\">\n<title>TimeIntegration</title>\n<path fill=\"none\" stroke=\"black\" d=\"M456,-457C456,-457 318,-457 318,-457 312,-457 306,-451 306,-445 306,-445 306,-390 306,-390 306,-384 312,-378 318,-378 318,-378 456,-378 456,-378 462,-378 468,-384 468,-390 468,-390 468,-445 468,-445 468,-451 462,-457 456,-457\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"313,-426.5 461,-426.5 \"/>\n<text text-anchor=\"start\" x=\"321.5\" y=\"-435.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">TimeIntegration</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"313,-403.5 313,-426.5 360,-426.5 360,-403.5 313,-403.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"313,-403.5 360,-403.5 360,-426.5 313,-426.5 \"/>\n<text text-anchor=\"start\" x=\"317\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"360,-403.5 360,-426.5 414,-426.5 414,-403.5 360,-403.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"360,-403.5 360,-426.5 414,-426.5 414,-403.5 360,-403.5\"/>\n<text text-anchor=\"start\" x=\"364\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"414,-403.5 414,-426.5 461,-426.5 461,-403.5 414,-403.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"461,-426.5 414,-426.5 414,-403.5 461,-403.5 \"/>\n<text text-anchor=\"start\" x=\"418\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"360,-384.5 360,-403.5 \"/>\n<text text-anchor=\"start\" x=\"317\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\">time</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"414,-384.5 414,-403.5 \"/>\n<text text-anchor=\"start\" x=\"364\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"417\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\">step</text>\n</g>\n<!-- TimeIntegration&#45;&gt;WaterDepth -->\n<g id=\"edge1\" class=\"edge\">\n<title>TimeIntegration&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M360.73,-377.97C354.93,-369.46 348.62,-360.21 342.31,-350.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"345.05,-348.76 336.52,-342.47 339.27,-352.7 345.05,-348.76\"/>\n</g>\n<!-- H5Writer -->\n<g id=\"node7\" class=\"node\">\n<title>H5Writer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M546.5,-148.5C546.5,-148.5 481.5,-148.5 481.5,-148.5 475.5,-148.5 469.5,-142.5 469.5,-136.5 469.5,-136.5 469.5,-124.5 469.5,-124.5 469.5,-118.5 475.5,-112.5 481.5,-112.5 481.5,-112.5 546.5,-112.5 546.5,-112.5 552.5,-112.5 558.5,-118.5 558.5,-124.5 558.5,-124.5 558.5,-136.5 558.5,-136.5 558.5,-142.5 552.5,-148.5 546.5,-148.5\"/>\n<text text-anchor=\"start\" x=\"476.5\" y=\"-127.8\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">H5Writer</text>\n</g>\n<!-- WaterDepth&#45;&gt;H5Writer -->\n<g id=\"edge7\" class=\"edge\">\n<title>WaterDepth&#45;&gt;H5Writer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M408.97,-224.86C426.99,-213.85 444.97,-201.75 461,-189 472.94,-179.5 484.6,-167.26 493.94,-156.52\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"496.8,-158.56 500.59,-148.67 491.46,-154.04 496.8,-158.56\"/>\n</g>\n<!-- Production -->\n<g id=\"node8\" class=\"node\">\n<title>Production</title>\n<path fill=\"none\" stroke=\"black\" d=\"M439.5,-189C439.5,-189 192.5,-189 192.5,-189 186.5,-189 180.5,-183 180.5,-177 180.5,-177 180.5,-84 180.5,-84 180.5,-78 186.5,-72 192.5,-72 192.5,-72 439.5,-72 439.5,-72 445.5,-72 451.5,-78 451.5,-84 451.5,-84 451.5,-177 451.5,-177 451.5,-183 445.5,-189 439.5,-189\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"188,-158.5 445,-158.5 \"/>\n<text text-anchor=\"start\" x=\"272.5\" y=\"-167.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Production</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"188,-135.5 188,-158.5 257,-158.5 257,-135.5 188,-135.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"188,-135.5 257,-135.5 257,-158.5 188,-158.5 \"/>\n<text text-anchor=\"start\" x=\"192\" y=\"-143.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"257,-135.5 257,-158.5 398,-158.5 398,-135.5 257,-135.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"257,-135.5 257,-158.5 398,-158.5 398,-135.5 257,-135.5\"/>\n<text text-anchor=\"start\" x=\"261\" y=\"-143.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"398,-135.5 398,-158.5 445,-158.5 445,-135.5 398,-135.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"445,-158.5 398,-158.5 398,-135.5 445,-135.5 \"/>\n<text text-anchor=\"start\" x=\"402\" y=\"-143.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"257,-116.5 257,-135.5 \"/>\n<text text-anchor=\"start\" x=\"192\" y=\"-123.5\" font-family=\"monospace\" font-size=\"10.00\">insolation</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"398,-116.5 398,-135.5 \"/>\n<text text-anchor=\"start\" x=\"261\" y=\"-123.5\" font-family=\"monospace\" font-size=\"10.00\">maximum_growth_rate</text>\n<text text-anchor=\"start\" x=\"401\" y=\"-123.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"257,-97.5 257,-116.5 \"/>\n<text text-anchor=\"start\" x=\"192\" y=\"-104.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"398,-97.5 398,-116.5 \"/>\n<text text-anchor=\"start\" x=\"261\" y=\"-104.5\" font-family=\"monospace\" font-size=\"10.00\">extinction_coefficient</text>\n<text text-anchor=\"start\" x=\"401\" y=\"-104.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"257,-78.5 257,-97.5 \"/>\n<text text-anchor=\"start\" x=\"192\" y=\"-85.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"398,-78.5 398,-97.5 \"/>\n<text text-anchor=\"start\" x=\"261\" y=\"-85.5\" font-family=\"monospace\" font-size=\"10.00\">saturation_intensity</text>\n<text text-anchor=\"start\" x=\"401\" y=\"-85.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- WaterDepth&#45;&gt;Production -->\n<g id=\"edge8\" class=\"edge\">\n<title>WaterDepth&#45;&gt;Production</title>\n<path fill=\"none\" stroke=\"black\" d=\"M304.24,-224.98C305.3,-216.54 306.4,-207.77 307.49,-199.14\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"310.98,-199.47 308.75,-189.11 304.03,-198.59 310.98,-199.47\"/>\n</g>\n<!-- FaciesBase -->\n<g id=\"node4\" class=\"node\">\n<title>FaciesBase</title>\n<path fill=\"none\" stroke=\"black\" d=\"M603,-323C603,-323 465,-323 465,-323 459,-323 453,-317 453,-311 453,-311 453,-256 453,-256 453,-250 459,-244 465,-244 465,-244 603,-244 603,-244 609,-244 615,-250 615,-256 615,-256 615,-311 615,-311 615,-317 609,-323 603,-323\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"460,-292.5 608,-292.5 \"/>\n<text text-anchor=\"start\" x=\"490\" y=\"-301.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">FaciesBase</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"460,-269.5 460,-292.5 507,-292.5 507,-269.5 460,-269.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"460,-269.5 507,-269.5 507,-292.5 460,-292.5 \"/>\n<text text-anchor=\"start\" x=\"464\" y=\"-277.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"507,-269.5 507,-292.5 561,-292.5 561,-269.5 507,-269.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"507,-269.5 507,-292.5 561,-292.5 561,-269.5 507,-269.5\"/>\n<text text-anchor=\"start\" x=\"511\" y=\"-277.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"561,-269.5 561,-292.5 608,-292.5 608,-269.5 561,-269.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"608,-292.5 561,-292.5 561,-269.5 608,-269.5 \"/>\n<text text-anchor=\"start\" x=\"565\" y=\"-277.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"507,-250.5 507,-269.5 \"/>\n<text text-anchor=\"start\" x=\"464\" y=\"-257.5\" font-family=\"monospace\" font-size=\"10.00\">facies</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"561,-250.5 561,-269.5 \"/>\n<text text-anchor=\"start\" x=\"511\" y=\"-257.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"564\" y=\"-257.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- FaciesBase&#45;&gt;H5Writer -->\n<g id=\"edge6\" class=\"edge\">\n<title>FaciesBase&#45;&gt;H5Writer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M528.85,-243.61C525.34,-217.09 520.77,-182.62 517.63,-158.94\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"521.09,-158.34 516.3,-148.88 514.15,-159.26 521.09,-158.34\"/>\n</g>\n<!-- FaciesBase&#45;&gt;Production -->\n<g id=\"edge9\" class=\"edge\">\n<title>FaciesBase&#45;&gt;Production</title>\n<path fill=\"none\" stroke=\"black\" d=\"M478.14,-243.81C456.7,-228.96 431.63,-211.59 407.7,-195.01\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"409.5,-192.01 399.29,-189.19 405.52,-197.76 409.5,-192.01\"/>\n</g>\n<!-- BS92 -->\n<g id=\"node5\" class=\"node\">\n<title>BS92</title>\n<path fill=\"none\" stroke=\"black\" d=\"M332,-36C332,-36 300,-36 300,-36 294,-36 288,-30 288,-24 288,-24 288,-12 288,-12 288,-6 294,0 300,0 300,0 332,0 332,0 338,0 344,-6 344,-12 344,-12 344,-24 344,-24 344,-30 338,-36 332,-36\"/>\n<text text-anchor=\"start\" x=\"295\" y=\"-15.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">BS92</text>\n</g>\n<!-- Tag -->\n<g id=\"node6\" class=\"node\">\n<title>Tag</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150,-170C150,-170 12,-170 12,-170 6,-170 0,-164 0,-158 0,-158 0,-103 0,-103 0,-97 6,-91 12,-91 12,-91 150,-91 150,-91 156,-91 162,-97 162,-103 162,-103 162,-158 162,-158 162,-164 156,-170 150,-170\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-139.5 155,-139.5 \"/>\n<text text-anchor=\"start\" x=\"67\" y=\"-148.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Tag</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"7,-116.5 7,-139.5 54,-139.5 54,-116.5 7,-116.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-116.5 54,-116.5 54,-139.5 7,-139.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-124.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"54,-116.5 54,-139.5 108,-139.5 108,-116.5 54,-116.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"54,-116.5 54,-139.5 108,-139.5 108,-116.5 54,-116.5\"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-124.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"108,-116.5 108,-139.5 155,-139.5 155,-116.5 108,-116.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"155,-139.5 108,-139.5 108,-116.5 155,-116.5 \"/>\n<text text-anchor=\"start\" x=\"112\" y=\"-124.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"54,-97.5 54,-116.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-104.5\" font-family=\"monospace\" font-size=\"10.00\">tag</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"108,-97.5 108,-116.5 \"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-104.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"111\" y=\"-104.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- Tag&#45;&gt;BS92 -->\n<g id=\"edge3\" class=\"edge\">\n<title>Tag&#45;&gt;BS92</title>\n<path fill=\"none\" stroke=\"black\" d=\"M137.53,-90.76C148.39,-84.07 159.87,-77.51 171,-72 206.18,-54.59 248.56,-39.76 278.39,-30.25\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"279.51,-33.57 288,-27.23 277.41,-26.89 279.51,-33.57\"/>\n</g>\n<!-- H5Writer&#45;&gt;BS92 -->\n<g id=\"edge4\" class=\"edge\">\n<title>H5Writer&#45;&gt;BS92</title>\n<path fill=\"none\" stroke=\"black\" d=\"M501.78,-112.34C492,-99.69 477.26,-82.85 461,-72 428.05,-50.02 384.81,-35.75 354.16,-27.62\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"354.83,-24.18 344.27,-25.1 353.09,-30.96 354.83,-24.18\"/>\n</g>\n<!-- Production&#45;&gt;BS92 -->\n<g id=\"edge5\" class=\"edge\">\n<title>Production&#45;&gt;BS92</title>\n<path fill=\"none\" stroke=\"black\" d=\"M316,-71.98C316,-63.14 316,-54.38 316,-46.61\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"319.5,-46.36 316,-36.36 312.5,-46.36 319.5,-46.36\"/>\n</g>\n</g>\n</svg>\n</div>","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"Within the CarboKitten design, we can express the BS92 model a bit more succinctly. The following produces output that is fully compatible with other CarboKitten models and the included post processing and visualization stack. The H5Writer module provides a run method that expects the initial_state, step! and write_header methods to be available.","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<div class=\"noweb-label\">file:<i>src/Model/BS92.jl</i></div>","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"@compose module BS92\n@mixin Tag, H5Writer, Production\n\nusing ..Common\nusing ..Production: uniform_production\nusing ..TimeIntegration\nusing ..WaterDepth\nusing ModuleMixins: @for_each\n\nexport Input, Facies\n\nfunction initial_state(input::Input)\n    sediment_height = zeros(Height, input.box.grid_size...)\n    return State(0, sediment_height)\nend\n\nfunction step!(input::Input)\n    τ = uniform_production(input)\n    function (state::State)\n        prod = τ(state) .* input.time.Δt\n        Δη = sum(prod; dims=1)[1, :, :]\n        state.sediment_height .+= Δη\n        state.step += 1\n        return H5Writer.DataFrame(\n            production = prod,\n            deposition = prod)\n    end\nend\n\nfunction write_header(fid, input::AbstractInput)\n    @for_each(P -> P.write_header(fid, input), PARENTS)\nend\n\nend","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<div class=\"noweb-label\">file:<i>examples/model/bs92/run.jl</i></div>","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"#| creates: data/output/bs92.h5\n\nmodule Script\n\nusing CarboKitten.Components\nusing CarboKitten.Components.Common\nusing CarboKitten.Model.BS92\nusing CarboKitten.DataSets: bosscher_schlager_1992\n\nusing Interpolations\nusing Unitful\n\nfunction sealevel_curve()\n    data = bosscher_schlager_1992()\n    linear_interpolation(data.time, data.sealevel)\nend\n\nconst INPUT = Input(\n    tag = \"example model BS92\",\n    box = Common.Box{Shelf}(grid_size=(100, 1), phys_scale=600.0u\"m\"),\n    time = TimeProperties(\n      Δt = 10.0u\"yr\",\n      steps = 8000,\n      write_interval = 100),\n    sea_level = let sc = sealevel_curve()\n      t -> -sc(t)\n    end,\n    bedrock_elevation = (x, y) -> - x / 300.0,\n    subsidence_rate = 0.0u\"m/yr\",\n    insolation = 400.0u\"W/m^2\",\n    facies = [Facies(\n      maximum_growth_rate = 0.005u\"m/yr\",\n      saturation_intensity = 50.0u\"W/m^2\",\n      extinction_coefficient = 0.05u\"m^-1\"\n    )])\n\nfunction main()\n    H5Writer.run(Model{BS92}, INPUT, \"data/output/bs92.h5\")\nend\n\nend\n\nScript.main()","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<div class=\"noweb-label\">file:<i>examples/model/bs92/plot.jl</i></div>","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"#| creates: docs/src/_fig/bs92-summary.png\n#| requires: data/output/bs92.h5\n#| collect: figures\n\nusing GLMakie\nusing CarboKitten.Visualization\nsave(\"docs/src/_fig/bs92-summary.png\", summary_plot(\"data/output/bs92.h5\"))","category":"page"},{"location":"bosscher-1992/#Multiple-facies","page":"Bosscher and Schlager 1992","title":"Multiple facies","text":"","category":"section"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"Using the above implementation of the model by Bosscher and Schlager, we can run the same model with multiple facies. We use the same parameters as Burgess2013, but divide the maximum_growth_rate by four, since we have no CA running and all facies produce at the same time.","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<div class=\"noweb-label\">file:<i>examples/model/bs92/multi-facies-run.jl</i></div>","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"#| creates: data/output/bs92-multi-facies.h5\n\nmodule Script\n\nusing CarboKitten.Components\nusing CarboKitten.Components.Common\nusing CarboKitten.Model.BS92\n\nusing Unitful\n\nconst FACIES = [\n    BS92.Facies(\n         maximum_growth_rate=500u\"m/Myr\"/4,\n         extinction_coefficient=0.8u\"m^-1\",\n         saturation_intensity=60u\"W/m^2\"),\n    BS92.Facies(\n         maximum_growth_rate=400u\"m/Myr\"/4,\n         extinction_coefficient=0.1u\"m^-1\",\n         saturation_intensity=60u\"W/m^2\"),\n    BS92.Facies(\n         maximum_growth_rate=100u\"m/Myr\"/4,\n         extinction_coefficient=0.005u\"m^-1\",\n         saturation_intensity=60u\"W/m^2\")]\n\nconst INPUT = BS92.Input(\n    tag = \"example model BS92\",\n    box = Common.Box{Shelf}(grid_size=(100, 1), phys_scale=150.0u\"m\"),\n    time = TimeProperties(\n        Δt = 200.0u\"yr\",\n        steps = 5000,\n        write_interval = 1),\n    sea_level = t -> 4.0u\"m\" * sin(2π * t / 0.2u\"Myr\"),\n    bedrock_elevation = (x, y) -> - x / 300.0,\n    subsidence_rate = 50.0u\"m/Myr\",\n    insolation = 400.0u\"W/m^2\",\n    facies = FACIES)\n\nfunction main()\n    H5Writer.run(Model{BS92}, INPUT, \"data/output/bs92-multi-facies.h5\")\nend\n\nend\n\nScript.main()","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"<div class=\"noweb-label\">file:<i>examples/model/bs92/multi-facies-plot.jl</i></div>","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"#| creates: docs/src/_fig/bs92-multi-facies.png\n#| requires: data/output/bs92-multi-facies.h5\n#| collect: figures\n\nusing GLMakie\nusing CarboKitten.Visualization\nsave(\"docs/src/_fig/bs92-multi-facies.png\", summary_plot(\"data/output/bs92-multi-facies.h5\", wheeler_smooth=(3, 5)))","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"(Image: BS92 with multiple facies)","category":"page"},{"location":"bosscher-1992/","page":"Bosscher and Schlager 1992","title":"Bosscher and Schlager 1992","text":"","category":"page"},{"location":"model-alcap/#Model-with-CA,-Production-and-Active-Layer-transport-(ALCAPS)","page":"ALCAPS","title":"Model with CA, Production and Active Layer transport (ALCAPS)","text":"","category":"section"},{"location":"model-alcap/","page":"ALCAPS","title":"ALCAPS","text":"The following Sedimentation model includes the Burgess 2013 Cellular Automaton, Bosscher & Schlager 1992 Production curves and an Active Layer transport model, based on Paola 1992, henceforth ALCAPS.","category":"page"},{"location":"model-alcap/","page":"ALCAPS","title":"ALCAPS","text":"(Image: Result from alternative input)","category":"page"},{"location":"model-alcap/#Example-Input","page":"ALCAPS","title":"Example Input","text":"","category":"section"},{"location":"model-alcap/","page":"ALCAPS","title":"ALCAPS","text":"The following is a complete example input.","category":"page"},{"location":"model-alcap/","page":"ALCAPS","title":"ALCAPS","text":"<div class=\"noweb-label\">file:<i>examples/model/alcap/run.jl</i></div>","category":"page"},{"location":"model-alcap/","page":"ALCAPS","title":"ALCAPS","text":"#| requires: src/Model/ALCAP2.jl\n#| creates: data/output/alcap2.h5\n\nmodule Script\n\nusing Unitful\nusing CarboKitten.Components\nusing CarboKitten.Components.Common\nusing CarboKitten.Model: ALCAP2 as ALCAP\nusing CarboKitten.Export: data_export, CSV\n\nconst m = u\"m\"\nconst Myr = u\"Myr\"\n\nconst PATH = \"data/output\"\nconst TAG = \"alcap2\"\n\nconst FACIES = [\n    ALCAP.Facies(\n        viability_range=(4, 10),\n        activation_range=(6, 10),\n        maximum_growth_rate=500u\"m/Myr\",\n        extinction_coefficient=0.8u\"m^-1\",\n        saturation_intensity=60u\"W/m^2\",\n        diffusion_coefficient=10000u\"m\"),\n    ALCAP.Facies(\n        viability_range=(4, 10),\n        activation_range=(6, 10),\n        maximum_growth_rate=400u\"m/Myr\",\n        extinction_coefficient=0.1u\"m^-1\",\n        saturation_intensity=60u\"W/m^2\",\n        diffusion_coefficient=5000u\"m\"),\n    ALCAP.Facies(\n        viability_range=(4, 10),\n        activation_range=(6, 10),\n        maximum_growth_rate=100u\"m/Myr\",\n        extinction_coefficient=0.005u\"m^-1\",\n        saturation_intensity=60u\"W/m^2\",\n        diffusion_coefficient=7000u\"m\")\n]\n\nconst PERIOD = 0.2Myr\nconst AMPLITUDE = 4.0m\n\nconst INPUT = ALCAP.Input(\n    tag=\"$TAG\",\n    box=Box{Shelf}(grid_size=(100, 50), phys_scale=150.0m),\n    time=TimeProperties(\n        Δt=0.0002Myr,\n        steps=5000,\n        write_interval=1),\n    ca_interval=1,\n    bedrock_elevation=(x, y) -> -x / 300.0,\n    sea_level=t -> AMPLITUDE * sin(2π * t / PERIOD),\n    subsidence_rate=50.0m / Myr,\n    disintegration_rate=500.0m / Myr,\n    insolation=400.0u\"W/m^2\",\n    sediment_buffer_size=50,\n    depositional_resolution=0.5m,\n    facies=FACIES)\n\nfunction main()\n    H5Writer.run(Model{ALCAP}, INPUT, \"$(PATH)/$(TAG).h5\")\n\n    data_export(\n        CSV(tuple.(10:20:70, 25),\n          :sediment_accumulation_curve => \"$(PATH)/$(TAG)_sac.csv\",\n          :age_depth_model => \"$(PATH)/$(TAG)_adm.csv\",\n          :stratigraphic_column => \"$(PATH)/$(TAG)_sc.csv\",\n          :metadata => \"$(PATH)/$(TAG).toml\"),\n        \"$(PATH)/$(TAG).h5\")\nend\n\nend\n\nScript.main()","category":"page"},{"location":"model-alcap/","page":"ALCAPS","title":"ALCAPS","text":"<details><summary>Plotting code</summary>","category":"page"},{"location":"model-alcap/","page":"ALCAPS","title":"ALCAPS","text":"<div class=\"noweb-label\">file:<i>examples/model/alcap/plot.jl</i></div>","category":"page"},{"location":"model-alcap/","page":"ALCAPS","title":"ALCAPS","text":"#| creates: docs/src/_fig/alcaps-alternative.png\n#| requires: data/output/alcap2.h5\n#| collect: figures\n\nusing GLMakie\nusing CarboKitten.Visualization\n\nsave(\"docs/src/_fig/alcaps-alternative.png\", summary_plot(\"data/output/alcap2.h5\"))","category":"page"},{"location":"model-alcap/","page":"ALCAPS","title":"ALCAPS","text":"</details>","category":"page"},{"location":"model-alcap/#Modular-Implementation","page":"ALCAPS","title":"Modular Implementation","text":"","category":"section"},{"location":"model-alcap/","page":"ALCAPS","title":"ALCAPS","text":"<div class=\"component-dag\" style=\"overflow: scroll\"><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.50.0 (20211204.2007)\n -->\n<!-- Pages: 1 -->\n<svg width=\"1120pt\" height=\"580pt\"\n viewBox=\"0.00 0.00 1119.50 580.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 576)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-576 1115.5,-576 1115.5,4 -4,4\"/>\n<!-- Boxes -->\n<g id=\"node1\" class=\"node\">\n<title>Boxes</title>\n<path fill=\"none\" stroke=\"black\" d=\"M519,-572C519,-572 381,-572 381,-572 375,-572 369,-566 369,-560 369,-560 369,-505 369,-505 369,-499 375,-493 381,-493 381,-493 519,-493 519,-493 525,-493 531,-499 531,-505 531,-505 531,-560 531,-560 531,-566 525,-572 519,-572\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"376,-541.5 524,-541.5 \"/>\n<text text-anchor=\"start\" x=\"426.5\" y=\"-550.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Boxes</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"376,-518.5 376,-541.5 423,-541.5 423,-518.5 376,-518.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"376,-518.5 423,-518.5 423,-541.5 376,-541.5 \"/>\n<text text-anchor=\"start\" x=\"380\" y=\"-526.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"423,-518.5 423,-541.5 477,-541.5 477,-518.5 423,-518.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"423,-518.5 423,-541.5 477,-541.5 477,-518.5 423,-518.5\"/>\n<text text-anchor=\"start\" x=\"427\" y=\"-526.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"477,-518.5 477,-541.5 524,-541.5 524,-518.5 477,-518.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"524,-541.5 477,-541.5 477,-518.5 524,-518.5 \"/>\n<text text-anchor=\"start\" x=\"481\" y=\"-526.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"423,-499.5 423,-518.5 \"/>\n<text text-anchor=\"start\" x=\"380\" y=\"-506.5\" font-family=\"monospace\" font-size=\"10.00\">box</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"477,-499.5 477,-518.5 \"/>\n<text text-anchor=\"start\" x=\"427\" y=\"-506.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"480\" y=\"-506.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- WaterDepth -->\n<g id=\"node3\" class=\"node\">\n<title>WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M264,-457C264,-457 12,-457 12,-457 6,-457 0,-451 0,-445 0,-445 0,-352 0,-352 0,-346 6,-340 12,-340 12,-340 264,-340 264,-340 270,-340 276,-346 276,-352 276,-352 276,-445 276,-445 276,-451 270,-457 264,-457\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-426.5 269,-426.5 \"/>\n<text text-anchor=\"start\" x=\"90.5\" y=\"-435.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">WaterDepth</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"7,-403.5 7,-426.5 118,-426.5 118,-403.5 7,-403.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-403.5 118,-403.5 118,-426.5 7,-426.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"118,-403.5 118,-426.5 172,-426.5 172,-403.5 118,-403.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"118,-403.5 118,-426.5 172,-426.5 172,-403.5 118,-403.5\"/>\n<text text-anchor=\"start\" x=\"122\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"172,-403.5 172,-426.5 269,-426.5 269,-403.5 172,-403.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"269,-426.5 172,-426.5 172,-403.5 269,-403.5 \"/>\n<text text-anchor=\"start\" x=\"176\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"118,-384.5 118,-403.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\">sea_level</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"172,-384.5 172,-403.5 \"/>\n<text text-anchor=\"start\" x=\"122\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"175\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\">sediment_height</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"118,-365.5 118,-384.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-372.5\" font-family=\"monospace\" font-size=\"10.00\">bedrock_elevation</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"172,-365.5 172,-384.5 \"/>\n<text text-anchor=\"start\" x=\"122\" y=\"-372.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"175\" y=\"-372.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"118,-346.5 118,-365.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-353.5\" font-family=\"monospace\" font-size=\"10.00\">subsidence_rate</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"172,-346.5 172,-365.5 \"/>\n<text text-anchor=\"start\" x=\"122\" y=\"-353.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"175\" y=\"-353.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- Boxes&#45;&gt;WaterDepth -->\n<g id=\"edge2\" class=\"edge\">\n<title>Boxes&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M368.84,-497.16C342.69,-486.1 312.87,-473.48 283.54,-461.07\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"284.61,-457.73 274.03,-457.05 281.88,-464.17 284.61,-457.73\"/>\n</g>\n<!-- CellularAutomaton -->\n<g id=\"node4\" class=\"node\">\n<title>CellularAutomaton</title>\n<path fill=\"none\" stroke=\"black\" d=\"M1099.5,-294.5C1099.5,-294.5 838.5,-294.5 838.5,-294.5 832.5,-294.5 826.5,-288.5 826.5,-282.5 826.5,-282.5 826.5,-208.5 826.5,-208.5 826.5,-202.5 832.5,-196.5 838.5,-196.5 838.5,-196.5 1099.5,-196.5 1099.5,-196.5 1105.5,-196.5 1111.5,-202.5 1111.5,-208.5 1111.5,-208.5 1111.5,-282.5 1111.5,-282.5 1111.5,-288.5 1105.5,-294.5 1099.5,-294.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"834,-264.5 1105,-264.5 \"/>\n<text text-anchor=\"start\" x=\"894\" y=\"-273.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">CellularAutomaton</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"834,-241.5 834,-264.5 927,-264.5 927,-241.5 834,-241.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"834,-241.5 927,-241.5 927,-264.5 834,-264.5 \"/>\n<text text-anchor=\"start\" x=\"838\" y=\"-249.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"927,-241.5 927,-264.5 1032,-264.5 1032,-241.5 927,-241.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"927,-241.5 927,-264.5 1032,-264.5 1032,-241.5 927,-241.5\"/>\n<text text-anchor=\"start\" x=\"931\" y=\"-249.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"1032,-241.5 1032,-264.5 1105,-264.5 1105,-241.5 1032,-241.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"1105,-264.5 1032,-264.5 1032,-241.5 1105,-241.5 \"/>\n<text text-anchor=\"start\" x=\"1036\" y=\"-249.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"927,-222.5 927,-241.5 \"/>\n<text text-anchor=\"start\" x=\"838\" y=\"-229.5\" font-family=\"monospace\" font-size=\"10.00\">ca_interval</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"1032,-222.5 1032,-241.5 \"/>\n<text text-anchor=\"start\" x=\"931\" y=\"-229.5\" font-family=\"monospace\" font-size=\"10.00\">viability_range</text>\n<text text-anchor=\"start\" x=\"1035\" y=\"-229.5\" font-family=\"monospace\" font-size=\"10.00\">ca</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"927,-203.5 927,-222.5 \"/>\n<text text-anchor=\"start\" x=\"838\" y=\"-210.5\" font-family=\"monospace\" font-size=\"10.00\">ca_random_seed</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"1032,-203.5 1032,-222.5 \"/>\n<text text-anchor=\"start\" x=\"931\" y=\"-210.5\" font-family=\"monospace\" font-size=\"10.00\">activation_range</text>\n<text text-anchor=\"start\" x=\"1035\" y=\"-210.5\" font-family=\"monospace\" font-size=\"10.00\">ca_priority</text>\n</g>\n<!-- Boxes&#45;&gt;CellularAutomaton -->\n<g id=\"edge3\" class=\"edge\">\n<title>Boxes&#45;&gt;CellularAutomaton</title>\n<path fill=\"none\" stroke=\"black\" d=\"M531.19,-528.88C604.84,-523.2 713.98,-506.27 795,-457 856.78,-419.43 906.71,-351.92 936.97,-303.47\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"940.14,-305.01 942.39,-294.66 934.17,-301.34 940.14,-305.01\"/>\n</g>\n<!-- SedimentBuffer -->\n<g id=\"node8\" class=\"node\">\n<title>SedimentBuffer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M594,-447.5C594,-447.5 306,-447.5 306,-447.5 300,-447.5 294,-441.5 294,-435.5 294,-435.5 294,-361.5 294,-361.5 294,-355.5 300,-349.5 306,-349.5 306,-349.5 594,-349.5 594,-349.5 600,-349.5 606,-355.5 606,-361.5 606,-361.5 606,-435.5 606,-435.5 606,-441.5 600,-447.5 594,-447.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"301,-417.5 599,-417.5 \"/>\n<text text-anchor=\"start\" x=\"387\" y=\"-426.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">SedimentBuffer</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"301,-394.5 301,-417.5 448,-417.5 448,-394.5 301,-394.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"301,-394.5 448,-394.5 448,-417.5 301,-417.5 \"/>\n<text text-anchor=\"start\" x=\"305\" y=\"-402.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"448,-394.5 448,-417.5 502,-417.5 502,-394.5 448,-394.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"448,-394.5 448,-417.5 502,-417.5 502,-394.5 448,-394.5\"/>\n<text text-anchor=\"start\" x=\"452\" y=\"-402.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"502,-394.5 502,-417.5 599,-417.5 599,-394.5 502,-394.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"599,-417.5 502,-417.5 502,-394.5 599,-394.5 \"/>\n<text text-anchor=\"start\" x=\"506\" y=\"-402.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"448,-375.5 448,-394.5 \"/>\n<text text-anchor=\"start\" x=\"305\" y=\"-382.5\" font-family=\"monospace\" font-size=\"10.00\">sediment_buffer_size</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"502,-375.5 502,-394.5 \"/>\n<text text-anchor=\"start\" x=\"452\" y=\"-382.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"505\" y=\"-382.5\" font-family=\"monospace\" font-size=\"10.00\">sediment_buffer</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"448,-356.5 448,-375.5 \"/>\n<text text-anchor=\"start\" x=\"305\" y=\"-363.5\" font-family=\"monospace\" font-size=\"10.00\">depositional_resolution</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"502,-356.5 502,-375.5 \"/>\n<text text-anchor=\"start\" x=\"452\" y=\"-363.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"505\" y=\"-363.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- Boxes&#45;&gt;SedimentBuffer -->\n<g id=\"edge9\" class=\"edge\">\n<title>Boxes&#45;&gt;SedimentBuffer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M450,-492.97C450,-482.02 450,-469.84 450,-458\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"453.5,-457.71 450,-447.71 446.5,-457.71 453.5,-457.71\"/>\n</g>\n<!-- TimeIntegration -->\n<g id=\"node2\" class=\"node\">\n<title>TimeIntegration</title>\n<path fill=\"none\" stroke=\"black\" d=\"M207,-572C207,-572 69,-572 69,-572 63,-572 57,-566 57,-560 57,-560 57,-505 57,-505 57,-499 63,-493 69,-493 69,-493 207,-493 207,-493 213,-493 219,-499 219,-505 219,-505 219,-560 219,-560 219,-566 213,-572 207,-572\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"64,-541.5 212,-541.5 \"/>\n<text text-anchor=\"start\" x=\"72.5\" y=\"-550.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">TimeIntegration</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"64,-518.5 64,-541.5 111,-541.5 111,-518.5 64,-518.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"64,-518.5 111,-518.5 111,-541.5 64,-541.5 \"/>\n<text text-anchor=\"start\" x=\"68\" y=\"-526.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"111,-518.5 111,-541.5 165,-541.5 165,-518.5 111,-518.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"111,-518.5 111,-541.5 165,-541.5 165,-518.5 111,-518.5\"/>\n<text text-anchor=\"start\" x=\"115\" y=\"-526.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"165,-518.5 165,-541.5 212,-541.5 212,-518.5 165,-518.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"212,-541.5 165,-541.5 165,-518.5 212,-518.5 \"/>\n<text text-anchor=\"start\" x=\"169\" y=\"-526.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"111,-499.5 111,-518.5 \"/>\n<text text-anchor=\"start\" x=\"68\" y=\"-506.5\" font-family=\"monospace\" font-size=\"10.00\">time</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"165,-499.5 165,-518.5 \"/>\n<text text-anchor=\"start\" x=\"115\" y=\"-506.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"168\" y=\"-506.5\" font-family=\"monospace\" font-size=\"10.00\">step</text>\n</g>\n<!-- TimeIntegration&#45;&gt;WaterDepth -->\n<g id=\"edge1\" class=\"edge\">\n<title>TimeIntegration&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M138,-492.97C138,-484.98 138,-476.34 138,-467.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"141.5,-467.47 138,-457.47 134.5,-467.47 141.5,-467.47\"/>\n</g>\n<!-- H5Writer -->\n<g id=\"node6\" class=\"node\">\n<title>H5Writer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M170.5,-263.5C170.5,-263.5 105.5,-263.5 105.5,-263.5 99.5,-263.5 93.5,-257.5 93.5,-251.5 93.5,-251.5 93.5,-239.5 93.5,-239.5 93.5,-233.5 99.5,-227.5 105.5,-227.5 105.5,-227.5 170.5,-227.5 170.5,-227.5 176.5,-227.5 182.5,-233.5 182.5,-239.5 182.5,-239.5 182.5,-251.5 182.5,-251.5 182.5,-257.5 176.5,-263.5 170.5,-263.5\"/>\n<text text-anchor=\"start\" x=\"100.5\" y=\"-242.8\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">H5Writer</text>\n</g>\n<!-- WaterDepth&#45;&gt;H5Writer -->\n<g id=\"edge6\" class=\"edge\">\n<title>WaterDepth&#45;&gt;H5Writer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M138,-339.98C138,-317.27 138,-292.25 138,-273.82\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"141.5,-273.79 138,-263.79 134.5,-273.79 141.5,-273.79\"/>\n</g>\n<!-- Production -->\n<g id=\"node7\" class=\"node\">\n<title>Production</title>\n<path fill=\"none\" stroke=\"black\" d=\"M796.5,-304C796.5,-304 549.5,-304 549.5,-304 543.5,-304 537.5,-298 537.5,-292 537.5,-292 537.5,-199 537.5,-199 537.5,-193 543.5,-187 549.5,-187 549.5,-187 796.5,-187 796.5,-187 802.5,-187 808.5,-193 808.5,-199 808.5,-199 808.5,-292 808.5,-292 808.5,-298 802.5,-304 796.5,-304\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"545,-273.5 802,-273.5 \"/>\n<text text-anchor=\"start\" x=\"629.5\" y=\"-282.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Production</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"545,-250.5 545,-273.5 614,-273.5 614,-250.5 545,-250.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"545,-250.5 614,-250.5 614,-273.5 545,-273.5 \"/>\n<text text-anchor=\"start\" x=\"549\" y=\"-258.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"614,-250.5 614,-273.5 755,-273.5 755,-250.5 614,-250.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"614,-250.5 614,-273.5 755,-273.5 755,-250.5 614,-250.5\"/>\n<text text-anchor=\"start\" x=\"618\" y=\"-258.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"755,-250.5 755,-273.5 802,-273.5 802,-250.5 755,-250.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"802,-273.5 755,-273.5 755,-250.5 802,-250.5 \"/>\n<text text-anchor=\"start\" x=\"759\" y=\"-258.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"614,-231.5 614,-250.5 \"/>\n<text text-anchor=\"start\" x=\"549\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\">insolation</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"755,-231.5 755,-250.5 \"/>\n<text text-anchor=\"start\" x=\"618\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\">maximum_growth_rate</text>\n<text text-anchor=\"start\" x=\"758\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"614,-212.5 614,-231.5 \"/>\n<text text-anchor=\"start\" x=\"549\" y=\"-219.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"755,-212.5 755,-231.5 \"/>\n<text text-anchor=\"start\" x=\"618\" y=\"-219.5\" font-family=\"monospace\" font-size=\"10.00\">extinction_coefficient</text>\n<text text-anchor=\"start\" x=\"758\" y=\"-219.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"614,-193.5 614,-212.5 \"/>\n<text text-anchor=\"start\" x=\"549\" y=\"-200.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"755,-193.5 755,-212.5 \"/>\n<text text-anchor=\"start\" x=\"618\" y=\"-200.5\" font-family=\"monospace\" font-size=\"10.00\">saturation_intensity</text>\n<text text-anchor=\"start\" x=\"758\" y=\"-200.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- WaterDepth&#45;&gt;Production -->\n<g id=\"edge7\" class=\"edge\">\n<title>WaterDepth&#45;&gt;Production</title>\n<path fill=\"none\" stroke=\"black\" d=\"M276.2,-342.44C279.15,-341.59 282.09,-340.77 285,-340 387.84,-312.68 421.21,-331.35 527.42,-304.27\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"528.45,-307.61 537.24,-301.69 526.68,-300.84 528.45,-307.61\"/>\n</g>\n<!-- ActiveLayer -->\n<g id=\"node10\" class=\"node\">\n<title>ActiveLayer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M507.5,-285C507.5,-285 212.5,-285 212.5,-285 206.5,-285 200.5,-279 200.5,-273 200.5,-273 200.5,-218 200.5,-218 200.5,-212 206.5,-206 212.5,-206 212.5,-206 507.5,-206 507.5,-206 513.5,-206 519.5,-212 519.5,-218 519.5,-218 519.5,-273 519.5,-273 519.5,-279 513.5,-285 507.5,-285\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"208,-254.5 513,-254.5 \"/>\n<text text-anchor=\"start\" x=\"314.5\" y=\"-263.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">ActiveLayer</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"208,-231.5 208,-254.5 331,-254.5 331,-231.5 208,-231.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"208,-231.5 331,-231.5 331,-254.5 208,-254.5 \"/>\n<text text-anchor=\"start\" x=\"212\" y=\"-239.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"331,-231.5 331,-254.5 466,-254.5 466,-231.5 331,-231.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"331,-231.5 331,-254.5 466,-254.5 466,-231.5 331,-231.5\"/>\n<text text-anchor=\"start\" x=\"335\" y=\"-239.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"466,-231.5 466,-254.5 513,-254.5 513,-231.5 466,-231.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"513,-254.5 466,-254.5 466,-231.5 513,-231.5 \"/>\n<text text-anchor=\"start\" x=\"470\" y=\"-239.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"331,-212.5 331,-231.5 \"/>\n<text text-anchor=\"start\" x=\"212\" y=\"-219.5\" font-family=\"monospace\" font-size=\"10.00\">disintegration_rate</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"466,-212.5 466,-231.5 \"/>\n<text text-anchor=\"start\" x=\"335\" y=\"-219.5\" font-family=\"monospace\" font-size=\"10.00\">diffusion_coefficient</text>\n<text text-anchor=\"start\" x=\"469\" y=\"-219.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- WaterDepth&#45;&gt;ActiveLayer -->\n<g id=\"edge12\" class=\"edge\">\n<title>WaterDepth&#45;&gt;ActiveLayer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M222.56,-339.98C246.47,-323.72 272.11,-306.28 294.69,-290.92\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"296.89,-293.66 303.19,-285.14 292.95,-287.87 296.89,-293.66\"/>\n</g>\n<!-- CAProduction -->\n<g id=\"node9\" class=\"node\">\n<title>CAProduction</title>\n<path fill=\"none\" stroke=\"black\" d=\"M666.5,-129.5C666.5,-129.5 567.5,-129.5 567.5,-129.5 561.5,-129.5 555.5,-123.5 555.5,-117.5 555.5,-117.5 555.5,-105.5 555.5,-105.5 555.5,-99.5 561.5,-93.5 567.5,-93.5 567.5,-93.5 666.5,-93.5 666.5,-93.5 672.5,-93.5 678.5,-99.5 678.5,-105.5 678.5,-105.5 678.5,-117.5 678.5,-117.5 678.5,-123.5 672.5,-129.5 666.5,-129.5\"/>\n<text text-anchor=\"start\" x=\"562.5\" y=\"-108.8\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">CAProduction</text>\n</g>\n<!-- CellularAutomaton&#45;&gt;CAProduction -->\n<g id=\"edge10\" class=\"edge\">\n<title>CellularAutomaton&#45;&gt;CAProduction</title>\n<path fill=\"none\" stroke=\"black\" d=\"M845.73,-196.48C836.38,-193.17 827.06,-189.97 818,-187 761.03,-168.31 743.6,-173.43 688,-151 676.52,-146.37 664.51,-140.35 653.71,-134.46\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"655.39,-131.39 644.96,-129.57 651.98,-137.5 655.39,-131.39\"/>\n</g>\n<!-- FaciesBase -->\n<g id=\"node5\" class=\"node\">\n<title>FaciesBase</title>\n<path fill=\"none\" stroke=\"black\" d=\"M774,-438C774,-438 636,-438 636,-438 630,-438 624,-432 624,-426 624,-426 624,-371 624,-371 624,-365 630,-359 636,-359 636,-359 774,-359 774,-359 780,-359 786,-365 786,-371 786,-371 786,-426 786,-426 786,-432 780,-438 774,-438\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"631,-407.5 779,-407.5 \"/>\n<text text-anchor=\"start\" x=\"661\" y=\"-416.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">FaciesBase</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"631,-384.5 631,-407.5 678,-407.5 678,-384.5 631,-384.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"631,-384.5 678,-384.5 678,-407.5 631,-407.5 \"/>\n<text text-anchor=\"start\" x=\"635\" y=\"-392.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"678,-384.5 678,-407.5 732,-407.5 732,-384.5 678,-384.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"678,-384.5 678,-407.5 732,-407.5 732,-384.5 678,-384.5\"/>\n<text text-anchor=\"start\" x=\"682\" y=\"-392.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"732,-384.5 732,-407.5 779,-407.5 779,-384.5 732,-384.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"779,-407.5 732,-407.5 732,-384.5 779,-384.5 \"/>\n<text text-anchor=\"start\" x=\"736\" y=\"-392.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"678,-365.5 678,-384.5 \"/>\n<text text-anchor=\"start\" x=\"635\" y=\"-372.5\" font-family=\"monospace\" font-size=\"10.00\">facies</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"732,-365.5 732,-384.5 \"/>\n<text text-anchor=\"start\" x=\"682\" y=\"-372.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"735\" y=\"-372.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- FaciesBase&#45;&gt;CellularAutomaton -->\n<g id=\"edge4\" class=\"edge\">\n<title>FaciesBase&#45;&gt;CellularAutomaton</title>\n<path fill=\"none\" stroke=\"black\" d=\"M772.64,-358.81C804.06,-340.84 841.91,-319.19 875.96,-299.71\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"878.05,-302.55 884.99,-294.55 874.57,-296.48 878.05,-302.55\"/>\n</g>\n<!-- FaciesBase&#45;&gt;H5Writer -->\n<g id=\"edge5\" class=\"edge\">\n<title>FaciesBase&#45;&gt;H5Writer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M653.88,-358.9C641.7,-351.43 628.35,-344.52 615,-340 435.88,-279.32 360.85,-387.18 191,-304 176.38,-296.84 163.83,-283.77 154.62,-271.91\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"157.25,-269.57 148.52,-263.58 151.6,-273.71 157.25,-269.57\"/>\n</g>\n<!-- FaciesBase&#45;&gt;Production -->\n<g id=\"edge8\" class=\"edge\">\n<title>FaciesBase&#45;&gt;Production</title>\n<path fill=\"none\" stroke=\"black\" d=\"M696.76,-358.61C693.87,-344.99 690.54,-329.28 687.31,-314\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"690.69,-313.11 685.2,-304.05 683.85,-314.56 690.69,-313.11\"/>\n</g>\n<!-- FaciesBase&#45;&gt;ActiveLayer -->\n<g id=\"edge13\" class=\"edge\">\n<title>FaciesBase&#45;&gt;ActiveLayer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M648.47,-358.77C637.6,-352.08 626.13,-345.51 615,-340 590.29,-327.76 534.92,-307.18 482.07,-288.44\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"483.18,-285.12 472.58,-285.09 480.84,-291.72 483.18,-285.12\"/>\n</g>\n<!-- ALCAP2 -->\n<g id=\"node11\" class=\"node\">\n<title>ALCAP2</title>\n<path fill=\"none\" stroke=\"black\" d=\"M487.5,-36C487.5,-36 434.5,-36 434.5,-36 428.5,-36 422.5,-30 422.5,-24 422.5,-24 422.5,-12 422.5,-12 422.5,-6 428.5,0 434.5,0 434.5,0 487.5,0 487.5,0 493.5,0 499.5,-6 499.5,-12 499.5,-12 499.5,-24 499.5,-24 499.5,-30 493.5,-36 487.5,-36\"/>\n<text text-anchor=\"start\" x=\"429.5\" y=\"-15.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">ALCAP2</text>\n</g>\n<!-- H5Writer&#45;&gt;ALCAP2 -->\n<g id=\"edge16\" class=\"edge\">\n<title>H5Writer&#45;&gt;ALCAP2</title>\n<path fill=\"none\" stroke=\"black\" d=\"M151.76,-227.25C161.88,-215.18 176.36,-199.12 191,-187 264.98,-125.77 363.07,-70.19 418.36,-40.85\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"420.3,-43.78 427.51,-36.02 417.03,-37.59 420.3,-43.78\"/>\n</g>\n<!-- Production&#45;&gt;CAProduction -->\n<g id=\"edge11\" class=\"edge\">\n<title>Production&#45;&gt;CAProduction</title>\n<path fill=\"none\" stroke=\"black\" d=\"M648.6,-186.99C641.49,-170.22 634.05,-152.7 628.19,-138.87\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"631.35,-137.35 624.22,-129.52 624.9,-140.09 631.35,-137.35\"/>\n</g>\n<!-- SedimentBuffer&#45;&gt;ActiveLayer -->\n<g id=\"edge14\" class=\"edge\">\n<title>SedimentBuffer&#45;&gt;ActiveLayer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M421.28,-349.31C410.76,-331.67 398.88,-311.73 388.39,-294.14\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"391.18,-291.98 383.05,-285.18 385.17,-295.56 391.18,-291.98\"/>\n</g>\n<!-- CAProduction&#45;&gt;ALCAP2 -->\n<g id=\"edge17\" class=\"edge\">\n<title>CAProduction&#45;&gt;ALCAP2</title>\n<path fill=\"none\" stroke=\"black\" d=\"M587.66,-93.29C562.6,-78.59 526.39,-57.35 499.1,-41.34\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"500.61,-38.17 490.21,-36.13 497.07,-44.21 500.61,-38.17\"/>\n</g>\n<!-- ActiveLayer&#45;&gt;ALCAP2 -->\n<g id=\"edge18\" class=\"edge\">\n<title>ActiveLayer&#45;&gt;ALCAP2</title>\n<path fill=\"none\" stroke=\"black\" d=\"M377.25,-205.99C397.76,-160.19 431.46,-84.95 449.21,-45.32\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"452.47,-46.6 453.36,-36.05 446.08,-43.74 452.47,-46.6\"/>\n</g>\n<!-- Tag -->\n<g id=\"node12\" class=\"node\">\n<title>Tag</title>\n<path fill=\"none\" stroke=\"black\" d=\"M847,-151C847,-151 709,-151 709,-151 703,-151 697,-145 697,-139 697,-139 697,-84 697,-84 697,-78 703,-72 709,-72 709,-72 847,-72 847,-72 853,-72 859,-78 859,-84 859,-84 859,-139 859,-139 859,-145 853,-151 847,-151\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"704,-120.5 852,-120.5 \"/>\n<text text-anchor=\"start\" x=\"764\" y=\"-129.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Tag</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"704,-97.5 704,-120.5 751,-120.5 751,-97.5 704,-97.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"704,-97.5 751,-97.5 751,-120.5 704,-120.5 \"/>\n<text text-anchor=\"start\" x=\"708\" y=\"-105.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"751,-97.5 751,-120.5 805,-120.5 805,-97.5 751,-97.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"751,-97.5 751,-120.5 805,-120.5 805,-97.5 751,-97.5\"/>\n<text text-anchor=\"start\" x=\"755\" y=\"-105.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"805,-97.5 805,-120.5 852,-120.5 852,-97.5 805,-97.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"852,-120.5 805,-120.5 805,-97.5 852,-97.5 \"/>\n<text text-anchor=\"start\" x=\"809\" y=\"-105.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"751,-78.5 751,-97.5 \"/>\n<text text-anchor=\"start\" x=\"708\" y=\"-85.5\" font-family=\"monospace\" font-size=\"10.00\">tag</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"805,-78.5 805,-97.5 \"/>\n<text text-anchor=\"start\" x=\"755\" y=\"-85.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"808\" y=\"-85.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- Tag&#45;&gt;ALCAP2 -->\n<g id=\"edge15\" class=\"edge\">\n<title>Tag&#45;&gt;ALCAP2</title>\n<path fill=\"none\" stroke=\"black\" d=\"M696.81,-75.02C693.85,-73.96 690.91,-72.95 688,-72 627.76,-52.25 556.24,-36.83 509.81,-27.83\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"510.2,-24.34 499.72,-25.9 508.88,-31.21 510.2,-24.34\"/>\n</g>\n</g>\n</svg>\n</div>","category":"page"},{"location":"model-alcap/","page":"ALCAPS","title":"ALCAPS","text":"<div class=\"noweb-label\">file:<i>src/Model/ALCAP2.jl</i></div>","category":"page"},{"location":"model-alcap/","page":"ALCAPS","title":"ALCAPS","text":"# FIXME: rename this to ALCAP and remove old code\n@compose module ALCAP2\n@mixin Tag, H5Writer, CAProduction, ActiveLayer\n\nusing ..Common\nusing ..CAProduction: production\nusing ..TimeIntegration\nusing ..WaterDepth\nusing ModuleMixins: @for_each\n\nexport Input, Facies\n\nfunction initial_state(input::Input)\n    ca_state = CellularAutomaton.initial_state(input)\n    for _ in 1:20\n        CellularAutomaton.step!(input)(ca_state)\n    end\n\n    sediment_height = zeros(Height, input.box.grid_size...)\n    sediment_buffer = zeros(Float64, input.sediment_buffer_size, n_facies(input), input.box.grid_size...)\n\n    return State(\n        step=0, sediment_height=sediment_height,\n        sediment_buffer=sediment_buffer,\n        ca=ca_state.ca, ca_priority=ca_state.ca_priority)\nend\n\nfunction step!(input::Input)\n    step_ca! = CellularAutomaton.step!(input)\n    disintegrate! = disintegration(input)\n    produce = production(input)\n    transport = transportation(input)\n\n    function (state::State)\n        if mod(state.step, input.ca_interval) == 0\n            step_ca!(state)\n        end\n\n        p = produce(state)\n        d = disintegrate!(state)\n\n        active_layer = p .+ d\n        sediment = transport(state, active_layer)\n\n        push_sediment!(state.sediment_buffer, sediment ./ input.depositional_resolution .|> NoUnits) \n        state.sediment_height .+= sum(sediment; dims=1)[1,:,:]\n        state.step += 1\n\n        return H5Writer.DataFrame(\n            production = p,\n            disintegration = d,\n            deposition = sediment)\n    end\nend\n\nfunction write_header(fid, input::AbstractInput)\n    @for_each(P -> P.write_header(fid, input), PARENTS)\nend\nend","category":"page"},{"location":"model-alcap/#API","page":"ALCAPS","title":"API","text":"","category":"section"},{"location":"model-alcap/","page":"ALCAPS","title":"ALCAPS","text":"Modules = [CarboKitten.Model.ALCAP2]","category":"page"},{"location":"model-alcap/","page":"ALCAPS","title":"ALCAPS","text":"","category":"page"},{"location":"getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting-started/#TODO","page":"Getting Started","title":"TODO","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"[ ] Xianhi: outline a user story\n[ ] Johan: implement","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"components/facies/#Facies-Base","page":"Facies","title":"Facies Base","text":"","category":"section"},{"location":"components/facies/","page":"Facies","title":"Facies","text":"<div class=\"component-dag\" style=\"overflow: scroll\"><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.50.0 (20211204.2007)\n -->\n<!-- Pages: 1 -->\n<svg width=\"170pt\" height=\"87pt\"\n viewBox=\"0.00 0.00 170.00 87.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 83)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-83 166,-83 166,4 -4,4\"/>\n<!-- FaciesBase -->\n<g id=\"node1\" class=\"node\">\n<title>FaciesBase</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150,-79C150,-79 12,-79 12,-79 6,-79 0,-73 0,-67 0,-67 0,-12 0,-12 0,-6 6,0 12,0 12,0 150,0 150,0 156,0 162,-6 162,-12 162,-12 162,-67 162,-67 162,-73 156,-79 150,-79\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-48.5 155,-48.5 \"/>\n<text text-anchor=\"start\" x=\"37\" y=\"-57.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">FaciesBase</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"7,-25.5 7,-48.5 54,-48.5 54,-25.5 7,-25.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-25.5 54,-25.5 54,-48.5 7,-48.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-33.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"54,-25.5 54,-48.5 108,-48.5 108,-25.5 54,-25.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"54,-25.5 54,-48.5 108,-48.5 108,-25.5 54,-25.5\"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-33.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"108,-25.5 108,-48.5 155,-48.5 155,-25.5 108,-25.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"155,-48.5 108,-48.5 108,-25.5 155,-25.5 \"/>\n<text text-anchor=\"start\" x=\"112\" y=\"-33.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"54,-6.5 54,-25.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\">facies</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"108,-6.5 108,-25.5 \"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"111\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n</g>\n</svg>\n</div>","category":"page"},{"location":"components/facies/","page":"Facies","title":"Facies","text":"Base module for including facies.","category":"page"},{"location":"components/facies/","page":"Facies","title":"Facies","text":"<div class=\"noweb-label\">file:<i>test/Components/FaciesBaseSpec.jl</i></div>","category":"page"},{"location":"components/facies/","page":"Facies","title":"Facies","text":"module FaciesBaseSpec\n    using Test\n    using CarboKitten.Components.Common\n    using CarboKitten.Components.FaciesBase: Facies, Input, n_facies\n\n    @testset \"Components/FaciesBase\" begin\n        let input = Input(facies=fill(Facies(), 23))\n            @test n_facies(input) == 23\n        end\n    end\nend","category":"page"},{"location":"components/facies/","page":"Facies","title":"Facies","text":"<div class=\"noweb-label\">file:<i>src/Components/FaciesBase.jl</i></div>","category":"page"},{"location":"components/facies/","page":"Facies","title":"Facies","text":"@compose module FaciesBase\nusing ..Common\nusing HDF5\nexport n_facies\n\n@kwdef struct Facies <: AbstractFacies\nend\n\n@kwdef struct Input <: AbstractInput\n    facies::Vector{Facies} = []\nend\n\nn_facies(input::AbstractInput) = length(input.facies)\n\nfunction write_header(fid, input::AbstractInput)\n    attr = attributes(fid[\"input\"])\n    attr[\"n_facies\"] = n_facies(input)\n    for i in 1:n_facies(input)\n        create_group(fid[\"input\"], \"facies$(i)\")\n    end\nend\nend","category":"page"},{"location":"components/facies/","page":"Facies","title":"Facies","text":"","category":"page"},{"location":"components/tag/#Tags","page":"Tags","title":"Tags","text":"","category":"section"},{"location":"components/tag/","page":"Tags","title":"Tags","text":"<div class=\"component-dag\" style=\"overflow: scroll\"><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.50.0 (20211204.2007)\n -->\n<!-- Pages: 1 -->\n<svg width=\"170pt\" height=\"87pt\"\n viewBox=\"0.00 0.00 170.00 87.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 83)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-83 166,-83 166,4 -4,4\"/>\n<!-- Tag -->\n<g id=\"node1\" class=\"node\">\n<title>Tag</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150,-79C150,-79 12,-79 12,-79 6,-79 0,-73 0,-67 0,-67 0,-12 0,-12 0,-6 6,0 12,0 12,0 150,0 150,0 156,0 162,-6 162,-12 162,-12 162,-67 162,-67 162,-73 156,-79 150,-79\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-48.5 155,-48.5 \"/>\n<text text-anchor=\"start\" x=\"67\" y=\"-57.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Tag</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"7,-25.5 7,-48.5 54,-48.5 54,-25.5 7,-25.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-25.5 54,-25.5 54,-48.5 7,-48.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-33.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"54,-25.5 54,-48.5 108,-48.5 108,-25.5 54,-25.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"54,-25.5 54,-48.5 108,-48.5 108,-25.5 54,-25.5\"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-33.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"108,-25.5 108,-48.5 155,-48.5 155,-25.5 108,-25.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"155,-48.5 108,-48.5 108,-25.5 155,-25.5 \"/>\n<text text-anchor=\"start\" x=\"112\" y=\"-33.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"54,-6.5 54,-25.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\">tag</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"108,-6.5 108,-25.5 \"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"111\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n</g>\n</svg>\n</div>","category":"page"},{"location":"components/tag/","page":"Tags","title":"Tags","text":"This module allows simulations to be tagged with a string.","category":"page"},{"location":"components/tag/","page":"Tags","title":"Tags","text":"<div class=\"noweb-label\">file:<i>src/Components/Tag.jl</i></div>","category":"page"},{"location":"components/tag/","page":"Tags","title":"Tags","text":"@compose module Tag\nusing ..Common\nusing HDF5\n\n@kwdef struct Input <: AbstractInput\n    tag::String = \"untagged run\"\nend\n\nfunction write_header(fid, input::AbstractInput)\n    attr = attributes(fid[\"input\"])\n    attr[\"tag\"] = input.tag\nend\nend","category":"page"},{"location":"components/tag/","page":"Tags","title":"Tags","text":"","category":"page"},{"location":"architecture/#Architecture","page":"Architecture","title":"Architecture","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"CarboKitten is modular in design. This gives us the advantage of few repetitions in the code, but it also means a little study getting in to developing CarboKitten.","category":"page"},{"location":"architecture/#Models","page":"Architecture","title":"Models","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"A model is a module that must have certain data structures and methods implemented.","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"struct Input <: AbstractInput: contains all input parameters\nstruct State <: AbstractState: contains all run-time state\nfunction initial_state(input): creates an initial State from an Input\nfunction step!(input)(state): curried function to advance state and return a H5Writer.DataFrame\nfunction write_header(fid, input): writes meta-data to an open HDF5 file","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"For most models the Input and State structures are generated from a hierarchy of components, which is explained below.","category":"page"},{"location":"architecture/#step!","page":"Architecture","title":"step!","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"The step! method deserves some extra attention: this is where the high-level logic of a model goes. Running a model is nothing but a repeated application of step!(input) on the state. Note that the step! function is curried: the input and state parameters are given on separate occasions. This allows the model to prepare later execution on state in a more efficient manner. For example, we may allocate memory or prepare quantities derived from input variables.","category":"page"},{"location":"architecture/#Components","page":"Architecture","title":"Components","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"A model in CarboKitten is composed of components. Each component extends the Input and/or State data structures with members and can also provide functions that work on those elements. Components can inherit from each other. For instance, the WaterDepth component inherits from Boxes component to have a notion of the grid size, and the TimeIntegration component to obtain a time coordinate from the state.","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"A component has the following syntax:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"@compose module MyComponent\n    @mixin DependencyA, DependencyB\n    using ..Common\n\n    @kwdef struct Input <: AbstractInput\n        ...\n    end\n\n    ...\nend","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"Here the Common module is a normal Julia module living in the same scope as the component. This Common module contains common definitions used throughout the CarboKitten code base.","category":"page"},{"location":"architecture/#H5Writer","page":"Architecture","title":"H5Writer","text":"","category":"section"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"The H5Writer component is special as it serves to execute a model. For example, if we have a model MyModel with all the required definitions,","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"@component module MyModel\n    @mixin Tag, H5Writer, ...\n    ...\n\n    function step!(input)\n        ...\n        return function (state)\n            ...\n            return H5Writer.DataFrame(...)\n        end\n    end\n\n    ...\nend","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"We can run that model as follows:","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"H5Writer.run(Model{MyModel}, MyModel.Input(), \"output.h5\")","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"This will call MyModel.initial_state first, then repeatedly MyModel.step!, which should return a H5Writer.DataFrame for writing to HDF5. Here Model is a value type (defined in CarboKitten.Components.Common).","category":"page"},{"location":"architecture/","page":"Architecture","title":"Architecture","text":"","category":"page"},{"location":"data-export/#Data-export","page":"CSV Export","title":"Data export","text":"","category":"section"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"We provide several ways to export reduced data from CarboKitten to CSV files that are easier to read, visualize and post-process for most people.","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"<div class=\"noweb-label\">⪡export-specification⪢≣</div>","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"abstract type ExportSpecification end\n\n@kwdef struct CSV <: ExportSpecification\n    grid_locations::Vector{NTuple{2,Int}}\n    output_files::IdDict{Symbol,String}\nend\n\nCSV(grid_locations, kwargs...) = CSV(grid_locations, IdDict(kwargs...))","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"using CarboKitten.Export: CSV\n\nCSV(tuple.(10:20:70, 25),\n  :sediment_accumulation_curve => \"run_06_sac.csv\",\n  :age_depth_model             => \"run_06_adm.csv\",\n  :stratigraphic_column        => \"run_06_sc.csv\",\n  :metadata                    => \"run_06.toml\")","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"There is a data_export function that can be overloaded with any ExportSpcification. When given a CSV specification, files are written as given.","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":":sediment_accumulation_curve  (SAC) is another term for sediment_height elsewhere in the code.\n:age_depth_model (ADM) is a monotonic version of the SAC, relating depth to age.\n:stratigraphic_column amount of deposited material per facies per time step, corrected for disintegrated material. The cumulative sum of the SC should add up to the ADM.\n:metadata some metadata, written as a TOML file.","category":"page"},{"location":"data-export/#Tests","page":"CSV Export","title":"Tests","text":"","category":"section"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"We have a test case with just three pixels.","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"Uniform production\nUniform production, top-hat disintegration, making the sediment accumulation non-monotonic\nLinearly increasing production (not sure what this adds)","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"<div class=\"noweb-label\">⪡export-test-case⪢≣</div>","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"const AXES1 = Axes(\n    x=[0.0, 1.0, 2.0] * u\"m\",\n    y=[1.0] * u\"m\",\n    t=(0.0:0.1:1.0) * u\"Myr\")\n\nconst HEADER1 = Header(\n    tag=\"test\",\n    axes=AXES1,\n    write_interval=1,\n    Δt=0.1u\"Myr\",\n    time_steps=10,\n    bedrock_elevation=zeros(typeof(1.0u\"m\"), 3, 3),\n    sea_level=zeros(typeof(1.0u\"m\"), 10),\n    subsidence_rate=10u\"m/Myr\")\n\nconst PRODUCTION1 = reshape(\n    hcat(ones(Amount, 10),\n        ones(Amount, 10),\n        cumsum(ones(Amount, 10)) / 5.5)',\n    1, 3, 1, 10)\n\nconst DISINTEGRATION1 = reshape(\n    hcat(zeros(Amount, 10),\n        1:10 .|> (x -> x < 4 || x > 6 ? 0.0u\"m\" : 2.0u\"m\"),\n        zeros(Amount, 10))',\n    1, 3, 1, 10)\n\nconst ELEVATION1 = cat(\n    [0.0, 0.0, 0.0]u\"m\",\n    cumsum(PRODUCTION1 .- DISINTEGRATION1; dims=4)[1, :, :, :];\n    dims=3)\n\nconst DATA1 = Data(\n    disintegration=DISINTEGRATION1,\n    production=PRODUCTION1,\n    deposition=PRODUCTION1 .- DISINTEGRATION1,\n    sediment_elevation=ELEVATION1)\n\nconst GRID_LOCATIONS1 = [(1, 1), (2, 1), (3, 1)]","category":"page"},{"location":"data-export/#Sediment-Accumulation","page":"CSV Export","title":"Sediment Accumulation","text":"","category":"section"},{"location":"data-export/#Writing-CSV-files","page":"CSV Export","title":"Writing CSV files","text":"","category":"section"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"The CSV.jl module lets us write a DataFrame to CSV, but doesn't work so well in combination with Units.","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"<div class=\"noweb-label\">⪡export-function⪢≣</div>","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"\"\"\"\n    unitful_headers(df::DataFrame)\n\nGets a string representation for all column names including their unit.\nReturns a `Vector{String}`.\n\"\"\"\nunitful_headers(df::DataFrame) =\n    [\"$(e.variable) [$(unit(e.eltype))]\" for e in eachrow(describe(df))]\n\n\"\"\"\n    ustrip(df::DataFrame)\n\nStrip units from a `DataFrame`. Returns a new `DataFrame`.\n\"\"\"\nUnitful.ustrip(df::DataFrame) =\n    DataFrame((e.variable => df[!, e.variable] / unit(e.eltype)\n               for e in eachrow(describe(df)))...)\n\n\"\"\"\n    write_unitful_csv(io::IO, df::DataFrame)\n\nWrite a CSV from a `DataFrame` with `Unitful` units. The units will be\nrepresented in the CSV header, and stripped from the individual values.\n\"\"\"\nwrite_unitful_csv(io, df::DataFrame) =\n    write_csv(io, ustrip(df), header=unitful_headers(df))","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"We may test that writing and reading the CSV back, gives the same result:","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"<div class=\"noweb-label\">⪡export-test⪢≣</div>","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"@testset \"Hither and Dither\" begin\n    io = IOBuffer(UInt8[], read=true, write=true)\n    data_export(CSVExportTrait{:sediment_accumulation_curve}, io, HEADER1, DATA1, GRID_LOCATIONS1)\n    seek(io, 0)\n    df = read_csv(io, DataFrame)\n    rename!(df, (n => split(n)[1] for n in names(df))...)\n    @test df.sac1 ≈ ELEVATION1[1, 1, :] / u\"m\"\n    @test df.sac2 ≈ ELEVATION1[2, 1, :] / u\"m\"\n    @test df.sac3 ≈ ELEVATION1[3, 1, :] / u\"m\"\nend","category":"page"},{"location":"data-export/#Age-depth-model","page":"CSV Export","title":"Age-depth model","text":"","category":"section"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"<div class=\"noweb-label\">⪡export-function⪢≣</div>","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"Base.accumulate(f) = (args...; kwargs...) -> accumulate(f, args...; kwargs...)\n\n\"\"\"\n    age_depth_model(sediment_accumulation_curve::Vector)\n    age_depth_model(sediment_accumulation_curve::DataFrame)\n\nCompute the ADM from the SAC. Implemented as:\n\n    reverse ∘ accumulate(min) ∘ reverse\n\nThe `DataFrame` version `select`s SAC columns, transformed into ADM.\n\"\"\"\nage_depth_model(sac::Vector{T}) where {T} = sac |> reverse |> accumulate(min) |> reverse\nage_depth_model(sac_df::DataFrame) =\n    let sac_cols = filter(contains(\"sac\"), names(sac_df)),\n        adm_cols = replace.(sac_cols, \"sac\" => \"adm\")\n\n        select(sac_df, \"time\", (sac => age_depth_model => adm\n                                for (sac, adm) in zip(sac_cols, adm_cols))...)\n    end","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"We test that the constructed ADM is monotonic increasing in time:","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"<div class=\"noweb-label\">⪡export-test⪢≣</div>","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"@testset \"ADM Monotonicity\" begin\n    sac = extract_sac(HEADER1, DATA1, GRID_LOCATIONS1)\n    adm = sac |> age_depth_model\n\n    @test sac.sac1 == adm.adm1\n    @test sac.sac3 == adm.adm3\n    @test sac.sac2 != adm.adm2\n\n    @test all(adm.adm2[2:end] .- adm.adm2[1:end-1] .>= 0.0u\"m\")\nend","category":"page"},{"location":"data-export/#Stratigraphic-Column","page":"CSV Export","title":"Stratigraphic Column","text":"","category":"section"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"<div class=\"noweb-label\">⪡export-function⪢≣</div>","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"\"\"\"\n    stratigraphic_column(header::Header, data::Data, loc::NTuple{2,Int}, facies::Int)\n\nCompute the Stratigraphic Column for a given grid position `loc` and `facies` index.\nReturns an `Array{Quantity, 2}` where the `Quantity` is in units of meters.\n\"\"\"\nfunction stratigraphic_column(header::Header, data::Data, loc::NTuple{2,Int}, facies::Int)\n    dc = DataColumn(\n        loc,\n        data.disintegration[:, loc..., :],\n        data.production[:, loc..., :],\n        data.deposition[:, loc..., :],\n        data.sediment_elevation[loc..., :])\n    return stratigraphic_column(header, dc, facies)\nend\n\nfunction stratigraphic_column(header::Header, data::DataColumn, facies::Int)\n    n_times = length(header.axes.t) - 1\n    sc = zeros(typeof(1.0u\"m\"), n_times)\n\n    for ts = 1:n_times\n        acc = data.deposition[facies, ts] - data.disintegration[facies, ts]\n        if acc > 0.0u\"m\"\n            sc[ts] = acc\n            continue\n        end\n        ts_down = ts - 1\n        while acc < 0.0u\"m\"\n            ts_down < 1 && break\n            if -acc < sc[ts_down]\n                sc[ts_down] -= acc\n                break\n            else\n                acc += sc[ts_down]\n                sc[ts_down] = 0.0u\"m\"\n            end\n            ts_down -= 1\n        end\n    end\n\n    sc\nend","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"The stratigraphic column should sum to the age-depth model.","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"<div class=\"noweb-label\">⪡export-test⪢≣</div>","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"@testset \"SC sum equals ADM\" begin\n    sac = extract_sac(HEADER1, DATA1, GRID_LOCATIONS1)\n    adm = sac |> age_depth_model\n    sc = extract_sc(HEADER1, DATA1, GRID_LOCATIONS1)\n    @test [0.0u\"m\"; cumsum(sc.sc1_f1)] ≈ adm.adm1\n    @test [0.0u\"m\"; cumsum(sc.sc2_f1)] ≈ adm.adm2\n    @test [0.0u\"m\"; cumsum(sc.sc3_f1)] ≈ adm.adm3\nend","category":"page"},{"location":"data-export/#Dispatch","page":"CSV Export","title":"Dispatch","text":"","category":"section"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"<div class=\"noweb-label\">⪡export-function⪢≣</div>","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"struct CSVExportTrait{S} end\n\nfunction data_export(spec::T, filepath::String) where {T<:ExportSpecification}\n    data_export(spec, read_data(filepath)...)\nend\n\nfunction data_export(spec::CSV, header::Header, data::Data)\n    for (key, filename) in spec.output_files\n        if key == :metadata\n            md = Dict(\n                \"global\" => Dict(\n                    \"tag\" => header.tag,\n                    \"subsidence_rate\" => header.subsidence_rate,\n                    \"time_steps\" => header.time_steps,\n                    \"delta_t\" => header.Δt),\n                \"locations\" => [Dict(\n                    \"number\" => i,\n                    \"x\" => header.axes.x[loc[1]],\n                    \"y\" => header.axes.y[loc[2]],\n                    \"bedrock_elevation\" => header.bedrock_elevation[loc...])\n                                for (i, loc) in enumerate(spec.grid_locations)],\n                \"files\" => spec.output_files)\n            open(filename, \"w\") do io\n                TOML.print(io, md) do obj\n                    if obj isa Quantity\n                        [ustrip(obj), string(unit(obj))]\n                    else\n                        obj\n                    end\n                end\n            end\n            continue\n        end\n        open(filename, \"w\") do io\n            data_export(CSVExportTrait{key}, io, header, data, spec.grid_locations)\n        end\n    end\nend\n\nfunction data_export(::Type{CSVExportTrait{S}}, args...) where {S}\n    error(\"Unknown CSV data export: `$(S)`\")\nend\n\nfunction data_export(::Type{CSVExportTrait{:sediment_accumulation_curve}},\n    io::IO, header::Header, data::Data, grid_locations::Vector{NTuple{2,Int}})\n\n    sac = extract_sac(header, data, grid_locations)\n    write_unitful_csv(io, sac)\nend\n\nfunction data_export(::Type{CSVExportTrait{:age_depth_model}},\n    io::IO, header::Header, data::Data, grid_locations::Vector{NTuple{2,Int}})\n\n    adm = extract_sac(header, data, grid_locations) |> age_depth_model\n    write_unitful_csv(io, adm)\nend\n\nfunction data_export(::Type{CSVExportTrait{:stratigraphic_column}},\n    io::IO, header::Header, data::Data, grid_locations::Vector{NTuple{2,Int}})\n\n    sc = extract_sc(header, data, grid_locations)\n    write_unitful_csv(io, sc)\nend\n\n\"\"\"\n    extract_sac(header::Header, data::Data, grid_locations::Vector{NTuple{2,Int}})\n\nExtract Sediment Accumumlation Curve (SAC) from the data. The SAC is directly copied from\n`data.sediment_elevation`. Returns a `DataFrame` with `time` and `sac<n>` columns where `<n>`\nis in the range `1:length(grid_locations)`.\n\"\"\"\nfunction extract_sac(header::Header, data::Data, grid_locations::Vector{NTuple{2,Int}})\n    DataFrame(:time => header.axes.t[1:end],\n        (Symbol(\"sac$(i)\") => data.sediment_elevation[loc..., :]\n         for (i, loc) in enumerate(grid_locations))...)\nend\n\n\"\"\"\n    extract_sc(header::Header, data::Data, grid_locations::Vector{NTuple{2,Int}})\n\nExtract Stratigraphic Column (SC) from the data. Returns a `DataFrame` with `time` and `sc<n>` columns where `<n>`\nis in the range `1:length(grid_locations)`.\n\"\"\"\nfunction extract_sc(header::Header, data::Data, grid_locations::Vector{NTuple{2,Int}})\n    n_facies = size(data.production)[1]\n    DataFrame(\"time\" => header.axes.t[1:end-1],\n        (\"sc$(i)_f$(f)\" => stratigraphic_column(header, data, loc, f)\n         for f in 1:n_facies, (i, loc) in enumerate(grid_locations))...)\nend","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"<div class=\"noweb-label\">file:<i>src/Export.jl</i></div>","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"module Export\n\nexport Data, DataSlice, DataColumn, Header, CSV, read_data, read_slice, data_export\n\nusing HDF5\nimport CSV: write as write_csv\nusing TOML\n\nusing Unitful\nusing DataFrames\nusing .Iterators: flatten\n\nconst Rate = typeof(1.0u\"m/Myr\")\nconst Amount = typeof(1.0u\"m\")\nconst Length = typeof(1.0u\"m\")\nconst Time = typeof(1.0u\"Myr\")\n\nconst na = [CartesianIndex()]\n\n<<export-specification>>\n\n@kwdef struct Axes\n    x::Vector{Length}\n    y::Vector{Length}\n    t::Vector{Time}\nend\n\n@kwdef struct Header\n    tag::String\n    axes::Axes\n    Δt::Time\n    write_interval::Int\n    time_steps::Int\n    bedrock_elevation::Matrix{Amount}\n    sea_level::Vector{Length}\n    subsidence_rate::Rate\nend\n\n@kwdef struct Data\n    disintegration::Array{Amount,4}\n    production::Array{Amount,4}\n    deposition::Array{Amount,4}\n    sediment_elevation::Array{Amount,3}\nend\n\nstruct DataSlice\n    slice::NTuple{2,Union{Colon,Int}}\n    disintegration::Array{Amount,3}\n    production::Array{Amount,3}\n    deposition::Array{Amount,3}\n    sediment_elevation::Array{Amount,2}\nend\n\nstruct DataColumn\n    slice::NTuple{2,Int}\n    disintegration::Array{Amount,2}\n    production::Array{Amount,2}\n    deposition::Array{Amount,2}\n    sediment_elevation::Array{Amount,1}\nend\n\nfunction read_header(fid)\n    attrs = HDF5.attributes(fid[\"input\"])\n\n    axes = Axes(\n        fid[\"input/x\"][] * u\"m\",\n        fid[\"input/y\"][] * u\"m\",\n        fid[\"input/t\"][] * u\"Myr\")\n\n    return Header(\n        attrs[\"tag\"][],\n        axes,\n        attrs[\"delta_t\"][] * u\"Myr\",\n        attrs[\"write_interval\"][],\n        attrs[\"time_steps\"][],\n        fid[\"input/bedrock_elevation\"][] * u\"m\",\n        fid[\"input/sea_level\"][] * u\"m\",\n        attrs[\"subsidence_rate\"][] * u\"m/Myr\")\nend\n\nfunction read_data(filename)\n    h5open(filename) do fid\n        header = read_header(fid)\n        data = Data(\n            fid[\"disintegration\"][] * u\"m\",\n            fid[\"production\"][] * u\"m\",\n            fid[\"deposition\"][] * u\"m\",\n            fid[\"sediment_height\"][] * u\"m\")\n        header, data\n    end\nend\n\nread_slice(fid::HDF5.File, slice...) = DataSlice(\n    slice,\n    fid[\"disintegration\"][:, slice..., :] * u\"m\",\n    fid[\"production\"][:, slice..., :] * u\"m\",\n    fid[\"deposition\"][:, slice..., :] * u\"m\",\n    fid[\"sediment_height\"][slice..., :] * u\"m\")\n\nfunction read_slice(filename, slice...)\n    h5open(filename) do fid\n        header = read_header(fid)\n        data = read_slice(fid, slice...)\n        header, data\n    end\nend\n\n<<export-function>>\n\nend","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"<div class=\"noweb-label\">file:<i>test/ExportSpec.jl</i></div>","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"using CarboKitten.Export: Axes, Header, Data, data_export, CSVExportTrait,\n    age_depth_model, extract_sac, extract_sc, CSV\nusing CSV: read as read_csv\nusing TOML\nusing DataFrames\nusing Unitful\n\nconst Amount = typeof(1.0u\"m\")\n\n<<export-test-case>>\n\n@testset \"Data Export\" begin\n    <<export-test>>\n\n    @testset \"Write to folder\" begin\n        mktempdir() do path\n            spec = CSV(GRID_LOCATIONS1,\n                :sediment_accumulation_curve => joinpath(path, \"sac.csv\"),\n                :age_depth_model => joinpath(path, \"adm.csv\"),\n                :stratigraphic_column => joinpath(path, \"sc.csv\"),\n                :metadata => joinpath(path, \"metadata.toml\"))\n            data_export(spec, HEADER1, DATA1)\n            for f in values(spec.output_files)\n                @test isfile(f)\n            end\n\n            metadata = TOML.parsefile(spec.output_files[:metadata])\n            @test IdDict(Symbol(k) => v for (k, v) in metadata[\"files\"]) == spec.output_files\n            @test length(metadata[\"locations\"]) == 3\n            adm = read_csv(spec.output_files[:age_depth_model], DataFrame)\n            rename!(adm, (n => split(n)[1] for n in names(adm))...)\n            @test adm == ustrip(extract_sac(HEADER1, DATA1, GRID_LOCATIONS1) |> age_depth_model)\n        end\n    end\nend","category":"page"},{"location":"data-export/","page":"CSV Export","title":"CSV Export","text":"","category":"page"},{"location":"cases/tabular-sea-level/#Tabular-sea-levels","page":"Tabular Sea Levels","title":"Tabular sea levels","text":"","category":"section"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"In CarboKitten, the sea-level curve is given as a function of time. This means you can generate sea levels automatically, or if you like interpolate them on a table. In this demo, we show how we can read values from a file and interpolate those for input into the CarboKitten ALCAP model.","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"<div class=\"noweb-label\">⪡tabular-sea-level⪢≣</div>","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"using CarboKitten.Components.Common\nusing CarboKitten.Model.ALCAP2","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"CarboKitten has convenience functions for reading tabular data, both TSV and CSV are supported.","category":"page"},{"location":"cases/tabular-sea-level/#The-data","page":"Tabular Sea Levels","title":"The data","text":"","category":"section"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"In this example we load the sea level data compilation from Miller 2020 [2].","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"(Image: Miller 2020 sea level data)","category":"page"},{"location":"cases/tabular-sea-level/#Loading","page":"Tabular Sea Levels","title":"Loading","text":"","category":"section"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"For this example we have a tab-separated data file, that is distributed with CarboKitten. However, you can have filename point to any tabular data on your filesystem. ","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"You can use the readdlm function in DelimitedFiles to read most text based table formats. See the DataFrames documentation to find out how to read from most popular data file formats.","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"<div class=\"noweb-label\">⪡tabular-sea-level⪢≣</div>","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"function miller_2020()\n    dir = artifact_dir()\n    filename = joinpath(dir, \"Miller2020\", \"Cenozoic_sea_level_reconstruction.tab\")\n\n    data, header = readdlm(filename, '\\t', header=true)\n    return DataFrame(\n        time=-data[:,4] * u\"kyr\",\n        sealevel=data[:,7] * u\"m\",\n        refkey=categorical(data[:,2]),\n        reference=categorical(data[:,3]))\nend","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"In this example we'll only use the Lisiecky data set.","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"using CarboKitten.DataSets: miller_2020\nusing DataFrames\n\ndf = miller_2020()\nlevels(df.refkey)","category":"page"},{"location":"cases/tabular-sea-level/#Interpolating","page":"Tabular Sea Levels","title":"Interpolating","text":"","category":"section"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"There are many ways to interpolate the data we have. We will now stick to the package Interpolations and use the linear interpolator in there. ","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"<div class=\"noweb-label\">⪡tabular-sea-level⪢≣</div>","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"function sea_level()\n    df = miller_2020()\n    lisiecki_df = df[df.refkey .== \"846 Lisiecki\", :]\n    sort!(lisiecki_df, [:time])\n\n    return linear_interpolation(\n        lisiecki_df.time,\n        lisiecki_df.sealevel)\nend","category":"page"},{"location":"cases/tabular-sea-level/#Inspecting-our-interval","page":"Tabular Sea Levels","title":"Inspecting our interval","text":"","category":"section"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"We will be running a simulation from 2 million years BA, to 1 million years BA with a time step of 200 years.","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"<div class=\"noweb-label\">⪡tabular-sea-level⪢≣</div>","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"const TIME_PROPERTIES = TimeProperties(\n    t0 = -2.0u\"Myr\", \n    Δt = 200.0u\"yr\",\n    steps = 5000\n)","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"(Image: Our selection from the Miller/Lisiecki dataset)","category":"page"},{"location":"cases/tabular-sea-level/#Other-parameters","page":"Tabular Sea Levels","title":"Other parameters","text":"","category":"section"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"We keep the facies parameters the same as in our other examples. However, because the sea level is fluctuating quite a bit more than in our other examples, we increased the slope two-fold so that the resulting platform fits in our box.","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"<div class=\"noweb-label\">⪡tabular-sea-level⪢≣</div>","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"const PATH = \"data/output\"\nconst TAG = \"lisiecki-sea-level\"\n\nconst FACIES = [\n    ALCAP.Facies(\n        viability_range=(4, 10),\n        activation_range=(6, 10),\n        maximum_growth_rate=500u\"m/Myr\",\n        extinction_coefficient=0.8u\"m^-1\",\n        saturation_intensity=60u\"W/m^2\",\n        diffusion_coefficient=10000u\"m\"),\n    ALCAP.Facies(\n        viability_range=(4, 10),\n        activation_range=(6, 10),\n        maximum_growth_rate=400u\"m/Myr\",\n        extinction_coefficient=0.1u\"m^-1\",\n        saturation_intensity=60u\"W/m^2\",\n        diffusion_coefficient=5000u\"m\"),\n    ALCAP.Facies(\n        viability_range=(4, 10),\n        activation_range=(6, 10),\n        maximum_growth_rate=100u\"m/Myr\",\n        extinction_coefficient=0.005u\"m^-1\",\n        saturation_intensity=60u\"W/m^2\",\n        diffusion_coefficient=7000u\"m\")\n]\n\nconst INPUT = ALCAP.Input(\n    tag=\"$TAG\",\n    box=Box{Shelf}(grid_size=(100, 50), phys_scale=150.0u\"m\"),\n    time=TIME_PROPERTIES,\n    ca_interval=1,\n    bedrock_elevation=(x, y) -> -x / 200.0 - 100.0u\"m\",\n    sea_level=sea_level(),\n    subsidence_rate=50.0u\"m/Myr\",\n    disintegration_rate=50.0u\"m/Myr\",\n    insolation=400.0u\"W/m^2\",\n    sediment_buffer_size=50,\n    depositional_resolution=0.5u\"m\",\n    facies=FACIES)\n\nfunction main()\n    CarboKitten.init()\n    H5Writer.run(Model{ALCAP}, INPUT, \"$(PATH)/$(TAG).h5\")\nend","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"(Image: Summary plot)","category":"page"},{"location":"cases/tabular-sea-level/#Running-the-model","page":"Tabular Sea Levels","title":"Running the model","text":"","category":"section"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"<div class=\"noweb-label\">file:<i>examples/tabular-sea-level/run.jl</i></div>","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"#| creates: data/output/lisiecki-sea-level.h5\n\nmodule TabularSeaLevel\n\nusing CarboKitten\nusing CarboKitten.Model: H5Writer, ALCAP2 as ALCAP\n\nusing DelimitedFiles: readdlm\nusing DataFrames\nusing CarboKitten.DataSets: artifact_dir\nusing Interpolations\nusing CategoricalArrays\n\n<<tabular-sea-level>>\n\nend\n\nTabularSeaLevel.main()","category":"page"},{"location":"cases/tabular-sea-level/#Plotting-code","page":"Tabular Sea Levels","title":"Plotting code","text":"","category":"section"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"<div class=\"noweb-label\">file:<i>examples/tabular-sea-level/plot.jl</i></div>","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"#| requires: data/output/lisiecki-sea-level.h5\n#| creates:\n#|      - docs/src/_fig/miller-sea-level.svg\n#|      - docs/src/_fig/lisiecki-selection.svg\n#|      - docs/src/_fig/lisiecki-sea-level-summary.png\n#| collect: figures\n\nmodule PlotTabularSeaLevel\n\nusing CarboKitten.Components.Common\nusing CarboKitten.DataSets: artifact_dir\nusing CarboKitten.Components.TimeIntegration: write_times\nusing CarboKitten.Visualization: summary_plot\nusing CarboKitten.Model: ALCAP2 as ALCAP\nusing CarboKitten.Boxes: Box\n\nusing DelimitedFiles: readdlm\nusing CairoMakie\nusing DataFrames\nusing Unitful\nusing Interpolations\nusing CategoricalArrays\n\n<<tabular-sea-level>>\n\nfunction plot_miller_data()\n    df = miller_2020()\n    fig = Figure(size=(1000,300))\n    ax = Axis(fig[1, 1]; xlabel=\"time (Ma BP)\", ylabel=\"sealevel (m)\")\n\n    for ref in levels(df.reference)\n        subset = df[df.reference .== ref,:]\n        lines!(ax, subset.time |> in_units_of(u\"Myr\"), subset.sealevel |> in_units_of(u\"m\"), label=ref)\n    end\n    fig[1, 2] = Legend(fig, ax)\n\n    save(\"docs/src/_fig/miller-sea-level.svg\", fig)\n    fig\nend\n\nfunction plot_lisiecki_data()\n    df = miller_2020()\n    lisiecki_df = df[df.refkey .== \"846 Lisiecki\", :]\n    sort!(lisiecki_df, [:time])\n\n    sl = sea_level()\n\n    fig = Figure(size=(1000, 400))\n    ax = Axis(fig[1, 1]; xlabel=\"time (Ma BP)\", ylabel=\"sealevel (m)\", limits=((-2.2, -0.8), nothing))\n\n\n    times = write_times(TIME_PROPERTIES)\n    lines!(ax, times |> in_units_of(u\"Myr\"), sl.(times) |> in_units_of(u\"m\"), label=\"interpolated sealevel\", color=Makie.wong_colors()[2])\n\n    scatter!(ax, lisiecki_df.time |> in_units_of(u\"Myr\"), lisiecki_df.sealevel |> in_units_of(u\"m\"), label=\"Lisiecki data\")\n    fig[1,2] = Legend(fig, ax)\n\n    save(\"docs/src/_fig/lisiecki-selection.svg\", fig)\n    fig\nend\n\nfunction plot_result()\n    fig = summary_plot(\"data/output/lisiecki-sea-level.h5\")\n    save(\"docs/src/_fig/lisiecki-sea-level-summary.png\", fig)\nend\n\nend\n\nPlotTabularSeaLevel.plot_miller_data()\nPlotTabularSeaLevel.plot_lisiecki_data()\nPlotTabularSeaLevel.plot_result()","category":"page"},{"location":"cases/tabular-sea-level/","page":"Tabular Sea Levels","title":"Tabular Sea Levels","text":"","category":"page"},{"location":"components/waterdepth/#Water-Depth","page":"Water Depth","title":"Water Depth","text":"","category":"section"},{"location":"components/waterdepth/","page":"Water Depth","title":"Water Depth","text":"<div class=\"component-dag\" style=\"overflow: scroll\"><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.50.0 (20211204.2007)\n -->\n<!-- Pages: 1 -->\n<svg width=\"350pt\" height=\"240pt\"\n viewBox=\"0.00 0.00 350.00 240.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 236)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-236 346,-236 346,4 -4,4\"/>\n<!-- TimeIntegration -->\n<g id=\"node1\" class=\"node\">\n<title>TimeIntegration</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150,-232C150,-232 12,-232 12,-232 6,-232 0,-226 0,-220 0,-220 0,-165 0,-165 0,-159 6,-153 12,-153 12,-153 150,-153 150,-153 156,-153 162,-159 162,-165 162,-165 162,-220 162,-220 162,-226 156,-232 150,-232\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-201.5 155,-201.5 \"/>\n<text text-anchor=\"start\" x=\"15.5\" y=\"-210.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">TimeIntegration</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"7,-178.5 7,-201.5 54,-201.5 54,-178.5 7,-178.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-178.5 54,-178.5 54,-201.5 7,-201.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-186.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"54,-178.5 54,-201.5 108,-201.5 108,-178.5 54,-178.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"54,-178.5 54,-201.5 108,-201.5 108,-178.5 54,-178.5\"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-186.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"108,-178.5 108,-201.5 155,-201.5 155,-178.5 108,-178.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"155,-201.5 108,-201.5 108,-178.5 155,-178.5 \"/>\n<text text-anchor=\"start\" x=\"112\" y=\"-186.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"54,-159.5 54,-178.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-166.5\" font-family=\"monospace\" font-size=\"10.00\">time</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"108,-159.5 108,-178.5 \"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-166.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"111\" y=\"-166.5\" font-family=\"monospace\" font-size=\"10.00\">step</text>\n</g>\n<!-- WaterDepth -->\n<g id=\"node2\" class=\"node\">\n<title>WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M297,-117C297,-117 45,-117 45,-117 39,-117 33,-111 33,-105 33,-105 33,-12 33,-12 33,-6 39,0 45,0 45,0 297,0 297,0 303,0 309,-6 309,-12 309,-12 309,-105 309,-105 309,-111 303,-117 297,-117\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"40,-86.5 302,-86.5 \"/>\n<text text-anchor=\"start\" x=\"123.5\" y=\"-95.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">WaterDepth</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"40,-63.5 40,-86.5 151,-86.5 151,-63.5 40,-63.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"40,-63.5 151,-63.5 151,-86.5 40,-86.5 \"/>\n<text text-anchor=\"start\" x=\"44\" y=\"-71.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"151,-63.5 151,-86.5 205,-86.5 205,-63.5 151,-63.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"151,-63.5 151,-86.5 205,-86.5 205,-63.5 151,-63.5\"/>\n<text text-anchor=\"start\" x=\"155\" y=\"-71.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"205,-63.5 205,-86.5 302,-86.5 302,-63.5 205,-63.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"302,-86.5 205,-86.5 205,-63.5 302,-63.5 \"/>\n<text text-anchor=\"start\" x=\"209\" y=\"-71.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"151,-44.5 151,-63.5 \"/>\n<text text-anchor=\"start\" x=\"44\" y=\"-51.5\" font-family=\"monospace\" font-size=\"10.00\">sea_level</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"205,-44.5 205,-63.5 \"/>\n<text text-anchor=\"start\" x=\"155\" y=\"-51.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"208\" y=\"-51.5\" font-family=\"monospace\" font-size=\"10.00\">sediment_height</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"151,-25.5 151,-44.5 \"/>\n<text text-anchor=\"start\" x=\"44\" y=\"-32.5\" font-family=\"monospace\" font-size=\"10.00\">bedrock_elevation</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"205,-25.5 205,-44.5 \"/>\n<text text-anchor=\"start\" x=\"155\" y=\"-32.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"208\" y=\"-32.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"151,-6.5 151,-25.5 \"/>\n<text text-anchor=\"start\" x=\"44\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\">subsidence_rate</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"205,-6.5 205,-25.5 \"/>\n<text text-anchor=\"start\" x=\"155\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"208\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- TimeIntegration&#45;&gt;WaterDepth -->\n<g id=\"edge1\" class=\"edge\">\n<title>TimeIntegration&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M107.27,-152.97C113.07,-144.46 119.38,-135.21 125.69,-125.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"128.73,-127.7 131.48,-117.47 122.95,-123.76 128.73,-127.7\"/>\n</g>\n<!-- Boxes -->\n<g id=\"node3\" class=\"node\">\n<title>Boxes</title>\n<path fill=\"none\" stroke=\"black\" d=\"M330,-232C330,-232 192,-232 192,-232 186,-232 180,-226 180,-220 180,-220 180,-165 180,-165 180,-159 186,-153 192,-153 192,-153 330,-153 330,-153 336,-153 342,-159 342,-165 342,-165 342,-220 342,-220 342,-226 336,-232 330,-232\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"187,-201.5 335,-201.5 \"/>\n<text text-anchor=\"start\" x=\"237.5\" y=\"-210.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Boxes</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"187,-178.5 187,-201.5 234,-201.5 234,-178.5 187,-178.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"187,-178.5 234,-178.5 234,-201.5 187,-201.5 \"/>\n<text text-anchor=\"start\" x=\"191\" y=\"-186.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"234,-178.5 234,-201.5 288,-201.5 288,-178.5 234,-178.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"234,-178.5 234,-201.5 288,-201.5 288,-178.5 234,-178.5\"/>\n<text text-anchor=\"start\" x=\"238\" y=\"-186.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"288,-178.5 288,-201.5 335,-201.5 335,-178.5 288,-178.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"335,-201.5 288,-201.5 288,-178.5 335,-178.5 \"/>\n<text text-anchor=\"start\" x=\"292\" y=\"-186.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"234,-159.5 234,-178.5 \"/>\n<text text-anchor=\"start\" x=\"191\" y=\"-166.5\" font-family=\"monospace\" font-size=\"10.00\">box</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"288,-159.5 288,-178.5 \"/>\n<text text-anchor=\"start\" x=\"238\" y=\"-166.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"291\" y=\"-166.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- Boxes&#45;&gt;WaterDepth -->\n<g id=\"edge2\" class=\"edge\">\n<title>Boxes&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M234.73,-152.97C228.93,-144.46 222.62,-135.21 216.31,-125.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"219.05,-123.76 210.52,-117.47 213.27,-127.7 219.05,-123.76\"/>\n</g>\n</g>\n</svg>\n</div>","category":"page"},{"location":"components/waterdepth/","page":"Water Depth","title":"Water Depth","text":"The WaterDepth module computes the water depth, given the bedrock elevation, sea level curve, subsidence rate and current sediment height.","category":"page"},{"location":"components/waterdepth/#Input","page":"Water Depth","title":"Input","text":"","category":"section"},{"location":"components/waterdepth/","page":"Water Depth","title":"Water Depth","text":"bedrock_elevation(x, y) (a.k.a. initial depth) should be a function taking two coordinates in units of meters, returning an elevation also in meters.\nsea_level(t) should be a function taking a time in millions of years (Myr) returning the eustatic sealevel. This could also be an interpolated table.\nsubsidence_rate a constant rate of subsidence in m/Myr.","category":"page"},{"location":"components/waterdepth/","page":"Water Depth","title":"Water Depth","text":"The signs of these quantities should be such that the following equation holds:","category":"page"},{"location":"components/waterdepth/","page":"Water Depth","title":"Water Depth","text":"T + E = S + W","category":"page"},{"location":"components/waterdepth/","page":"Water Depth","title":"Water Depth","text":"saying Tectonic subsidence plus Eustatic sea-level change equals Sedimentation plus change in Water depth.","category":"page"},{"location":"components/waterdepth/","page":"Water Depth","title":"Water Depth","text":"<div class=\"noweb-label\">file:<i>src/Components/WaterDepth.jl</i></div>","category":"page"},{"location":"components/waterdepth/","page":"Water Depth","title":"Water Depth","text":"@compose module WaterDepth\n@mixin TimeIntegration, Boxes\nusing ..Common\nusing HDF5\nusing CarboKitten.Boxes: axes\n\nexport water_depth\n\n@kwdef struct Input <: AbstractInput\n    sea_level          # function (t::Time) -> Length\n    bedrock_elevation  # function (x::Location, y::Location) -> Length\n    subsidence_rate::Rate\nend\n\n@kwdef mutable struct State <: AbstractState\n    sediment_height::Matrix{Height}\nend\n\nfunction initial_state(input::AbstractInput)\n    return State(step=0, sediment_height=zeros(Height, input.box.grid_size...))\nend\n\nfunction water_depth(input::AbstractInput)\n    x, y = axes(input.box)\n    eta0 = input.bedrock_elevation.(x, y')\n\n    return function (state::AbstractState)\n        t = TimeIntegration.time(input, state)\n        return input.sea_level(t) .- eta0 .+\n               (input.subsidence_rate * t) .- state.sediment_height\n    end\nend\n\nfunction write_header(fid, input::AbstractInput)\n    gid = fid[\"input\"]\n    attr = attributes(gid)\n    x, y = Common.axes(input.box)\n    t = TimeIntegration.write_times(input)\n\n    gid[\"bedrock_elevation\"] = input.bedrock_elevation.(x, y') |> in_units_of(u\"m\")\n    gid[\"sea_level\"] = input.sea_level.(t) .|> in_units_of(u\"m\")\n    attr[\"subsidence_rate\"] = input.subsidence_rate |> in_units_of(u\"m/Myr\")\nend\n\nfunction create_dataset(fid, input::AbstractInput)\n    return HDF5.create_dataset(fid, \"sediment_height\", datatype(Float64),\n        dataspace(input.box.grid_size..., input.time.steps),\n        chunk=(input.box.grid_size..., 1))\nend\n\nend","category":"page"},{"location":"components/waterdepth/","page":"Water Depth","title":"Water Depth","text":"","category":"page"},{"location":"utility/#Utility-functions","page":"Utility","title":"Utility functions","text":"","category":"section"},{"location":"utility/#Select-Iterator","page":"Utility","title":"Select Iterator","text":"","category":"section"},{"location":"utility/","page":"Utility","title":"Utility","text":"In many cases our model is updating some state as an iterator. I want to be able to select arbitrary slices from that iterator. The Select object contains the main iterable and a selection iterable that should yield integers. When iterated upon, we repeatedly use Iterators.dropwhile to get to the next index.","category":"page"},{"location":"utility/","page":"Utility","title":"Utility","text":"<div class=\"noweb-label\">file:<i>src/Utility.jl</i></div>","category":"page"},{"location":"utility/","page":"Utility","title":"Utility","text":"module Utility\n\nexport select, in_units_of\nusing Unitful\n\nstruct Select\n    iter\n    selection\nend\n\nfunction select(it, sel)\n    Select(enumerate(it), sel)\nend\n\nfunction Base.iterate(s::Select)\n    x = iterate(s.selection)\n    if x !== nothing\n        (idx, selstate) = x\n        ((_, value), rest) = Iterators.peel(Iterators.dropwhile(((i, y),) -> i != idx, s.iter))\n        return (value, (selstate, rest))\n    else\n        return nothing\n    end\nend\n\nfunction Base.iterate(s::Select, state)\n    (selstate, rest) = state\n    x = iterate(s.selection, selstate)\n    if x !== nothing\n        (idx, selstate) = x\n        ((_, value), rest) = Iterators.peel(Iterators.dropwhile(((i, y),) -> i != idx, s.iter))\n        return (value, (selstate, rest))\n    else\n        return nothing\n    end\nend\n\n<<utility>>\n\nend","category":"page"},{"location":"utility/#Range-finder","page":"Utility","title":"Range finder","text":"","category":"section"},{"location":"utility/","page":"Utility","title":"Utility","text":"The RangeFinder iterator is used in our algorithm to trace hiatus in the sediment history. This iterator consumes an iterator of booleans and yields values of type UnitRange, giving all ranges for which the input sequence is true consecutively.","category":"page"},{"location":"utility/","page":"Utility","title":"Utility","text":"<div class=\"noweb-label\">⪡utility-spec⪢≣</div>","category":"page"},{"location":"utility/","page":"Utility","title":"Utility","text":"a = [false, true, true, false, true]\n@test collect(find_ranges(a)) == [2:3, 5:5]","category":"page"},{"location":"utility/","page":"Utility","title":"Utility","text":"<div class=\"noweb-label\">⪡utility⪢≣</div>","category":"page"},{"location":"utility/","page":"Utility","title":"Utility","text":"struct RangeFinder\n\tv::AbstractVector{Bool}\nend\n\nBase.iterate(r::RangeFinder) = iterate(r, 1)\n\nfunction Base.iterate(r::RangeFinder, i::Union{Int, Nothing})\n\tisnothing(i) && return nothing\n\ta = findnext(r.v, i)\n\tisnothing(a) && return nothing\n\tb = findnext(!, r.v, a)\n\tisnothing(b) && return (a:length(r.v)), nothing\n\treturn (a:b-1), b\nend\n\nBase.eltype(r::RangeFinder) = UnitRange{Int}\nBase.IteratorSize(::Type{RangeFinder}) = Base.SizeUnknown()\n\n\"\"\"\n    find_ranges(v::AbstractVector{Bool})\n\nTake a vector of bools, returns an iterator over all ranges for\nwhich the vector is `true`.\n\"\"\"\nfind_ranges(v::AbstractVector{Bool}) = RangeFinder(v)\n\nexport find_ranges","category":"page"},{"location":"utility/#Tagging-a-sequence-of-vectors","page":"Utility","title":"Tagging a sequence of vectors","text":"","category":"section"},{"location":"utility/","page":"Utility","title":"Utility","text":"The enumerate_seq iterator is also used in the algorithm to trace hiatus in sediment accumulation. Here the task is to enumerate a nested sequence while preserving the nested structure.","category":"page"},{"location":"utility/","page":"Utility","title":"Utility","text":"<div class=\"noweb-label\">⪡utility-spec⪢≣</div>","category":"page"},{"location":"utility/","page":"Utility","title":"Utility","text":"a = [[:a, :b], [:c]]\n@test collect(enumerate_seq(a)) == [[(1, :a), (2, :b)], [(3, :c)]]","category":"page"},{"location":"utility/","page":"Utility","title":"Utility","text":"<div class=\"noweb-label\">⪡utility⪢≣</div>","category":"page"},{"location":"utility/","page":"Utility","title":"Utility","text":"struct TagVectors{T}\n\tvectors::T\nend\n\nfunction Base.iterate(tv::TagVectors{T}) where T\n\ttag = 1\n\tx = iterate(tv.vectors)\n\tisnothing(x) && return nothing\n\t(v_, nit) = x\n\tv = collect(v_)\n\tn = length(v)\n\treturn zip(tag:tag+n-1, v) |> collect, (tag+n, nit)\nend\n\nfunction Base.iterate(tv::TagVectors{T}, st::Tuple{Int,U}) where {T, U}\n\t(tag, it) = st\n\tisnothing(it) && return nothing\n\tx = iterate(tv.vectors, it)\n\tisnothing(x) && return nothing\n\t(v_, nit) = x\n\tv = collect(v_)\n\tn = length(v)\n\treturn zip(tag:tag+n-1, v) |> collect, (tag+n, nit)\nend\n\nBase.IteratorSize(::Type{TagVectors{T}}) where T = Base.IteratorSize(T)\nBase.size(r::TagVectors{T}) where T = size(r.vectors)\nBase.length(r::TagVectors{T}) where T = length(r.vectors)\nBase.eltype(::Type{TagVectors{T}}) where T = Any\n# This should be:\n# Iterators.Zip{Tuple{UnitRange{Int},Vector{eltype(eltype(T))}}}\n# But that doesn't work\n\n\"\"\"\n    enumerate_seq(s)\n\nEnumerates an iterator of sequences, such that the following equivalence\nholds:\n\n    enumerate(flatten(s)) == flatten(enumerate_seq(s))\n\"\"\"\nenumerate_seq(s::T) where T = TagVectors{T}(s)\n\nexport enumerate_seq","category":"page"},{"location":"utility/","page":"Utility","title":"Utility","text":"<div class=\"noweb-label\">file:<i>test/UtilitySpec.jl</i></div>","category":"page"},{"location":"utility/","page":"Utility","title":"Utility","text":"@testset \"CarboKitten.Utility\" begin\n    using CarboKitten.Utility\n\n    <<utility-spec>>\nend","category":"page"},{"location":"utility/#Reading-data-files","page":"Utility","title":"Reading data files","text":"","category":"section"},{"location":"utility/","page":"Utility","title":"Utility","text":"<div class=\"noweb-label\">file:<i>src/DataSets.jl</i></div>","category":"page"},{"location":"utility/","page":"Utility","title":"Utility","text":"module DataSets\n\nexport read_tsv, read_csv\n\nusing DelimitedFiles: readdlm\nusing DataFrames\nusing CategoricalArrays\nusing CSV\nusing Pkg.Artifacts\nusing Unitful\n\nfunction read_tsv(filename)\n    data, header = readdlm(filename, '\\t', header=true)\n    return DataFrame(data, vec(header))\nend\n\nfunction read_csv(filename)\n    return DataFrame(CSV.File(filename))\nend\n\nfunction artifact_dir()\n    subfolder = first(readdir(artifact\"data\"))\n    return joinpath(artifact\"data\", subfolder)\nend\n\nfunction bosscher_schlager_1992()\n    dir = artifact_dir()\n    filename = joinpath(dir, \"Bosscher1992\", \"bs92-sealevel-curve.csv\")\n    df = read_csv(filename)\n    return DataFrame(time=df.time * u\"yr\", sealevel=df.depth * u\"m\")\nend\n\nfunction miller_2020()\n    dir = artifact_dir()\n    filename = joinpath(dir, \"Miller2020\", \"Cenozoic_sea_level_reconstruction.tab\")\n    df = read_tsv(filename)\n    return DataFrame(\n        time=-df[!,4] * u\"kyr\",\n        sealevel=df[!,7] * u\"m\",\n        refkey=categorical(df[!,2]),\n        reference=categorical(df[!,3]))\nend\n\nend","category":"page"},{"location":"utility/","page":"Utility","title":"Utility","text":"","category":"page"},{"location":"denudation/empirical/#Emperical-denudation","page":"Empirical Denudation","title":"Emperical denudation","text":"","category":"section"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"Chlorine(Cl) isotopes are an emerging tool to decipher the denudation rates (chemical dissolution + physical erosion) in carbonate-dominated area.","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"Research based on the karst region and carbonate platform terrace suggested that the denudation rates are mainly controlled by precipitation and slopes, although the debates about which factor is more important is still ongoing ([7], [8]). In general, the precipitation mainly controls the chemical dissolution while the slopes mainly controls the physical ersions. In addition, the type of carbonates may also play an important role ([9]), but given this feature is studied poorly so we will ditch it for now. We have checked and compiled the denudation rates (mm/kyr) along with precipitation and slopes serve as a starting point to create a function relates denudation rates (mm/kyr) to precipitation and slopes. The compiled data could be found in OSFdatabase. This is an empirical relationship and have a relatively large uncertainty in terms of fitting.","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"(Image: Precipitation and denudation)","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"Fig 1. The relationship between MAP (mean precipitation per year, mm/y) and denudation rates (mm/ky)","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"(Image: Slope denudation data)","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"Fig 2. The relationship between the slope and the denudation rates (mm/ky)","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"We can see that both the slope and precipitation could increase the denudation rates, and reaches a 'steady state' after a certain point.","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"Therefore, we could use the function form of D = P * S, where D means denudation rates, P means effects of precipitation while S means effects of Slope. By doing so, we can consider both effects. Such formula structure is similar to RUSLE (Revised Universal Soil Loss Equation) model, a widely used Landscape Evolution Model (LEM) (e.g., [10]). We use sigmoidal function to approximate the influence of P or S on D, by fitting the function with the observed data and rendering parameter a, b, c, d, e, f. These are impleted as empirical_denudation. For more information please refer to the methodology section in the associated preprint.","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"<div class=\"noweb-label\">⪡empirical-denudation⪢≣</div>","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"function empirical_denudation(precip::Float64, slope::Any)\n    local a = 9.1363\n    local b = -0.008519\n    local c = 580.51\n    local d = 9.0156\n    local e = -0.1245\n    local f = 4.91086\n    (a ./ (1 .+ exp.(b .* (precip .* 1000 .- c)))) .* (d ./ (1 .+ exp.(e .* (slope .- f)))) .* u\"m/kyr\"\nend","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"This function needs two inputs: precipitation and slopes. The precipitation is defined as an input parameters in EmpiricalDenudation.","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"<div class=\"noweb-label\">⪡empirical-denudation⪢≣</div>","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"@kwdef struct EmpiricalDenudation <: DenudationType\n    precip::typeof(1.0u\"m\")\nend","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"While the slope for each cell is calculated by comparing the height (or water-depth) with the neighboring 8 cells, and is implemented in function slope_kernel . The slope is returned in degrees of inclination. This approach has been widely used in industry and ArcGis: how slope works is an example.","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"<div class=\"noweb-label\">⪡empirical-denudation⪢≣</div>","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"function slope_kernel(w::Any, cellsize::Float64)\n    dzdx = (-w[1, 1] - 2 * w[2, 1] - w[3, 1] + w[1, 3] + 2 * w[2, 3] + w[3, 3]) / (8 * cellsize)\n    dzdy = (-w[1, 1] - 2 * w[1, 2] - w[1, 3] + w[3, 1] + 2 * w[3, 2] + w[1, 1]) / (8 * cellsize)\n\n    if abs(w[2, 2]) <= abs(min(w...))\n        return 0.0\n    else\n        atan(sqrt(dzdx^2 + dzdy^2)) * (180 / π)\n    end\nend","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"This mode would only consider the destruction of mass, and will not take the redistribution of mass into account.","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"<div class=\"noweb-label\">file:<i>src/Denudation/EmpiricalDenudationMod.jl</i></div>","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"module EmpiricalDenudationMod\n\nimport ..Abstract: DenudationType, denudation, redistribution\nusing ...Boxes: Box\nusing Unitful\n\n<<empirical-denudation>>\n\nfunction denudation(::Box, p::EmpiricalDenudation, water_depth, slope, facies, state)\n    precip = p.precip ./ u\"m\"\n    denudation_mass = zeros(typeof(1.0u\"m/kyr\"), size(slope)...)\n\n    for idx in CartesianIndices(state.ca)\n        f = state.ca[idx]\n        if f == 0\n            continue\n        end\n        if water_depth[idx] >= 0\n            denudation_mass[idx] = empirical_denudation.(precip, slope[idx])\n        end\n    end\n    return denudation_mass\nend\n\nfunction redistribution(::Box, p::EmpiricalDenudation, denudation_mass, water_depth)\n    return nothing\nend\n\nend","category":"page"},{"location":"denudation/empirical/","page":"Empirical Denudation","title":"Empirical Denudation","text":"","category":"page"},{"location":"components/components/#Model-Components","page":"Components","title":"Model Components","text":"","category":"section"},{"location":"components/components/","page":"Components","title":"Components","text":"Each model in CarboKitten is composed out of elementary parts. These form a hierarchy of modules that inherit from each other.","category":"page"},{"location":"components/components/","page":"Components","title":"Components","text":"<!– FIXME: auto-generate this graph –>","category":"page"},{"location":"components/components/","page":"Components","title":"Components","text":"graph TD;\n    classDef nyi fill:#888;\n\n    time[Time Integration]\n    facies[Facies Base]\n    box[Box]\n    water_depth[Water Depth]\n    uniform_production[Production]\n    cellular_automaton[Cellular Automaton]\n    ca_production[CA Production]\n    h5writer[HDF5 Writer]\n    tag[Tagged Output]\n\n    sediment_buffer[Sediment Buffer]\n    active_layer_transport[Active Layer Transport]\n    denudation[Denudation]\n    class denudation nyi;\n\n    time --> water_depth\n    box --> water_depth\n\n    water_depth --> uniform_production\n    facies --> uniform_production\n\n    box --> cellular_automaton\n    facies --> cellular_automaton\n\n    cellular_automaton --> ca_production\n    uniform_production --> ca_production\n\n    box --> sediment_buffer\n    sediment_buffer --> active_layer_transport\n    water_depth --> active_layer_transport\n    sediment_buffer --> denudation\n    water_depth --> denudation\n\n    box --> h5writer\n    facies --> h5writer\n    time --> h5writer\n    water_depth --> h5writer","category":"page"},{"location":"components/components/","page":"Components","title":"Components","text":"Not all of these are equally important. The H5Writer implements the core simulation loop and writing a simulation to HDF5 files. For a Model to work with H5Writer it needs to have initial_state, step!, and write_header functions implemented. Each component can have its own write_header implementation. Those are joined together with a special @for_each(P->P.write_header(fid, input), PARENTS) call.","category":"page"},{"location":"components/components/#Contents","page":"Components","title":"Contents","text":"","category":"section"},{"location":"components/components/","page":"Components","title":"Components","text":"Pages = [\"tag.md\", \"boxes.md\", \"time.md\", \"facies.md\",\n         \"production.md\", \"cellular-automata.md\", \"waterdepth.md\", \"hdf5.md\",\n         \"sediment_buffer.md\"]\nDepth = 1","category":"page"},{"location":"components/components/#Common-Definitions","page":"Components","title":"Common Definitions","text":"","category":"section"},{"location":"components/components/","page":"Components","title":"Components","text":"<div class=\"noweb-label\">file:<i>src/Components/Common.jl</i></div>","category":"page"},{"location":"components/components/","page":"Components","title":"Components","text":"module Common\nexport @u_str, Amount, Time, Location, Rate, Intensity, Height\nexport AbstractFacies, AbstractInput, AbstractState, AbstractFrame\nexport Box, axes, Boundary, Shelf, Periodic, Reflected, TimeProperties\nexport in_units_of\nexport Model\nexport @for_each\n\nusing ModuleMixins\nusing Unitful\nusing CarboKitten.BoundaryTrait\nusing CarboKitten.Config: TimeProperties\nusing CarboKitten.Boxes: Box, axes\nusing CarboKitten.Utility: in_units_of\n\nconst Amount = typeof(1.0u\"m\")\nconst Time = typeof(1.0u\"Myr\")\nconst Height = typeof(1.0u\"m\")\nconst Location = typeof(1.0u\"m\")\nconst Rate = typeof(1.0u\"m/Myr\")\nconst Intensity = typeof(1.0u\"W/m^2\")\n\nabstract type AbstractFacies end\nabstract type AbstractInput end\nabstract type AbstractState end\nabstract type AbstractFrame end\n\nstruct Model{M} end\n\nend","category":"page"},{"location":"components/components/","page":"Components","title":"Components","text":"<div class=\"noweb-label\">file:<i>src/Components.jl</i></div>","category":"page"},{"location":"components/components/","page":"Components","title":"Components","text":"module Components\n\nexport Tag, TimeIntegration, Boxes, WaterDepth, FaciesBase, Production,\n    CAProduction, CellularAutomaton, H5Writer, ActiveLayer, SedimentBuffer\n\nusing ModuleMixins: @compose\n\ninclude(\"Components/Common.jl\")\ninclude(\"Components/Tag.jl\")\ninclude(\"Components/TimeIntegration.jl\")\ninclude(\"Components/Boxes.jl\")\ninclude(\"Components/WaterDepth.jl\")\ninclude(\"Components/FaciesBase.jl\")\ninclude(\"Components/Production.jl\")\ninclude(\"Components/CellularAutomaton.jl\")\ninclude(\"Components/CAProduction.jl\")\n\ninclude(\"Components/SedimentBuffer.jl\")\ninclude(\"Components/ActiveLayer.jl\")\n\ninclude(\"Components/H5Writer.jl\")\n\nlist_components() = filter(\n    c->:AST in names(c, all=true),\n    map(eval, names(Components)))\n\nend","category":"page"},{"location":"components/components/","page":"Components","title":"Components","text":"","category":"page"},{"location":"denudation/chemical/#Chemical-dissolution","page":"Chemical Dissolution","title":"Chemical dissolution","text":"","category":"section"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"The details could be found in paper by [11].","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"Limestone is made of CaCO_3, easily dissolved. This depends mainly on precipitation (rainfall) and temperature. The paper used equation 1 to quantify this process.","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"fracdhdt = 0001 kappa_c q_i over A_i","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"Herein dhdt is the chemical weathering rate and the unit is in m/s. Other parameters are defined as: q_i is the discharge of water at a certain cell. A_i is the surface area of the cell. If we assume there would be no surface water on land, q_i reduces to precipitation – evaporation. Let’s set it to 400 mm/y for now. Therefore equation 1 could be reduced to Equation 2.","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"fracdhdt = 0001 kappa_c  I","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"Where I is runoff (mm/y?). The parameter kappa_c is dimensionless and should be described by equation 3:","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"kappa_c = 40 1000 fracCa^2+_eqrho","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"Parameter ρ is the density of calcite, and we choose 2700 kgm^3 here. Ca^2+_eq is defined in equation 4:","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"Ca^2+_eq = (PCO_2 (K_1 K_C K_H) over (4 K_2times gamma Ca (gamma HCO_3)^2))^(13)","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"Mass balance coefficients K_1, K_2, K_C, K_H depend on temperature. _PCO_2 is assumed to be between 10^-15 ATM to 10^-35 ATM.","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"Other parameters could be found in the following table by [11].","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"Parameter Description Unit Value\nT Absolute temperature [°K] Tc + 273.16\nI Ion activity [-] 0.1\nA^* Debye-Hückel coefficient [-] -04883 + 8074 times 10^-4T_c\nB^* Debye-Hückel coefficient [-] -03241 + 1600 times 10^-4T_c\nlog gamma Cadagger Activity coefficient [-] -4AsqrtI(1 + 50 x 10^-8BsqrtI)\nlog gamma HCO_3dagger Activity coefficient [-] -1AsqrtI(1 + 54 x 10^-8BsqrtI)\nlog K_1ddagger Mass balance coefficient [ mol L^-1 ] -3563094 - 006091964T + 2183437T + 1268339logT - 1684915T^2\nlog K_2ddagger Mass balance coefficient [ mol L^-1 ] -1078871 - 003252849T + 515179T + 3892561logT - 5637139T^2\nlog K_cddagger Mass balance coefficient [ mol^2 L^-2 ] -1719065 - 0077993T + 2839319T + 71595logT\nlog K_Hddagger Mass balance coefficient [ mol L^-1 atm^-1 ] 1083865 + 001985076T - 691953T - 4045154logT + 669365T^2","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"This leads to the following implementation of the karst_denudation_parameters function to calculate the parameters for the dissolution equation:","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"<div class=\"noweb-label\">⪡karst-parameter-function⪢≣</div>","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"function karst_denudation_parameters(temp::Float64)\n    A = -0.4883 + 8.074 * 0.0001 * (temp - 273.0)\n    B = -0.3241 + 1.6 * 0.0001 * (temp - 273.0)\n    IA = 0.1 # ion activity\n\n    (K1=10^(-356.3094 - 0.06091964 * temp + 21834.37 / temp + 126.8339 * log10(temp) - 1684915 / (temp^2)),\n        K2=10^(-107.881 - 0.03252849 * temp + 5151.79 / temp + 38.92561 * log10(temp) - 563713.9 / (temp^2)),\n        KC=10^(-171.9065 - 0.077993 * temp + 2839.319 / temp + 71.595 * log10(temp)),\n        KH=10^(108.3865 + 0.01985076 * temp - 6919.53 / temp - 40.4515 * log10(temp) + 669365 / (temp^2)),\n        activity_Ca=10^(-4A * sqrt(IA) / (1 + 10^(-8) * B * sqrt(IA))),\n        activity_Alk=10^(-A * sqrt(IA) / (1 + 5.4 * 10^(-8) * B * sqrt(IA))))\nend","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"and equilibrium function to calculate the Ca^2+_eq:","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"<div class=\"noweb-label\">⪡karst-equilibrium-function⪢≣</div>","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"function equilibrium(temp::Float64, pco2::Float64, precip::Float64, facies)\n    p = karst_denudation_parameters(temp)\n    mass_density = facies.mass_density ./ u\"kg/m^3\"\n    eq_c = (pco2 .* (p.K1 * p.KC * p.KH) ./ (4 * p.K2 * p.activity_Ca .* (p.activity_Alk)^2)) .^ (1 / 3)\n    eq_d = 1000 * precip .* facies.infiltration_coefficient * 40 * 1000 .* eq_c ./ mass_density\n    (concentration=eq_c, denudation=eq_d)\nend","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"However, the above discussion is true only if the percolated fluid is saturated (in terms of Ca) when leaving the platform. In some cases, when the fluid is not saturated, the dissolved amount is lower than the scenario described above.","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"The following articles describe this: [12] and [13]","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"Ideally, a reactive transport model should be accurate, but that needs more computation resources. So herein, the author just suggested the dissolution rates of rocks depend on the depth. This makes sense, as the deeper the solution penetrates, the more concentrated it becomes. Also, this does not consider diffusion in this chapter.","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"The dissolution rate of carbonate follows linear rate laws of:","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"F = alpha (c_eq-c(z))","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"The rate law is a common expression way to describe the kinetics of certain chemical reactions see Rate Laws","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"F","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"is the dissolution rate, alpha is constant (kinetic co-efficient), c_eq is the concentration in fluid when equilibrium is reached (i.e., no more dissolution, which is Ca^2+_eq in Chapter 1), c(z) is the current concentrationion at depth z in the fluid. This equation then expands to","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"I rm dc = alpha (c_eq-c(z)) L rm dz","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"This equation indicates that the concentration increase in the infiltrated water equals the dissolution of rocks in the thickness of dz. L is the specific length of fractures/porosities (units: mm^2, we can try 100 at the first place). I.e., this term defines the relative reactive surface of the subsurface rocks, or how much surface is actually dissolving. This term is difficult to determine. I is infiltration, but slightly different as chapter 1: this I is the I in each rain event according to the paper. We certainly do not gonna know how this parameter works, so we just set it the same as in chapter 1?","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"However, to solve this equation we still need to know c(z).","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"If assuming the initial percolating water has c(0) = 0, then we could get the following equation (as c is related to depth):","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"c(z) = c_eq (1 - e^(-zlambda))","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"Herein, \\lambda = {{I} \\over {\\alpha L}} $.","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"Therefore,","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"D_rm average = (Itimes fracc_eqrho) (1  (fraclambdaz_0) (1  e^(frac-z_0lambda)))","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"α used in this article is alpha = 210^6 or 3510^7 cm/s (for temp at 298K). This is indeed a controversial parameter TBH. We can try different values and see what happens.","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"These equations are implemented as dissolution function:","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"<div class=\"noweb-label\">⪡karst-dissolution-function⪢≣</div>","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"function dissolution(temp, precip, pco2, alpha, water_depth, facies)\n    # TODO not used: I = precip .* facies.infiltration_coefficient #assume vertical infiltration\n    reactive_surface =  facies.reactive_surface ./u\"m^2/m^3\"\n    λ = precip * 100 .* facies.infiltration_coefficient ./ (alpha .* reactive_surface)\n    eq = equilibrium(temp, pco2, precip, facies) # pass ceq Deq from the last function\n    eq.denudation .* (1 - (λ ./ water_depth) .* (1 - exp.(-water_depth ./ λ))) * u\"m/kyr\"\nend","category":"page"},{"location":"denudation/chemical/#Implementation","page":"Chemical Dissolution","title":"Implementation","text":"","category":"section"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"<div class=\"noweb-label\">file:<i>src/Denudation/DissolutionMod.jl</i></div>","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"module DissolutionMod\n\nimport ..Abstract: DenudationType, denudation, redistribution\nusing ...BoundaryTrait: Boundary\nusing ...Boxes: Box\nexport Dissolution\nusing Unitful\n\n@kwdef struct Dissolution <: DenudationType\n    temp::typeof(1.0u\"K\")\n    precip::typeof(1.0u\"m\")\n    pco2::typeof(1.0u\"atm\")\n    reactionrate::typeof(1.0u\"m/yr\")\nend\n\n<<karst-parameter-function>>\n\n#calculate ceq and Deq, Kaufman 2002\n<<karst-equilibrium-function>>\n\n<<karst-dissolution-function>>\n\n\nfunction denudation(::Box{BT}, p::Dissolution, water_depth, slope, facies, state) where {BT<:Boundary}\n    temp = p.temp ./ u\"K\"\n    precip = p.precip ./u\"m\"\n    pco2 = p.pco2 ./1.0u\"atm\"\n    reactionrate = p.reactionrate ./u\"m/yr\"\n    denudation_mass = zeros(typeof(1.0u\"m/kyr\"), size(state.ca)...)\n\n    for idx in CartesianIndices(state.ca)\n        f = state.ca[idx]\n        if f == 0\n            continue\n        end\n        if water_depth[idx] >= 0\n            denudation_mass[idx] = dissolution(temp, precip, pco2, reactionrate, water_depth[idx], facies[f])\n        end\n    end\n    return denudation_mass\nend\n\nfunction redistribution(box::Box{BT}, p::Dissolution, denudation_mass, water_depth) where {BT<:Boundary}\n    return nothing\nend\n\nend","category":"page"},{"location":"denudation/chemical/","page":"Chemical Dissolution","title":"Chemical Dissolution","text":"","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"title: Species Habitation subtitle: a cellular automaton –-","category":"page"},{"location":"carbocat-ca/#Cellular-Automaton","page":"Cellular Automaton","title":"Cellular Automaton","text":"","category":"section"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"The paper talks about cycling the order of preference for occupying an empty cell at each iteration. This means that the rules change slightly every iteration.","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"<div class=\"noweb-label\">⪡cycle-permutation⪢≣</div>","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"cycle_permutation(n_species::Int) =\n    (circshift(1:n_species, x) for x in Iterators.countfrom(0))","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"The stencil function has an args... variadic arguments that are forwarded to the given rule. This means we can create a rules function that we pass the preference order as a second argument.","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"<div class=\"noweb-label\">⪡burgess2013-rules⪢≣</div>","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"function rules(facies::Vector{F}) where {F}\n    function (neighbourhood::Matrix{Int}, order::Vector{Int})\n        cell_facies = neighbourhood[3, 3]\n        neighbour_count(f) = sum(neighbourhood .== f)\n        if cell_facies == 0\n            for f in order\n                n = neighbour_count(f)\n                (a, b) = facies[f].activation_range\n                if a <= n && n <= b\n                    return f\n                end\n            end\n            0\n        else\n            n = neighbour_count(cell_facies) - 1\n            (a, b) = facies[cell_facies].viability_range\n            (a <= n && n <= b ? cell_facies : 0)\n        end\n    end\nend\n\n<<ca-stateful>>\n\nfunction run_ca(::Type{B}, facies::Vector{F}, init::Matrix{Int}, n_species::Int) where {B<:Boundary{2},F}\n    r = rules(facies)\n    Channel{Matrix{Int}}() do ch\n        target = Matrix{Int}(undef, size(init))\n        put!(ch, init)\n        stencil_op = stencil(Int, B, (5, 5), r)\n        for perm in cycle_permutation(n_species)\n            stencil_op(init, target, perm)\n            init, target = target, init\n            put!(ch, init)\n        end\n    end\nend","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"This function is not yet adaptible to the given rule set. Such a modification is not so hard to make.","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"The paper talks about a 50x50 grid initialized with uniform random values.","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"<div class=\"noweb-label\">file:<i>src/Burgess2013/CA.jl</i></div>","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"module CA\n\nusing ...BoundaryTrait\nusing ...Stencil\nusing ...Boxes: Box\n\nexport run_ca\n\n<<cycle-permutation>>\n<<burgess2013-rules>>\n\nend","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"First, let us reproduce Figure 3 in Burgess 2013.","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"(Image: First 8 generations)","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"By eye comparison seems to indicate that this CA is working the same. I'm curious to the behaviour after more iterations. Let's try 10, 100, 10000 and so on.","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"(Image: Assymptotic behaviour)","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"The little qualitative change between 100 and 1000 iterations would indicate that this CA remains \"interesting\" for a long time.","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"On my laptop I can run about 150 iterations per second with current code. When using periodic boundaries, I get to 1500 iterations per second, which is peculiar. A lot can still be optimized.","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"<details><summary>Plotting code</summary>","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"<div class=\"noweb-label\">file:<i>examples/ca/burgess-2013.jl</i></div>","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"module Script\n    using .Iterators: flatten\n    using CarboKitten\n    using CarboKitten.Burgess2013\n    using CarboKitten.Stencil: Reflected\n    using CarboKitten.Utility\n    using GLMakie\n\n    function main()\n        init = rand(0:3, 50, 50)\n        ca = run_ca(Reflected{2}, MODEL1, init, 3)\n\n        fig = Figure(resolution=(1000, 500))\n        axis_indices = flatten(eachrow(CartesianIndices((2, 4))))\n        for (i, st) in zip(axis_indices, ca)\n            ax = Axis(fig[Tuple(i)...], aspect=AxisAspect(1))\n            heatmap!(ax, st)\n        end\n        save(\"docs/src/_fig/b13-fig3.png\", fig)\n    end\nend\n\nScript.main()","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"<div class=\"noweb-label\">file:<i>examples/ca/long-term.jl</i></div>","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"module Script\n    using CarboKitten\n    using CarboKitten.Burgess2013\n    using CarboKitten.Stencil\n    using CarboKitten.Utility\n    using GLMakie\n\n    function main()\n        init = rand(0:3, 50, 50)\n        result = select(run_ca(Periodic{2}, MODEL1, init, 3), [10, 100, 10000])\n\n        fig = Figure(resolution=(1000, 333))\n        for (i, st) in enumerate(result)\n            ax = Axis(fig[1, i], aspect=AxisAspect(1))\n            heatmap!(ax, st)\n        end\n        save(\"docs/src/_fig/b13-long-term.png\", fig)\n    end\nend\n\nScript.main()","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"</details>","category":"page"},{"location":"carbocat-ca/#How-to-run","page":"Cellular Automaton","title":"How to run","text":"","category":"section"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"We start with randomized initial conditions on a 50x50 grid.","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"using CarboKitten.Stencil: Reflected\nusing CarboKitten.Burgess2013\ninit = rand(0:3, 50, 50)\nresult = Iterators.take(run_ca(Reflected{2}, MODEL1, init, 3), 8)","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"Then we run the cellular automaton for, in this case eight generations. The CA.run function returns an iterator of 50x50 maps. That means that in principle we can extract an infinity of iterations, but in this cane we only take eight.","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"result = Iterators.take(CA.run(Reflected{2}, init, 3), 8)","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"In Julia we may plot those as follows","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"using Plots\n# plotly()  # sets back-end; plotly gives me the best results\nplot((heatmap(r, colorbar=:none) for r in result)..., layout=(2, 4))","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"What this says is: create a heatmap for each of our eight results, then expand those into a function call to plot (as in plot(hm1, hm2, ..., hm8, layout=(2, 4))).","category":"page"},{"location":"carbocat-ca/#Statuful-API","page":"Cellular Automaton","title":"Statuful API","text":"","category":"section"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"For most applications in CarboKitten it is most useful to have a CA that updates some state struct in-place. This way any module that needs access to the CA state can do so.","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"<div class=\"noweb-label\">⪡ca-stateful⪢≣</div>","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"function step_ca(box::Box{BT}, facies) where {BT<:Boundary{2}}\n    \"\"\"Creates a propagator for the state, updating the celullar automaton in place.\n\n    Contract: the `state` should have `ca::Matrix{Int}` and `ca_priority::Vector{Int}`\n    members.\"\"\"\n    r = rules(facies)\n    tmp = Matrix{Int}(undef, box.grid_size)\n    stencil_op = stencil(Int, BT, (5, 5), r)\n\n    function (state)\n        stencil_op(state.ca, tmp, state.ca_priority)\n        state.ca, tmp = tmp, state.ca\n        state.ca_priority = circshift(state.ca_priority, 1)\n        return state\n    end\nend","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"We may test that running the above function ten times gives the same result as the tenth result from the iterator API.","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"<div class=\"noweb-label\">file:<i>test/CASpec.jl</i></div>","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"@testset \"CA\" begin\n    using CarboKitten.BoundaryTrait: Periodic\n    using CarboKitten.Boxes: Box\n    using CarboKitten.Burgess2013.CA: step_ca, run_ca\n    using Unitful\n\n    using CarboKitten.Components: CellularAutomaton as CA\n\n    MODEL1 = [\n        CA.Facies(viability_range=(4, 10), activation_range=(6, 10)),\n        CA.Facies(viability_range=(4, 10), activation_range=(6, 10)),\n        CA.Facies(viability_range=(4, 10), activation_range=(6, 10))]\n\n    n_facies = length(MODEL1)\n    box = Box{Periodic{2}}(grid_size=(50, 50), phys_scale=100.0u\"m\")\n    ca_init = rand(0:n_facies, box.grid_size...)\n    ca_channel = run_ca(Periodic{2}, MODEL1, copy(ca_init), n_facies)\n    item1, _ = Iterators.peel(Iterators.drop(ca_channel, 20))\n\n    ca_step = step_ca(box, MODEL1)\n    state = CA.State(copy(ca_init), 1:n_facies)\n    for _ in 1:20\n        ca_step(state)\n    end\n\n    @test item1 == state.ca\nend","category":"page"},{"location":"carbocat-ca/","page":"Cellular Automaton","title":"Cellular Automaton","text":"","category":"page"},{"location":"boxes/#Generic-Parameters","page":"Boxes","title":"Generic Parameters","text":"","category":"section"},{"location":"boxes/","page":"Boxes","title":"Boxes","text":"<div class=\"noweb-label\">file:<i>src/Config.jl</i></div>","category":"page"},{"location":"boxes/","page":"Boxes","title":"Boxes","text":"module Config\n\nexport TimeProperties\n\nusing ..BoundaryTrait\nusing ..Vectors\n\nusing ..Boxes: Box, axes\nexport Box, axes\n\nusing Unitful\nusing Unitful.DefaultSymbols\n\n<<config-types>>\n\nend","category":"page"},{"location":"boxes/","page":"Boxes","title":"Boxes","text":"Physical parameters of CarboKitten all should have units, see our refresher on Unitful.jl.","category":"page"},{"location":"boxes/#Time-properties","page":"Boxes","title":"Time properties","text":"","category":"section"},{"location":"boxes/","page":"Boxes","title":"Boxes","text":"Time stepping is specified in TimeProperties. We'll have time_steps number of time steps, each of physical time Δt. However, only one in write_interval steps is written to disk.","category":"page"},{"location":"boxes/","page":"Boxes","title":"Boxes","text":"<div class=\"noweb-label\">⪡config-types⪢≣</div>","category":"page"},{"location":"boxes/","page":"Boxes","title":"Boxes","text":"abstract type AbstractTimeProperties end\n\n@kwdef struct TimeProperties <: AbstractTimeProperties\n    t0::typeof(1.0u\"Myr\") = 0.0u\"Myr\"\n    Δt::typeof(1.0u\"Myr\")\n    steps::Int\n    write_interval::Int = 1\nend","category":"page"},{"location":"boxes/#Vectors","page":"Boxes","title":"Vectors","text":"","category":"section"},{"location":"boxes/","page":"Boxes","title":"Boxes","text":"To trace the position of particles we define a NamedTuple with x and y members and define common vector operations on those.","category":"page"},{"location":"boxes/","page":"Boxes","title":"Boxes","text":"<div class=\"noweb-label\">file:<i>src/Vectors.jl</i></div>","category":"page"},{"location":"boxes/","page":"Boxes","title":"Boxes","text":"module Vectors\n\nexport Vec2\n\nVec2 = @NamedTuple{x::Float64, y::Float64}\nBase.:+(a::Vec2, b::Vec2) = (x=a.x+b.x, y=a.y+b.y)\nBase.abs2(a::Vec2) = a.x^2 + a.y^2\nBase.abs(a::Vec2) = √(abs2(a))\nBase.:*(a::Vec2, b::Float64) = (x=a.x*b, y=a.y*b)\nBase.:/(a::Vec2, b::Float64) = (x=a.x/b, y=a.y/b)\nBase.:*(a::Float64, b::Vec2) = b*a\nBase.:-(a::Vec2, b::Vec2) = (x=a.x-b.x, y=a.y-b.y)\nBase.:-(a::Vec2) = (x=-a.x, y=-a.y)\nBase.zero(::Type{Vec2}) = (x=0.0, y=0.0)\n\nend","category":"page"},{"location":"boxes/","page":"Boxes","title":"Boxes","text":"","category":"page"},{"location":"ca-with-production/#CA-with-production","page":"Model with CA and Production","title":"CA with production","text":"","category":"section"},{"location":"ca-with-production/","page":"Model with CA and Production","title":"Model with CA and Production","text":"This model combines BS92 production with the B13 cellular automaton. This production model is implemented in the CAProduction component.","category":"page"},{"location":"ca-with-production/","page":"Model with CA and Production","title":"Model with CA and Production","text":"(Image: Stratigraphy, production and subsidence under oscillating sea level.)","category":"page"},{"location":"ca-with-production/#Complete-example","page":"Model with CA and Production","title":"Complete example","text":"","category":"section"},{"location":"ca-with-production/","page":"Model with CA and Production","title":"Model with CA and Production","text":"This example is running for 10000 steps to 1Myr on a 100 times 50 grid, starting with a sloped height down to 50m. The sea_level, and initial_depth arguments are functions. The phys_scale argument translate pixels on the grid into physical metres. The write_interval indicates to write output every 10 iterations, summing the production over that range.","category":"page"},{"location":"ca-with-production/","page":"Model with CA and Production","title":"Model with CA and Production","text":"<div class=\"noweb-label\">file:<i>examples/model/cap/run.jl</i></div>","category":"page"},{"location":"ca-with-production/","page":"Model with CA and Production","title":"Model with CA and Production","text":"#| creates: data/output/cap1.h5\n#| requires: src/Model/CAP.jl\n\nmodule Script\n\nusing CarboKitten\nusing CarboKitten.Model.CAP\nusing CarboKitten.Components.Common\nusing Unitful\n\nconst PERIOD = 200.0u\"kyr\"\nconst AMPLITUDE = 4.0u\"m\"\n\nconst FACIES = [\n\t    CAP.Facies(\n        viability_range = (4, 10),\n        activation_range = (6, 10),\n        maximum_growth_rate = 500u\"m/Myr\",\n        extinction_coefficient = 0.8u\"m^-1\",\n        saturation_intensity = 60u\"W/m^2\"),\n\n\t    CAP.Facies(\n        viability_range = (4, 10),\n        activation_range = (6, 10),\n        maximum_growth_rate = 400u\"m/Myr\",\n        extinction_coefficient = 0.1u\"m^-1\",\n        saturation_intensity = 60u\"W/m^2\"),\n\n\t    CAP.Facies(\n        viability_range = (4, 10),\n        activation_range = (6, 10),\n        maximum_growth_rate = 100u\"m/Myr\",\n        extinction_coefficient = 0.005u\"m^-1\",\n        saturation_intensity = 60u\"W/m^2\")\n\t]\n\n\tconst INPUT = CAP.Input(\n\t\ttag = \"cap1\",\n\t\tbox = Common.Box{Shelf}(grid_size=(100, 50), phys_scale=150.0u\"m\"),\n\t\ttime = TimeProperties(\n\t\t\tΔt = 200.0u\"yr\",\n\t\t\tsteps = 5000,\n\t\t\twrite_interval = 10),\n\t\tsea_level = t -> 4.0u\"m\" * sin(2π * t / 0.2u\"Myr\"),\n\t\tbedrock_elevation = (x, y) -> - x / 300.0,\n\t\tsubsidence_rate = 50.0u\"m/Myr\",\n\t\tinsolation = 400.0u\"W/m^2\",\n\t\tfacies = FACIES)\n\n\tmain() = CarboKitten.run(Model{CAP}, INPUT, \"data/output/cap1.h5\")\nend\n\nScript.main()","category":"page"},{"location":"ca-with-production/","page":"Model with CA and Production","title":"Model with CA and Production","text":"This writes output to an HDF5 file that you may use for further analysis and visualization.","category":"page"},{"location":"ca-with-production/","page":"Model with CA and Production","title":"Model with CA and Production","text":"<div class=\"noweb-label\">file:<i>examples/model/cap/plot.jl</i></div>","category":"page"},{"location":"ca-with-production/","page":"Model with CA and Production","title":"Model with CA and Production","text":"#| creates: docs/src/_fig/cap1-summary.png\n#| requires: data/output/cap1.h5\n#| collect: figures\nusing GLMakie\nusing CarboKitten.Visualization\n\nsave(\"docs/src/_fig/cap1-summary.png\", summary_plot(\"data/output/cap1.h5\"))","category":"page"},{"location":"ca-with-production/#Implementation","page":"Model with CA and Production","title":"Implementation","text":"","category":"section"},{"location":"ca-with-production/","page":"Model with CA and Production","title":"Model with CA and Production","text":"<div class=\"component-dag\" style=\"overflow: scroll\"><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.50.0 (20211204.2007)\n -->\n<!-- Pages: 1 -->\n<svg width=\"781pt\" height=\"580pt\"\n viewBox=\"0.00 0.00 780.50 580.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 576)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-576 776.5,-576 776.5,4 -4,4\"/>\n<!-- Boxes -->\n<g id=\"node1\" class=\"node\">\n<title>Boxes</title>\n<path fill=\"none\" stroke=\"black\" d=\"M542,-572C542,-572 404,-572 404,-572 398,-572 392,-566 392,-560 392,-560 392,-505 392,-505 392,-499 398,-493 404,-493 404,-493 542,-493 542,-493 548,-493 554,-499 554,-505 554,-505 554,-560 554,-560 554,-566 548,-572 542,-572\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"399,-541.5 547,-541.5 \"/>\n<text text-anchor=\"start\" x=\"449.5\" y=\"-550.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Boxes</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"399,-518.5 399,-541.5 446,-541.5 446,-518.5 399,-518.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"399,-518.5 446,-518.5 446,-541.5 399,-541.5 \"/>\n<text text-anchor=\"start\" x=\"403\" y=\"-526.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"446,-518.5 446,-541.5 500,-541.5 500,-518.5 446,-518.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"446,-518.5 446,-541.5 500,-541.5 500,-518.5 446,-518.5\"/>\n<text text-anchor=\"start\" x=\"450\" y=\"-526.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"500,-518.5 500,-541.5 547,-541.5 547,-518.5 500,-518.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"547,-541.5 500,-541.5 500,-518.5 547,-518.5 \"/>\n<text text-anchor=\"start\" x=\"504\" y=\"-526.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"446,-499.5 446,-518.5 \"/>\n<text text-anchor=\"start\" x=\"403\" y=\"-506.5\" font-family=\"monospace\" font-size=\"10.00\">box</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"500,-499.5 500,-518.5 \"/>\n<text text-anchor=\"start\" x=\"450\" y=\"-506.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"503\" y=\"-506.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- WaterDepth -->\n<g id=\"node7\" class=\"node\">\n<title>WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M336,-457C336,-457 84,-457 84,-457 78,-457 72,-451 72,-445 72,-445 72,-352 72,-352 72,-346 78,-340 84,-340 84,-340 336,-340 336,-340 342,-340 348,-346 348,-352 348,-352 348,-445 348,-445 348,-451 342,-457 336,-457\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"79,-426.5 341,-426.5 \"/>\n<text text-anchor=\"start\" x=\"162.5\" y=\"-435.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">WaterDepth</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"79,-403.5 79,-426.5 190,-426.5 190,-403.5 79,-403.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"79,-403.5 190,-403.5 190,-426.5 79,-426.5 \"/>\n<text text-anchor=\"start\" x=\"83\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"190,-403.5 190,-426.5 244,-426.5 244,-403.5 190,-403.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"190,-403.5 190,-426.5 244,-426.5 244,-403.5 190,-403.5\"/>\n<text text-anchor=\"start\" x=\"194\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"244,-403.5 244,-426.5 341,-426.5 341,-403.5 244,-403.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"341,-426.5 244,-426.5 244,-403.5 341,-403.5 \"/>\n<text text-anchor=\"start\" x=\"248\" y=\"-411.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"190,-384.5 190,-403.5 \"/>\n<text text-anchor=\"start\" x=\"83\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\">sea_level</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"244,-384.5 244,-403.5 \"/>\n<text text-anchor=\"start\" x=\"194\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"247\" y=\"-391.5\" font-family=\"monospace\" font-size=\"10.00\">sediment_height</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"190,-365.5 190,-384.5 \"/>\n<text text-anchor=\"start\" x=\"83\" y=\"-372.5\" font-family=\"monospace\" font-size=\"10.00\">bedrock_elevation</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"244,-365.5 244,-384.5 \"/>\n<text text-anchor=\"start\" x=\"194\" y=\"-372.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"247\" y=\"-372.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"190,-346.5 190,-365.5 \"/>\n<text text-anchor=\"start\" x=\"83\" y=\"-353.5\" font-family=\"monospace\" font-size=\"10.00\">subsidence_rate</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"244,-346.5 244,-365.5 \"/>\n<text text-anchor=\"start\" x=\"194\" y=\"-353.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"247\" y=\"-353.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- Boxes&#45;&gt;WaterDepth -->\n<g id=\"edge5\" class=\"edge\">\n<title>Boxes&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M396.22,-492.97C376.72,-483.18 355.26,-472.41 334.07,-461.77\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"335.51,-458.58 325,-457.22 332.37,-464.83 335.51,-458.58\"/>\n</g>\n<!-- CellularAutomaton -->\n<g id=\"node9\" class=\"node\">\n<title>CellularAutomaton</title>\n<path fill=\"none\" stroke=\"black\" d=\"M760.5,-294.5C760.5,-294.5 499.5,-294.5 499.5,-294.5 493.5,-294.5 487.5,-288.5 487.5,-282.5 487.5,-282.5 487.5,-208.5 487.5,-208.5 487.5,-202.5 493.5,-196.5 499.5,-196.5 499.5,-196.5 760.5,-196.5 760.5,-196.5 766.5,-196.5 772.5,-202.5 772.5,-208.5 772.5,-208.5 772.5,-282.5 772.5,-282.5 772.5,-288.5 766.5,-294.5 760.5,-294.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"495,-264.5 766,-264.5 \"/>\n<text text-anchor=\"start\" x=\"555\" y=\"-273.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">CellularAutomaton</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"495,-241.5 495,-264.5 588,-264.5 588,-241.5 495,-241.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"495,-241.5 588,-241.5 588,-264.5 495,-264.5 \"/>\n<text text-anchor=\"start\" x=\"499\" y=\"-249.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"588,-241.5 588,-264.5 693,-264.5 693,-241.5 588,-241.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"588,-241.5 588,-264.5 693,-264.5 693,-241.5 588,-241.5\"/>\n<text text-anchor=\"start\" x=\"592\" y=\"-249.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"693,-241.5 693,-264.5 766,-264.5 766,-241.5 693,-241.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"766,-264.5 693,-264.5 693,-241.5 766,-241.5 \"/>\n<text text-anchor=\"start\" x=\"697\" y=\"-249.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"588,-222.5 588,-241.5 \"/>\n<text text-anchor=\"start\" x=\"499\" y=\"-229.5\" font-family=\"monospace\" font-size=\"10.00\">ca_interval</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"693,-222.5 693,-241.5 \"/>\n<text text-anchor=\"start\" x=\"592\" y=\"-229.5\" font-family=\"monospace\" font-size=\"10.00\">viability_range</text>\n<text text-anchor=\"start\" x=\"696\" y=\"-229.5\" font-family=\"monospace\" font-size=\"10.00\">ca</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"588,-203.5 588,-222.5 \"/>\n<text text-anchor=\"start\" x=\"499\" y=\"-210.5\" font-family=\"monospace\" font-size=\"10.00\">ca_random_seed</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"693,-203.5 693,-222.5 \"/>\n<text text-anchor=\"start\" x=\"592\" y=\"-210.5\" font-family=\"monospace\" font-size=\"10.00\">activation_range</text>\n<text text-anchor=\"start\" x=\"696\" y=\"-210.5\" font-family=\"monospace\" font-size=\"10.00\">ca_priority</text>\n</g>\n<!-- Boxes&#45;&gt;CellularAutomaton -->\n<g id=\"edge12\" class=\"edge\">\n<title>Boxes&#45;&gt;CellularAutomaton</title>\n<path fill=\"none\" stroke=\"black\" d=\"M509.83,-492.98C519.38,-481.88 529.17,-469.4 537,-457 567.62,-408.47 593.16,-348.13 609.68,-304.51\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"613.04,-305.5 613.27,-294.91 606.49,-303.05 613.04,-305.5\"/>\n</g>\n<!-- TimeIntegration -->\n<g id=\"node2\" class=\"node\">\n<title>TimeIntegration</title>\n<path fill=\"none\" stroke=\"black\" d=\"M279,-572C279,-572 141,-572 141,-572 135,-572 129,-566 129,-560 129,-560 129,-505 129,-505 129,-499 135,-493 141,-493 141,-493 279,-493 279,-493 285,-493 291,-499 291,-505 291,-505 291,-560 291,-560 291,-566 285,-572 279,-572\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"136,-541.5 284,-541.5 \"/>\n<text text-anchor=\"start\" x=\"144.5\" y=\"-550.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">TimeIntegration</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"136,-518.5 136,-541.5 183,-541.5 183,-518.5 136,-518.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"136,-518.5 183,-518.5 183,-541.5 136,-541.5 \"/>\n<text text-anchor=\"start\" x=\"140\" y=\"-526.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"183,-518.5 183,-541.5 237,-541.5 237,-518.5 183,-518.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"183,-518.5 183,-541.5 237,-541.5 237,-518.5 183,-518.5\"/>\n<text text-anchor=\"start\" x=\"187\" y=\"-526.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"237,-518.5 237,-541.5 284,-541.5 284,-518.5 237,-518.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"284,-541.5 237,-541.5 237,-518.5 284,-518.5 \"/>\n<text text-anchor=\"start\" x=\"241\" y=\"-526.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"183,-499.5 183,-518.5 \"/>\n<text text-anchor=\"start\" x=\"140\" y=\"-506.5\" font-family=\"monospace\" font-size=\"10.00\">time</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"237,-499.5 237,-518.5 \"/>\n<text text-anchor=\"start\" x=\"187\" y=\"-506.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"240\" y=\"-506.5\" font-family=\"monospace\" font-size=\"10.00\">step</text>\n</g>\n<!-- TimeIntegration&#45;&gt;WaterDepth -->\n<g id=\"edge4\" class=\"edge\">\n<title>TimeIntegration&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M210,-492.97C210,-484.98 210,-476.34 210,-467.65\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"213.5,-467.47 210,-457.47 206.5,-467.47 213.5,-467.47\"/>\n</g>\n<!-- CAP -->\n<g id=\"node3\" class=\"node\">\n<title>CAP</title>\n<path fill=\"none\" stroke=\"black\" d=\"M205,-36C205,-36 175,-36 175,-36 169,-36 163,-30 163,-24 163,-24 163,-12 163,-12 163,-6 169,0 175,0 175,0 205,0 205,0 211,0 217,-6 217,-12 217,-12 217,-24 217,-24 217,-30 211,-36 205,-36\"/>\n<text text-anchor=\"start\" x=\"173.5\" y=\"-15.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">CAP</text>\n</g>\n<!-- Tag -->\n<g id=\"node4\" class=\"node\">\n<title>Tag</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150,-151C150,-151 12,-151 12,-151 6,-151 0,-145 0,-139 0,-139 0,-84 0,-84 0,-78 6,-72 12,-72 12,-72 150,-72 150,-72 156,-72 162,-78 162,-84 162,-84 162,-139 162,-139 162,-145 156,-151 150,-151\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-120.5 155,-120.5 \"/>\n<text text-anchor=\"start\" x=\"67\" y=\"-129.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Tag</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"7,-97.5 7,-120.5 54,-120.5 54,-97.5 7,-97.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-97.5 54,-97.5 54,-120.5 7,-120.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-105.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"54,-97.5 54,-120.5 108,-120.5 108,-97.5 54,-97.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"54,-97.5 54,-120.5 108,-120.5 108,-97.5 54,-97.5\"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-105.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"108,-97.5 108,-120.5 155,-120.5 155,-97.5 108,-97.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"155,-120.5 108,-120.5 108,-97.5 155,-97.5 \"/>\n<text text-anchor=\"start\" x=\"112\" y=\"-105.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"54,-78.5 54,-97.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-85.5\" font-family=\"monospace\" font-size=\"10.00\">tag</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"108,-78.5 108,-97.5 \"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-85.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"111\" y=\"-85.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- Tag&#45;&gt;CAP -->\n<g id=\"edge1\" class=\"edge\">\n<title>Tag&#45;&gt;CAP</title>\n<path fill=\"none\" stroke=\"black\" d=\"M126.91,-71.96C138.78,-62 151.21,-51.57 161.86,-42.62\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"164.22,-45.21 169.63,-36.1 159.72,-39.85 164.22,-45.21\"/>\n</g>\n<!-- H5Writer -->\n<g id=\"node5\" class=\"node\">\n<title>H5Writer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M168.5,-263.5C168.5,-263.5 103.5,-263.5 103.5,-263.5 97.5,-263.5 91.5,-257.5 91.5,-251.5 91.5,-251.5 91.5,-239.5 91.5,-239.5 91.5,-233.5 97.5,-227.5 103.5,-227.5 103.5,-227.5 168.5,-227.5 168.5,-227.5 174.5,-227.5 180.5,-233.5 180.5,-239.5 180.5,-239.5 180.5,-251.5 180.5,-251.5 180.5,-257.5 174.5,-263.5 168.5,-263.5\"/>\n<text text-anchor=\"start\" x=\"98.5\" y=\"-242.8\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">H5Writer</text>\n</g>\n<!-- H5Writer&#45;&gt;CAP -->\n<g id=\"edge2\" class=\"edge\">\n<title>H5Writer&#45;&gt;CAP</title>\n<path fill=\"none\" stroke=\"black\" d=\"M143.73,-227.28C151.72,-208.79 163.99,-178.37 171,-151 180.08,-115.52 185.2,-73.48 187.78,-46.54\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"191.29,-46.59 188.7,-36.32 184.31,-45.96 191.29,-46.59\"/>\n</g>\n<!-- FaciesBase -->\n<g id=\"node6\" class=\"node\">\n<title>FaciesBase</title>\n<path fill=\"none\" stroke=\"black\" d=\"M516,-438C516,-438 378,-438 378,-438 372,-438 366,-432 366,-426 366,-426 366,-371 366,-371 366,-365 372,-359 378,-359 378,-359 516,-359 516,-359 522,-359 528,-365 528,-371 528,-371 528,-426 528,-426 528,-432 522,-438 516,-438\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"373,-407.5 521,-407.5 \"/>\n<text text-anchor=\"start\" x=\"403\" y=\"-416.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">FaciesBase</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"373,-384.5 373,-407.5 420,-407.5 420,-384.5 373,-384.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"373,-384.5 420,-384.5 420,-407.5 373,-407.5 \"/>\n<text text-anchor=\"start\" x=\"377\" y=\"-392.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"420,-384.5 420,-407.5 474,-407.5 474,-384.5 420,-384.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"420,-384.5 420,-407.5 474,-407.5 474,-384.5 420,-384.5\"/>\n<text text-anchor=\"start\" x=\"424\" y=\"-392.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"474,-384.5 474,-407.5 521,-407.5 521,-384.5 474,-384.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"521,-407.5 474,-407.5 474,-384.5 521,-384.5 \"/>\n<text text-anchor=\"start\" x=\"478\" y=\"-392.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"420,-365.5 420,-384.5 \"/>\n<text text-anchor=\"start\" x=\"377\" y=\"-372.5\" font-family=\"monospace\" font-size=\"10.00\">facies</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"474,-365.5 474,-384.5 \"/>\n<text text-anchor=\"start\" x=\"424\" y=\"-372.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"477\" y=\"-372.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- FaciesBase&#45;&gt;H5Writer -->\n<g id=\"edge6\" class=\"edge\">\n<title>FaciesBase&#45;&gt;H5Writer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M393.49,-358.95C381.87,-351.84 369.35,-345.07 357,-340 286.37,-310.98 255.32,-341.85 189,-304 175.05,-296.04 162.68,-283.16 153.4,-271.61\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"156.07,-269.33 147.22,-263.52 150.51,-273.59 156.07,-269.33\"/>\n</g>\n<!-- FaciesBase&#45;&gt;CellularAutomaton -->\n<g id=\"edge13\" class=\"edge\">\n<title>FaciesBase&#45;&gt;CellularAutomaton</title>\n<path fill=\"none\" stroke=\"black\" d=\"M494.13,-358.61C515.34,-341.11 540.76,-320.13 563.84,-301.09\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"566.09,-303.77 571.57,-294.71 561.63,-298.38 566.09,-303.77\"/>\n</g>\n<!-- Production -->\n<g id=\"node10\" class=\"node\">\n<title>Production</title>\n<path fill=\"none\" stroke=\"black\" d=\"M457.5,-304C457.5,-304 210.5,-304 210.5,-304 204.5,-304 198.5,-298 198.5,-292 198.5,-292 198.5,-199 198.5,-199 198.5,-193 204.5,-187 210.5,-187 210.5,-187 457.5,-187 457.5,-187 463.5,-187 469.5,-193 469.5,-199 469.5,-199 469.5,-292 469.5,-292 469.5,-298 463.5,-304 457.5,-304\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"206,-273.5 463,-273.5 \"/>\n<text text-anchor=\"start\" x=\"290.5\" y=\"-282.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Production</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"206,-250.5 206,-273.5 275,-273.5 275,-250.5 206,-250.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"206,-250.5 275,-250.5 275,-273.5 206,-273.5 \"/>\n<text text-anchor=\"start\" x=\"210\" y=\"-258.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"275,-250.5 275,-273.5 416,-273.5 416,-250.5 275,-250.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"275,-250.5 275,-273.5 416,-273.5 416,-250.5 275,-250.5\"/>\n<text text-anchor=\"start\" x=\"279\" y=\"-258.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"416,-250.5 416,-273.5 463,-273.5 463,-250.5 416,-250.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"463,-273.5 416,-273.5 416,-250.5 463,-250.5 \"/>\n<text text-anchor=\"start\" x=\"420\" y=\"-258.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"275,-231.5 275,-250.5 \"/>\n<text text-anchor=\"start\" x=\"210\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\">insolation</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"416,-231.5 416,-250.5 \"/>\n<text text-anchor=\"start\" x=\"279\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\">maximum_growth_rate</text>\n<text text-anchor=\"start\" x=\"419\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"275,-212.5 275,-231.5 \"/>\n<text text-anchor=\"start\" x=\"210\" y=\"-219.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"416,-212.5 416,-231.5 \"/>\n<text text-anchor=\"start\" x=\"279\" y=\"-219.5\" font-family=\"monospace\" font-size=\"10.00\">extinction_coefficient</text>\n<text text-anchor=\"start\" x=\"419\" y=\"-219.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"275,-193.5 275,-212.5 \"/>\n<text text-anchor=\"start\" x=\"210\" y=\"-200.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"416,-193.5 416,-212.5 \"/>\n<text text-anchor=\"start\" x=\"279\" y=\"-200.5\" font-family=\"monospace\" font-size=\"10.00\">saturation_intensity</text>\n<text text-anchor=\"start\" x=\"419\" y=\"-200.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- FaciesBase&#45;&gt;Production -->\n<g id=\"edge9\" class=\"edge\">\n<title>FaciesBase&#45;&gt;Production</title>\n<path fill=\"none\" stroke=\"black\" d=\"M417.9,-358.61C407.32,-344.48 395.05,-328.08 383.21,-312.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"385.86,-309.96 377.07,-304.05 380.26,-314.16 385.86,-309.96\"/>\n</g>\n<!-- WaterDepth&#45;&gt;H5Writer -->\n<g id=\"edge7\" class=\"edge\">\n<title>WaterDepth&#45;&gt;H5Writer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M181.81,-339.98C170.47,-316.85 157.96,-291.32 148.88,-272.79\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"152.02,-271.23 144.47,-263.79 145.73,-274.31 152.02,-271.23\"/>\n</g>\n<!-- WaterDepth&#45;&gt;Production -->\n<g id=\"edge8\" class=\"edge\">\n<title>WaterDepth&#45;&gt;Production</title>\n<path fill=\"none\" stroke=\"black\" d=\"M257.23,-339.98C264.77,-330.8 272.62,-321.24 280.3,-311.9\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"283.05,-314.06 286.69,-304.11 277.64,-309.61 283.05,-314.06\"/>\n</g>\n<!-- CAProduction -->\n<g id=\"node8\" class=\"node\">\n<title>CAProduction</title>\n<path fill=\"none\" stroke=\"black\" d=\"M383.5,-129.5C383.5,-129.5 284.5,-129.5 284.5,-129.5 278.5,-129.5 272.5,-123.5 272.5,-117.5 272.5,-117.5 272.5,-105.5 272.5,-105.5 272.5,-99.5 278.5,-93.5 284.5,-93.5 284.5,-93.5 383.5,-93.5 383.5,-93.5 389.5,-93.5 395.5,-99.5 395.5,-105.5 395.5,-105.5 395.5,-117.5 395.5,-117.5 395.5,-123.5 389.5,-129.5 383.5,-129.5\"/>\n<text text-anchor=\"start\" x=\"279.5\" y=\"-108.8\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">CAProduction</text>\n</g>\n<!-- CAProduction&#45;&gt;CAP -->\n<g id=\"edge3\" class=\"edge\">\n<title>CAProduction&#45;&gt;CAP</title>\n<path fill=\"none\" stroke=\"black\" d=\"M306.91,-93.29C283.89,-78.66 250.65,-57.54 225.49,-41.55\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"227.28,-38.54 216.96,-36.13 223.53,-44.45 227.28,-38.54\"/>\n</g>\n<!-- CellularAutomaton&#45;&gt;CAProduction -->\n<g id=\"edge10\" class=\"edge\">\n<title>CellularAutomaton&#45;&gt;CAProduction</title>\n<path fill=\"none\" stroke=\"black\" d=\"M522.3,-196.47C473.99,-174.93 419.49,-150.62 381.59,-133.72\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"382.89,-130.47 372.33,-129.59 380.04,-136.86 382.89,-130.47\"/>\n</g>\n<!-- Production&#45;&gt;CAProduction -->\n<g id=\"edge11\" class=\"edge\">\n<title>Production&#45;&gt;CAProduction</title>\n<path fill=\"none\" stroke=\"black\" d=\"M334,-186.99C334,-170.54 334,-153.38 334,-139.68\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"337.5,-139.52 334,-129.52 330.5,-139.52 337.5,-139.52\"/>\n</g>\n</g>\n</svg>\n</div>","category":"page"},{"location":"ca-with-production/","page":"Model with CA and Production","title":"Model with CA and Production","text":"<div class=\"noweb-label\">file:<i>src/Model/CAP.jl</i></div>","category":"page"},{"location":"ca-with-production/","page":"Model with CA and Production","title":"Model with CA and Production","text":"@compose module CAP\n@mixin Tag, H5Writer, CAProduction\n\nusing ..Common\nusing ..CAProduction: production\nusing ..TimeIntegration\nusing ..WaterDepth\nusing ModuleMixins: @for_each\n\nexport Input, Facies\n\nfunction initial_state(input::Input)\n    ca_state = CellularAutomaton.initial_state(input)\n    for _ in 1:20\n        CellularAutomaton.step!(input)(ca_state)\n    end\n\n    sediment_height = zeros(Height, input.box.grid_size...)\n    return State(\n        step=0, sediment_height=sediment_height,\n        ca=ca_state.ca, ca_priority=ca_state.ca_priority)\nend\n\nfunction step!(input::Input)\n    τ = production(input)\n    step_ca = CellularAutomaton.step!(input)\n\n    function (state::State)\n        if mod(state.step, input.ca_interval) == 0\n            step_ca(state)\n        end\n\n        prod = τ(state)\n        Δη = sum(prod; dims=1)[1, :, :]\n        state.sediment_height .+= Δη\n        state.step += 1\n\n        return H5Writer.DataFrame(\n            production = prod,\n            deposition = prod)\n    end\nend\n\nfunction write_header(fid, input::AbstractInput)\n    @for_each(P -> P.write_header(fid, input), PARENTS)\nend\nend","category":"page"},{"location":"ca-with-production/","page":"Model with CA and Production","title":"Model with CA and Production","text":"","category":"page"},{"location":"stencils/#Stencil-operations","page":"Stencils","title":"Stencil operations","text":"","category":"section"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"A stencil is the common term for computing many-to-one operations on grids. Examples of applications are:","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"Finite difference schemes\nFinite Impulse Response (FIR) filters\nConvolutions (encompassing the previous two)\nCellular Automata","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"Note that for larger convolution kernels, it is often more efficient to perform convolutions in the Fourier domain. On the matter of performance: stencil operations are the textbook example for computations that perform really well on GPUs.","category":"page"},{"location":"stencils/#Implementation","page":"Stencils","title":"Implementation","text":"","category":"section"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"Using these helper functions we can now define a stencil operation. Given the boundary trait, a stencil size and a response function, we can transform an array to a next generation.","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"<div class=\"noweb-label\">⪡stencil-operation⪢≣</div>","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"function stencil(::Type{TIn}, ::Type{TOut}, ::Type{BT}, n::NTuple{dim,Int}, f::Function) where {TIn, TOut, dim, BT <: Boundary{dim}}\n    m = n .÷ 2\n    stencil_shape = range.(.-m, m)\n    stencil = Array{TIn, dim}(undef, n...)\n\n    function(z_in::AbstractArray{TIn, dim}, z_out::AbstractArray{TOut, dim}, args...)\n        @assert (size(z_in) == size(z_out)) \"sizes of arrays need to be equal\"\n        shape = size(z_in)\n        for i in CartesianIndices(shape)\n            for (k, Δi) in enumerate(CartesianIndices(stencil_shape))\n                stencil[k] = offset_value(BT, z_in, i, Δi)\n            end\n            z_out[i] = f(stencil, args...)\n        end\n    end\nend\n\nstencil(::Type{T}, ::Type{BT}, n::NTuple{dim, Int}, f::Function) where {T, dim, BT <: Boundary{dim}} =\n    stencil(T, T, BT, n, f)\n\nconvolution(::Type{TIn}, ::Type{TOut}, ::Type{B}, kernel::AbstractArray{U, dim}) where { dim, TIn, TOut, U, B <: Boundary{dim} } =\n    stencil(TIn, TOut, B, size(kernel), s -> sum(s .* kernel))\n\nconvolution(::Type{B}, kernel::AbstractArray{T, dim}) where {dim, T, B <: Boundary{dim}} =\n    stencil(T, T, B, size(kernel), s -> sum(s .* kernel))","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"More efficient implementations are imaginable. For instance we could use normal unchecked indexing for most of the array, and only use the offset_value function when we really need it. Another optimisation could be to generate parts of the inner loop, and/or do the outer loop in parallel.","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"We will now test this function first on an Elementary CA (ECA), Conway's Game of Life, and a convolution.","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"<details><summary>Stencil module</summary>","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"<div class=\"noweb-label\">file:<i>src/Stencil.jl</i></div>","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"module Stencil\n\nusing ..Boxes: AbstractBox\nusing ..BoundaryTrait\n\nexport stencil, convolution\n\n<<stencil-operation>>\n\nend","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"</details>","category":"page"},{"location":"stencils/#Examples","page":"Stencils","title":"Examples","text":"","category":"section"},{"location":"stencils/#Elementary-Cellular-Automata","page":"Stencils","title":"Elementary Cellular Automata","text":"","category":"section"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"An Elementary Cellular Automata is a one-dimensional CA with two states. Every next generation depends on the direct neighbourhood of three cells. Since there are 2^3 = 8 patterns and two outcomes for every pattern, there are 2^8 = 256 possible ECA.","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"<div class=\"noweb-label\">file:<i>examples/ca/eca.jl</i></div>","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"#| creates: docs/src/_fig/eca.png\n#| requires: src/Stencil.jl\n#| collect: figures\n\nmodule ECA\n    using CarboKitten.BoundaryTrait\n    using CarboKitten.Stencil\n    using CairoMakie\n\n    rule(i::Int) = function (foo::AbstractVector{T}) where T <: Integer\n        d = foo[1]*4 + foo[2]*2 + foo[3]\n        i & (1 << d) == 0 ? 0 : 1\n    end\n\n    function eca(r::Int, n::Int, iter::Int)\n        y = Array{Int}(undef, n, iter)\n        y[:, 1] = zeros(Int, n)\n        y[div(n, 2), 1] = 1\n        stencil_op = stencil(Int, Periodic{1}, (3,), rule(r))\n        for i in 2:iter\n            stencil_op(view(y, :, i-1), view(y, :, i))\n        end\n        y\n    end\n\n    function plot()\n        fig = Figure(size=(1200,400))\n        for (idx, r) in enumerate([18, 30, 110])\n            ax = Axis(fig[1,idx]; title=\"rule $(r)\", yreversed=true, limits=((1, 256), (1, 128)))\n            heatmap!(ax, eca(r, 256, 128); colormap=:Blues)\n        end\n        save(\"docs/src/_fig/eca.png\", fig)\n    end\nend\n\nECA.plot()","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"(Image: )","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"Even these one-dimensional CA show highly complex behaviour. For instance, it has been shown that rule 110 is Turing complete.","category":"page"},{"location":"stencils/#Game-of-Life","page":"Stencils","title":"Game of Life","text":"","category":"section"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"Perhaps the most famous CA is Conway's Game of Life. This is a two-dimensional two-state (dead/alive) CA, with the following rules: a cell is alive in the next generation if it is alive and has two neighbours or if it has three neighbours; in all other cases the cell is dead.","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"<div class=\"noweb-label\">file:<i>examples/ca/life.jl</i></div>","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"#| creates: docs/src/_fig/life.gif\n#| requires: src/Stencil.jl\n#| collect: figures\n\nmodule Life\n    using CarboKitten.BoundaryTrait\n    using CarboKitten.Stencil\n    using GLMakie\n    using .Iterators: take\n\n    \"x is a 3x3 region around the cell at x[2,2].\"\n    rules(x) = let c = x[2, 2], s = sum(x) - c\n        c && s == 2 || s == 3\n    end\n\n    function game_of_life(w, h)\n        y1 = rand(Bool, (w, h))\n        y2 = Array{Bool}(undef, w, h)\n\n        op = stencil(Bool, Periodic{2}, (3, 3), rules)\n        Channel() do ch\n            put!(ch, y1)\n            while true\n                op(y1, y2)\n                (y1, y2) = (y2, y1)\n                put!(ch, y1)\n            end\n        end\n    end\n\n    function plot()\n        life = take(game_of_life(50, 50), 150)\n        fig = Figure()\n        ax = Axis(fig[1,1], aspect=1)\n        record(fig, \"docs/src/_fig/life.gif\", life; framerate=10) do frame\n            heatmap!(ax, frame; colormap=:Blues)\n        end\n    end\nend\n\nLife.plot()","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"(Image: )","category":"page"},{"location":"stencils/#Testing-boundaries-with-a-convolution","page":"Stencils","title":"Testing boundaries with a convolution","text":"","category":"section"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"To test the different boundary types, lets try the following setup. We take a 16x16 image with all zeros except the bottom left gets a value of 1 and the top right pixel gets a value of 2. Now convolve with a Gaussian and see what happens. For the constant boundary, I've set the value to 0.1, to see the effect.","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"(Image: )","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"Notice, that for the periodic boundaries, the bottom left and top right are neighbouring. So there the two pixels appear as a single peak. In the reflected case we see a clear distinction between the two corners.","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"#| creates: docs/src/_fig/boundary_types.png\n#| requires: src/Stencil.jl\n#| collect: figures\n\nmodule Script\n\nusing CarboKitten.BoundaryTrait\nusing CarboKitten.Stencil\nusing CairoMakie\n\nfunction plot_boundary_types()\n    n = 16\n    y0 = zeros(Float64, n, n)\n    y0[1, 1] = 1\n    y0[n, n] = 2\n    x = collect(-2:0.25:2)\n    k = exp.(-(x.^2 .+ x'.^2))\n    k ./= sum(k)\n\n    y_periodic = Array{Float64}(undef, n, n)\n    convolution(Periodic{2}, k)(y0, y_periodic)\n    y_reflected = Array{Float64}(undef, n, n)\n    convolution(Reflected{2}, k)(y0, y_reflected)\n    y_constant = Array{Float64}(undef, n, n)\n    convolution(Constant{2, 0.1}, k)(y0, y_constant)\n\n    fig = Figure(size=(900, 300))\n    for (i, y) in enumerate([y_periodic, y_reflected, y_constant])\n        ax = Axis(fig[1,i]; aspect=1)\n        heatmap!(ax, y; colormap=:viridis)\n    end\n    save(\"docs/src/_fig/boundary_types.png\", fig)\nend\nend \n\nScript.plot_boundary_types()","category":"page"},{"location":"stencils/","page":"Stencils","title":"Stencils","text":"","category":"page"},{"location":"components/sediment_buffer/#Sediment-Buffers","page":"Sediment Buffers","title":"Sediment Buffers","text":"","category":"section"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"<div class=\"component-dag\" style=\"overflow: scroll\"><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.50.0 (20211204.2007)\n -->\n<!-- Pages: 1 -->\n<svg width=\"320pt\" height=\"221pt\"\n viewBox=\"0.00 0.00 320.00 221.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 217)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-217 316,-217 316,4 -4,4\"/>\n<!-- Boxes -->\n<g id=\"node1\" class=\"node\">\n<title>Boxes</title>\n<path fill=\"none\" stroke=\"black\" d=\"M225,-213C225,-213 87,-213 87,-213 81,-213 75,-207 75,-201 75,-201 75,-146 75,-146 75,-140 81,-134 87,-134 87,-134 225,-134 225,-134 231,-134 237,-140 237,-146 237,-146 237,-201 237,-201 237,-207 231,-213 225,-213\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"82,-182.5 230,-182.5 \"/>\n<text text-anchor=\"start\" x=\"132.5\" y=\"-191.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Boxes</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"82,-159.5 82,-182.5 129,-182.5 129,-159.5 82,-159.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"82,-159.5 129,-159.5 129,-182.5 82,-182.5 \"/>\n<text text-anchor=\"start\" x=\"86\" y=\"-167.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"129,-159.5 129,-182.5 183,-182.5 183,-159.5 129,-159.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"129,-159.5 129,-182.5 183,-182.5 183,-159.5 129,-159.5\"/>\n<text text-anchor=\"start\" x=\"133\" y=\"-167.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"183,-159.5 183,-182.5 230,-182.5 230,-159.5 183,-159.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"230,-182.5 183,-182.5 183,-159.5 230,-159.5 \"/>\n<text text-anchor=\"start\" x=\"187\" y=\"-167.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"129,-140.5 129,-159.5 \"/>\n<text text-anchor=\"start\" x=\"86\" y=\"-147.5\" font-family=\"monospace\" font-size=\"10.00\">box</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"183,-140.5 183,-159.5 \"/>\n<text text-anchor=\"start\" x=\"133\" y=\"-147.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"186\" y=\"-147.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- SedimentBuffer -->\n<g id=\"node2\" class=\"node\">\n<title>SedimentBuffer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M300,-98C300,-98 12,-98 12,-98 6,-98 0,-92 0,-86 0,-86 0,-12 0,-12 0,-6 6,0 12,0 12,0 300,0 300,0 306,0 312,-6 312,-12 312,-12 312,-86 312,-86 312,-92 306,-98 300,-98\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-68 305,-68 \"/>\n<text text-anchor=\"start\" x=\"93\" y=\"-76.8\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">SedimentBuffer</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"7,-45 7,-68 154,-68 154,-45 7,-45\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-45 154,-45 154,-68 7,-68 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-52.8\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"154,-45 154,-68 208,-68 208,-45 154,-45\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"154,-45 154,-68 208,-68 208,-45 154,-45\"/>\n<text text-anchor=\"start\" x=\"158\" y=\"-52.8\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"208,-45 208,-68 305,-68 305,-45 208,-45\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"305,-68 208,-68 208,-45 305,-45 \"/>\n<text text-anchor=\"start\" x=\"212\" y=\"-52.8\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"154,-26 154,-45 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-33\" font-family=\"monospace\" font-size=\"10.00\">sediment_buffer_size</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"208,-26 208,-45 \"/>\n<text text-anchor=\"start\" x=\"158\" y=\"-33\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"211\" y=\"-33\" font-family=\"monospace\" font-size=\"10.00\">sediment_buffer</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"154,-7 154,-26 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-14\" font-family=\"monospace\" font-size=\"10.00\">depositional_resolution</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"208,-7 208,-26 \"/>\n<text text-anchor=\"start\" x=\"158\" y=\"-14\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"211\" y=\"-14\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- Boxes&#45;&gt;SedimentBuffer -->\n<g id=\"edge1\" class=\"edge\">\n<title>Boxes&#45;&gt;SedimentBuffer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M156,-133.74C156,-125.68 156,-117.01 156,-108.42\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"159.5,-108.42 156,-98.42 152.5,-108.42 159.5,-108.42\"/>\n</g>\n</g>\n</svg>\n</div>","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"For our models of transport and denudation it is important to remember the facies of the sediment for some time into the past. One way to do this, is to remember all contributions of sediment in a stack. Every time we transport or erode sediment, we can pop parcels from this stack. In a three-dimensional model, we need a 2d grid of stacks. Each stack would have its own memory management (which is computationally expensive), and most resources are spent on areas with very little accretion. (In fact, this is what CarboCAT does. We believe this design choice is the main contributor to the difference in run-time between CarboCAT and CarboKitten).","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"Instead, we choose a fixed size sediment buffer. Each cell in the buffer represents a parcel of sediment, where we store the relative fractions of each contributing facies. This buffer is only used to determine the facies of disintegrated sediment. The output of the overal model is still the amount of sediment for each iteration.","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"We can't stress this enough: any inaccuracy in using a fixed size buffer with a chosen granularity only impacts the precision of the composition of transported sediment. Even then, the schema is conservative: no sediment is lost unless erosion is so rampant that it eats through the entire sediment stack. In that case, a simulation should be run with a larger buffer.","category":"page"},{"location":"components/sediment_buffer/#Data-structure","page":"Sediment Buffers","title":"Data structure","text":"","category":"section"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"While the sediment buffer is allocated as a single 4-dimensional array (depth, facies, x, y), it is best to explain its functioning from the perspective of a single cell in our model. We are left with two dimensions: depth (rows) and facies (columns).","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"We choose to have the head of our sediment stack always be at the first row. When sediment out-grows the buffer, the deepenst layers are dropped from memory. The head can contain an incomplete amount of sediment, while all rows below the head are either full or empty. When sediment is pushed to the stack and the head row overflows, all rows are copied down one row and the surplus is assigned to the now empty head row. The inverse happens when removing (popping) material from the stack (in computer science stacks are pushed on and popped from). This process is illustrated below.","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"(Image: sediment buffer diagram)","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"Above we see a buffer. First we push a parcel of size 34, then we pop an amount of 12. This popped parcel will have different fractions from the pushed one, since it also draws from the half filled row that was in the stack before pushing. In this sense, a small amount of facies mixing will take place, depending on the depositional resolution chosen.","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"Our implementation is such that each cell in the buffer is contiguous in memory. Thus, copying rows of unstrided memory should be very efficient, although the performance remains to be tested.","category":"page"},{"location":"components/sediment_buffer/#Implementation","page":"Sediment Buffers","title":"Implementation","text":"","category":"section"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"We define two functions push_sediment! and pop_sediment!. Given a s times n matrix, where n is the number of facies types and s is the depth of the stack, we can grow and shrink sediment. These functions are unit-free, setting Delta z to be equal to 1.","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"<div class=\"noweb-label\">file:<i>test/SedimentStackSpec.jl</i></div>","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"@testset \"SedimentStack\" begin\n  using CarboKitten.SedimentStack: push_sediment!, pop_sediment!\n  stack = zeros(Float64, 10, 3)\n  @test pop_sediment!(stack, 0.0) == [0.0, 0.0, 0.0]\n  push_sediment!(stack, [5.0, 0, 0])\n  @test pop_sediment!(stack, 1.5) == [1.5, 0.0, 0.0]\n  push_sediment!(stack, [0.0, 2.0, 0.0])   # (0 0.5) (0 1) (0.5 0.5) (1 0) ...\n  @test pop_sediment!(stack, 2.0) == [0.25, 1.75, 0.0]\n  @test pop_sediment!(stack, 1.5) == [1.25, 0.25, 0.0]\n  @test pop_sediment!(stack, 0.0) == [0.0, 0.0, 0.0]\nend\n\n@testset \"SedimentArray\" begin\n  using CarboKitten.SedimentStack: push_sediment!, peek_sediment\n  sediment = zeros(Float64, 10, 3, 5, 5)\n  for x in 1:10\n    production = rand(3, 5, 5)\n    push_sediment!(sediment, production)\n  end\n  a = peek_sediment(sediment, 1.0)\n  @test all(sum(a; dims=1) .≈ 1.0)\nend","category":"page"},{"location":"components/sediment_buffer/#Pushing-sediment","page":"Sediment Buffers","title":"Pushing sediment","text":"","category":"section"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"The single-cell version of push_sediment! takes as argument col a column (physically speaking a column of sediment) represented by a s times n-matrix and a parcel a n-vector.","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"<div class=\"noweb-label\">⪡sediment-stack-impl⪢≣</div>","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"function push_sediment!(col::AbstractMatrix{F}, parcel::AbstractVector{F}) where F <: Real\n  <<push-sediment>>\nend","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"First we determine the total sediment amount Delta, being the sum of the parcel, as well as the amount of sediment in our bucket, the head row.","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"<div class=\"noweb-label\">⪡push-sediment⪢≣</div>","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"Δ = sum(parcel)\nbucket = sum(col[1, :])","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"If the bucket has enough space left for the parcel, we can just add the parcel to the bucket and return.","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"<div class=\"noweb-label\">⪡push-sediment⪢≣</div>","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"if bucket + Δ < 1.0\n  col[1,:] .+= parcel\n  return\nend","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"Otherwise, we compute the normalized fractions frac of facies in the parcel. We add as much sediment as we can to fill the bucket and copy rows down as far as needed.","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"<div class=\"noweb-label\">⪡push-sediment⪢≣</div>","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"frac = parcel ./ Δ\ncol[1,:] .+= frac .* (1.0 - bucket)\nΔ -= (1.0 - bucket)\nn = floor(Int64, Δ)\ncol[n+2:end,:] = col[1:end-n-1,:]","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"If the parcel has enough material left to fill more rows, those are all filled with the fractions in frac. The head row is assigned whatever is left.","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"<div class=\"noweb-label\">⪡push-sediment⪢≣</div>","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"na = [CartesianIndex()]\ncol[2:n+1,:] .= frac[na,:]\nΔ -= n\ncol[1,:] .= frac .* Δ","category":"page"},{"location":"components/sediment_buffer/#Popping-sediment","page":"Sediment Buffers","title":"Popping sediment","text":"","category":"section"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"Similar to push_sediment! we have pop_sediment!. We give pop_sediment! the sedimentary column col and the total amount of sediment we require. There is a bit that we will reuse called pop_fraction, which only works if the amount of popped sediment is lower than the contents of the bucket.","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"<div class=\"noweb-label\">⪡sediment-stack-impl⪢≣</div>","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"@inline function pop_fraction(col::AbstractMatrix{F}, Δ::F) where F <: Real\n  bucket = sum(col[1,:])\n  if Δ == 0 || bucket == 0\n    return zeros(F, size(col)[2])\n  end\n\n  @assert Δ < bucket \"pop_fraction can only pop from the top cell: $(col), $(Δ)\"\n  parcel = (Δ / bucket) .* col[1,:]\n  col[1,:] .-= parcel\n  return parcel\nend\n\nfunction pop_sediment!(col::AbstractMatrix{F}, Δ::F) where F <: Real  # -> Vector{F}\n  <<pop-sediment>>\nend","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"We start by computing the bucket size again. If it is greater than the required amount, we call pop_fraction.","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"<div class=\"noweb-label\">⪡pop-sediment⪢≣</div>","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"bucket = sum(col[1,:])\nif Δ < bucket\n  return pop_fraction(col, Δ)\nend","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"Otherwise, we start a parcel with the contents of the bucket. Add to that the remaining material in rows below. Now we copy rows from below, setting the bottom n rows to 0. The last step is to call pop_fraction one more time with the remaining required amount.","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"<div class=\"noweb-label\">⪡pop-sediment⪢≣</div>","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"parcel = copy(col[1,:])\nΔ -= bucket\nn = floor(Int64, Δ)\n\nparcel .+= sum(col[2:n+1,:]; dims=1)'\ncol[1:end-n-1, :] = col[n+2:end, :]\ncol[end-n-1:end, :] .= 0\nΔ -= n\n\nparcel .+= pop_fraction(col, Δ)\nreturn parcel","category":"page"},{"location":"components/sediment_buffer/#Peeking","page":"Sediment Buffers","title":"Peeking","text":"","category":"section"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"Instead of popping sediment, we can also peek at the stack with peek_sediment!, which is a non-destructive way to inspect what the returned parcel would be if we were to call pop_sediment! with the same arguments.","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"<details><summary>SedimentStack impl</summary>","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"<div class=\"noweb-label\">file:<i>src/SedimentStack.jl</i></div>","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"module SedimentStack\n\nexport push_sediment!, pop_sediment!, peek_sediment\n\n<<sediment-stack-impl>>\n\nfunction push_sediment!(sediment::AbstractArray{F, 4}, p::AbstractArray{F, 3}) where F <: Real\n  _, x, y = size(p)\n  @views for i in CartesianIndices((x, y))\n    push_sediment!(sediment[:, :, i[1], i[2]], p[:, i[1], i[2]])\n  end\nend\n\n\nfunction peek_sediment(col::AbstractMatrix{F}, Δ::F) where F <: Real  # -> Vector{F}\n  if Δ == 0\n      return zeros(F, size(col)[2])\n  end\n\n  bucket = sum(col[1,:])\n  if Δ < bucket\n    parcel = (Δ / bucket) .* col[1,:]\n    return parcel\n  end\n\n  parcel = copy(col[1,:])\n  Δ -= bucket\n  n = floor(Int64, Δ)\n\n  parcel .+= sum(col[2:n+1,:]; dims=1)'\n  Δ -= n\n\n  last_bit = (Δ / sum(col[n+2,:])) .* col[n+2,:]\n  parcel .+= last_bit\n\n  return parcel\nend\n\nfunction peek_sediment(sediment::AbstractArray{F,4}, Δ::F) where F <: Real\n  _, f, x, y = size(sediment)\n  out = Array{F, 3}(undef, f, x, y)\n  for i in CartesianIndices((x, y))\n    out[:, i[1], i[2]] = peek_sediment(@view(sediment[:, :, i[1], i[2]]), Δ)\n  end\n  return out\nend\n\nfunction pop_sediment!(cols::AbstractArray{F, 4}, amount::AbstractArray{F, 2}, out::AbstractArray{F, 3}) where F <: Real\n  @views for i in CartesianIndices(amount)\n      out[:, i[1], i[2]] = pop_sediment!(cols[:, :, i[1], i[2]], amount[i[1], i[2]])\n  end\nend\n\nend # module","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"</details>","category":"page"},{"location":"components/sediment_buffer/#Component","page":"Sediment Buffers","title":"Component","text":"","category":"section"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"<div class=\"noweb-label\">file:<i>src/Components/SedimentBuffer.jl</i></div>","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"@compose module SedimentBuffer\n@mixin Boxes\n\nusing ..Common\nusing CarboKitten.SedimentStack: pop_sediment!, push_sediment!, peek_sediment\n\nexport pop_sediment!, push_sediment!, peek_sediment\n\n@kwdef struct Input <: AbstractInput\n    sediment_buffer_size::Int = 50\n    depositional_resolution::Amount = 0.5u\"m\"\nend\n\n@kwdef mutable struct State <: AbstractState\n    sediment_buffer::Array{Float64,4}\nend\n\nend","category":"page"},{"location":"components/sediment_buffer/","page":"Sediment Buffers","title":"Sediment Buffers","text":"","category":"page"},{"location":"components/hdf5/#HDF5-Output","page":"HDF5 Writer","title":"HDF5 Output","text":"","category":"section"},{"location":"components/hdf5/","page":"HDF5 Writer","title":"HDF5 Writer","text":"<div class=\"component-dag\" style=\"overflow: scroll\"><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.50.0 (20211204.2007)\n -->\n<!-- Pages: 1 -->\n<svg width=\"497pt\" height=\"312pt\"\n viewBox=\"0.00 0.00 497.00 312.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 308)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-308 493,-308 493,4 -4,4\"/>\n<!-- Boxes -->\n<g id=\"node1\" class=\"node\">\n<title>Boxes</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150,-304C150,-304 12,-304 12,-304 6,-304 0,-298 0,-292 0,-292 0,-237 0,-237 0,-231 6,-225 12,-225 12,-225 150,-225 150,-225 156,-225 162,-231 162,-237 162,-237 162,-292 162,-292 162,-298 156,-304 150,-304\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-273.5 155,-273.5 \"/>\n<text text-anchor=\"start\" x=\"57.5\" y=\"-282.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Boxes</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"7,-250.5 7,-273.5 54,-273.5 54,-250.5 7,-250.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-250.5 54,-250.5 54,-273.5 7,-273.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-258.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"54,-250.5 54,-273.5 108,-273.5 108,-250.5 54,-250.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"54,-250.5 54,-273.5 108,-273.5 108,-250.5 54,-250.5\"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-258.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"108,-250.5 108,-273.5 155,-273.5 155,-250.5 108,-250.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"155,-273.5 108,-273.5 108,-250.5 155,-250.5 \"/>\n<text text-anchor=\"start\" x=\"112\" y=\"-258.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"54,-231.5 54,-250.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\">box</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"108,-231.5 108,-250.5 \"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"111\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- WaterDepth -->\n<g id=\"node3\" class=\"node\">\n<title>WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M297,-189C297,-189 45,-189 45,-189 39,-189 33,-183 33,-177 33,-177 33,-84 33,-84 33,-78 39,-72 45,-72 45,-72 297,-72 297,-72 303,-72 309,-78 309,-84 309,-84 309,-177 309,-177 309,-183 303,-189 297,-189\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"40,-158.5 302,-158.5 \"/>\n<text text-anchor=\"start\" x=\"123.5\" y=\"-167.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">WaterDepth</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"40,-135.5 40,-158.5 151,-158.5 151,-135.5 40,-135.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"40,-135.5 151,-135.5 151,-158.5 40,-158.5 \"/>\n<text text-anchor=\"start\" x=\"44\" y=\"-143.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"151,-135.5 151,-158.5 205,-158.5 205,-135.5 151,-135.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"151,-135.5 151,-158.5 205,-158.5 205,-135.5 151,-135.5\"/>\n<text text-anchor=\"start\" x=\"155\" y=\"-143.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"205,-135.5 205,-158.5 302,-158.5 302,-135.5 205,-135.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"302,-158.5 205,-158.5 205,-135.5 302,-135.5 \"/>\n<text text-anchor=\"start\" x=\"209\" y=\"-143.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"151,-116.5 151,-135.5 \"/>\n<text text-anchor=\"start\" x=\"44\" y=\"-123.5\" font-family=\"monospace\" font-size=\"10.00\">sea_level</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"205,-116.5 205,-135.5 \"/>\n<text text-anchor=\"start\" x=\"155\" y=\"-123.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"208\" y=\"-123.5\" font-family=\"monospace\" font-size=\"10.00\">sediment_height</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"151,-97.5 151,-116.5 \"/>\n<text text-anchor=\"start\" x=\"44\" y=\"-104.5\" font-family=\"monospace\" font-size=\"10.00\">bedrock_elevation</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"205,-97.5 205,-116.5 \"/>\n<text text-anchor=\"start\" x=\"155\" y=\"-104.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"208\" y=\"-104.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<polyline fill=\"none\" stroke=\"black\" points=\"151,-78.5 151,-97.5 \"/>\n<text text-anchor=\"start\" x=\"44\" y=\"-85.5\" font-family=\"monospace\" font-size=\"10.00\">subsidence_rate</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"205,-78.5 205,-97.5 \"/>\n<text text-anchor=\"start\" x=\"155\" y=\"-85.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"208\" y=\"-85.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- Boxes&#45;&gt;WaterDepth -->\n<g id=\"edge2\" class=\"edge\">\n<title>Boxes&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M107.27,-224.97C113.07,-216.46 119.38,-207.21 125.69,-197.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"128.73,-199.7 131.48,-189.47 122.95,-195.76 128.73,-199.7\"/>\n</g>\n<!-- TimeIntegration -->\n<g id=\"node2\" class=\"node\">\n<title>TimeIntegration</title>\n<path fill=\"none\" stroke=\"black\" d=\"M330,-304C330,-304 192,-304 192,-304 186,-304 180,-298 180,-292 180,-292 180,-237 180,-237 180,-231 186,-225 192,-225 192,-225 330,-225 330,-225 336,-225 342,-231 342,-237 342,-237 342,-292 342,-292 342,-298 336,-304 330,-304\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"187,-273.5 335,-273.5 \"/>\n<text text-anchor=\"start\" x=\"195.5\" y=\"-282.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">TimeIntegration</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"187,-250.5 187,-273.5 234,-273.5 234,-250.5 187,-250.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"187,-250.5 234,-250.5 234,-273.5 187,-273.5 \"/>\n<text text-anchor=\"start\" x=\"191\" y=\"-258.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"234,-250.5 234,-273.5 288,-273.5 288,-250.5 234,-250.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"234,-250.5 234,-273.5 288,-273.5 288,-250.5 234,-250.5\"/>\n<text text-anchor=\"start\" x=\"238\" y=\"-258.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"288,-250.5 288,-273.5 335,-273.5 335,-250.5 288,-250.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"335,-273.5 288,-273.5 288,-250.5 335,-250.5 \"/>\n<text text-anchor=\"start\" x=\"292\" y=\"-258.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"234,-231.5 234,-250.5 \"/>\n<text text-anchor=\"start\" x=\"191\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\">time</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"288,-231.5 288,-250.5 \"/>\n<text text-anchor=\"start\" x=\"238\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"291\" y=\"-238.5\" font-family=\"monospace\" font-size=\"10.00\">step</text>\n</g>\n<!-- TimeIntegration&#45;&gt;WaterDepth -->\n<g id=\"edge1\" class=\"edge\">\n<title>TimeIntegration&#45;&gt;WaterDepth</title>\n<path fill=\"none\" stroke=\"black\" d=\"M234.73,-224.97C228.93,-216.46 222.62,-207.21 216.31,-197.95\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"219.05,-195.76 210.52,-189.47 213.27,-199.7 219.05,-195.76\"/>\n</g>\n<!-- H5Writer -->\n<g id=\"node5\" class=\"node\">\n<title>H5Writer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M321.5,-36C321.5,-36 256.5,-36 256.5,-36 250.5,-36 244.5,-30 244.5,-24 244.5,-24 244.5,-12 244.5,-12 244.5,-6 250.5,0 256.5,0 256.5,0 321.5,0 321.5,0 327.5,0 333.5,-6 333.5,-12 333.5,-12 333.5,-24 333.5,-24 333.5,-30 327.5,-36 321.5,-36\"/>\n<text text-anchor=\"start\" x=\"251.5\" y=\"-15.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">H5Writer</text>\n</g>\n<!-- WaterDepth&#45;&gt;H5Writer -->\n<g id=\"edge4\" class=\"edge\">\n<title>WaterDepth&#45;&gt;H5Writer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M232.42,-71.98C243.36,-61.74 254.18,-51.6 263.39,-42.98\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"265.81,-45.51 270.71,-36.12 261.02,-40.41 265.81,-45.51\"/>\n</g>\n<!-- FaciesBase -->\n<g id=\"node4\" class=\"node\">\n<title>FaciesBase</title>\n<path fill=\"none\" stroke=\"black\" d=\"M477,-170C477,-170 339,-170 339,-170 333,-170 327,-164 327,-158 327,-158 327,-103 327,-103 327,-97 333,-91 339,-91 339,-91 477,-91 477,-91 483,-91 489,-97 489,-103 489,-103 489,-158 489,-158 489,-164 483,-170 477,-170\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"334,-139.5 482,-139.5 \"/>\n<text text-anchor=\"start\" x=\"364\" y=\"-148.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">FaciesBase</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"334,-116.5 334,-139.5 381,-139.5 381,-116.5 334,-116.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"334,-116.5 381,-116.5 381,-139.5 334,-139.5 \"/>\n<text text-anchor=\"start\" x=\"338\" y=\"-124.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"381,-116.5 381,-139.5 435,-139.5 435,-116.5 381,-116.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"381,-116.5 381,-139.5 435,-139.5 435,-116.5 381,-116.5\"/>\n<text text-anchor=\"start\" x=\"385\" y=\"-124.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"435,-116.5 435,-139.5 482,-139.5 482,-116.5 435,-116.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"482,-139.5 435,-139.5 435,-116.5 482,-116.5 \"/>\n<text text-anchor=\"start\" x=\"439\" y=\"-124.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"381,-97.5 381,-116.5 \"/>\n<text text-anchor=\"start\" x=\"338\" y=\"-104.5\" font-family=\"monospace\" font-size=\"10.00\">facies</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"435,-97.5 435,-116.5 \"/>\n<text text-anchor=\"start\" x=\"385\" y=\"-104.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"438\" y=\"-104.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- FaciesBase&#45;&gt;H5Writer -->\n<g id=\"edge3\" class=\"edge\">\n<title>FaciesBase&#45;&gt;H5Writer</title>\n<path fill=\"none\" stroke=\"black\" d=\"M366.38,-90.85C349.26,-74.95 329.96,-57.03 314.92,-43.06\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"317.18,-40.39 307.47,-36.15 312.42,-45.52 317.18,-40.39\"/>\n</g>\n</g>\n</svg>\n</div>","category":"page"},{"location":"components/hdf5/","page":"HDF5 Writer","title":"HDF5 Writer","text":"We write output to HDF5.","category":"page"},{"location":"components/hdf5/","page":"HDF5 Writer","title":"HDF5 Writer","text":"<div class=\"noweb-label\">file:<i>src/Components/H5Writer.jl</i></div>","category":"page"},{"location":"components/hdf5/","page":"HDF5 Writer","title":"HDF5 Writer","text":"@compose module H5Writer\n    using ..Common\n    using HDF5\n    using ProgressLogging\n\n    @mixin Boxes, TimeIntegration, FaciesBase, WaterDepth\n\n    export run\n\n    @kwdef struct DataFrame\n        disintegration::Union{Array{Amount,3},Nothing} = nothing   # facies, x, y\n        production::Union{Array{Amount,3},Nothing} = nothing\n        deposition::Union{Array{Amount,3},Nothing} = nothing\n    end\n\n    Base.zeros(::Type{DataFrame}, input::AbstractInput) = DataFrame(\n        disintegration=zeros(Amount, n_facies(input), input.box.grid_size...),\n        production=zeros(Amount, n_facies(input), input.box.grid_size...),\n        deposition=zeros(Amount, n_facies(input), input.box.grid_size...))\n\n    function increment!(a::DataFrame, b::DataFrame)\n        if !isnothing(b.disintegration)\n            a.disintegration .+= b.disintegration\n        end\n        if !isnothing(b.production)\n            a.production .+= b.production\n        end\n        if !isnothing(b.deposition)\n            a.deposition .+= b.deposition\n        end\n    end\n\n    function create_dataset(fid, input::AbstractInput)\n        nf = n_facies(input)\n        nw = n_writes(input)\n\n        HDF5.create_dataset(fid, \"production\", datatype(Float64),\n            dataspace(nf, input.box.grid_size..., nw),\n            chunk=(nf, input.box.grid_size..., 1), deflate=3)\n        HDF5.create_dataset(fid, \"disintegration\", datatype(Float64),\n            dataspace(nf, input.box.grid_size..., nw),\n            chunk=(nf, input.box.grid_size..., 1), deflate=3)\n        HDF5.create_dataset(fid, \"deposition\", datatype(Float64),\n            dataspace(nf, input.box.grid_size..., nw),\n            chunk=(nf, input.box.grid_size..., 1), deflate=3)\n        HDF5.create_dataset(fid, \"sediment_height\", datatype(Float64),\n            dataspace(input.box.grid_size..., nw + 1),\n            chunk=(input.box.grid_size..., 1), deflate=3)\n    end\n\n    function write_state(fid, idx::Int, state::AbstractState)\n        fid[\"sediment_height\"][:, :, idx] = state.sediment_height |> in_units_of(u\"m\")\n    end\n\n    function write_frame(fid, idx::Int, frame::DataFrame)\n        fid[\"production\"][:, :, :, idx] = frame.production |> in_units_of(u\"m\")\n        fid[\"disintegration\"][:, :, :, idx] = frame.disintegration |> in_units_of(u\"m\")\n        fid[\"deposition\"][:, :, :, idx] = frame.deposition |> in_units_of(u\"m\")\n    end\n\n    function run(::Type{Model{M}}, input::AbstractInput, filename::AbstractString) where M\n        state = M.initial_state(input)\n        step! = M.step!(input)\n\n        h5open(filename, \"w\") do fid\n            create_group(fid, \"input\")\n            M.write_header(fid, input)\n\n            create_dataset(fid, input)\n            write_state(fid, 1, state)\n            @progress for w = 1:n_writes(input)\n                df = zeros(DataFrame, input)\n                for n = 1:input.time.write_interval\n                    increment!(df, step!(state))\n                end\n                write_frame(fid, w, df)\n                write_state(fid, w+1, state)\n            end\n        end\n    end\nend","category":"page"},{"location":"components/hdf5/","page":"HDF5 Writer","title":"HDF5 Writer","text":"","category":"page"},{"location":"components/time/#Time","page":"Time","title":"Time","text":"","category":"section"},{"location":"components/time/","page":"Time","title":"Time","text":"<div class=\"component-dag\" style=\"overflow: scroll\"><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.50.0 (20211204.2007)\n -->\n<!-- Pages: 1 -->\n<svg width=\"170pt\" height=\"87pt\"\n viewBox=\"0.00 0.00 170.00 87.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 83)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-83 166,-83 166,4 -4,4\"/>\n<!-- TimeIntegration -->\n<g id=\"node1\" class=\"node\">\n<title>TimeIntegration</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150,-79C150,-79 12,-79 12,-79 6,-79 0,-73 0,-67 0,-67 0,-12 0,-12 0,-6 6,0 12,0 12,0 150,0 150,0 156,0 162,-6 162,-12 162,-12 162,-67 162,-67 162,-73 156,-79 150,-79\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-48.5 155,-48.5 \"/>\n<text text-anchor=\"start\" x=\"15.5\" y=\"-57.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">TimeIntegration</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"7,-25.5 7,-48.5 54,-48.5 54,-25.5 7,-25.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-25.5 54,-25.5 54,-48.5 7,-48.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-33.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"54,-25.5 54,-48.5 108,-48.5 108,-25.5 54,-25.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"54,-25.5 54,-48.5 108,-48.5 108,-25.5 54,-25.5\"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-33.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"108,-25.5 108,-48.5 155,-48.5 155,-25.5 108,-25.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"155,-48.5 108,-48.5 108,-25.5 155,-25.5 \"/>\n<text text-anchor=\"start\" x=\"112\" y=\"-33.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"54,-6.5 54,-25.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\">time</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"108,-6.5 108,-25.5 \"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"111\" y=\"-13.5\" font-family=\"monospace\" font-size=\"10.00\">step</text>\n</g>\n</g>\n</svg>\n</div>","category":"page"},{"location":"components/time/","page":"Time","title":"Time","text":"<div class=\"noweb-label\">file:<i>test/Components/TimeIntegrationSpec.jl</i></div>","category":"page"},{"location":"components/time/","page":"Time","title":"Time","text":"module TimeIntegrationSpec\nusing Test\nusing CarboKitten.Components.Common\n\n@testset \"Components/TimeIntegration\" begin\n    using CarboKitten.Components.TimeIntegration: write_times, Input, State, time, n_writes\n\n    let input = Input(time=TimeProperties(\n        Δt = 0.2u\"Myr\", steps = 5))\n      @test write_times(input) |> collect == [0.0, 0.2, 0.4, 0.6, 0.8, 1.0] .* u\"Myr\"\n      @test time(input, State(4)) == 0.8u\"Myr\"\n      @test n_writes(input) == 5\n    end\n\n    let input = Input(time=TimeProperties(\n        Δt = 0.02u\"Myr\", steps = 50, write_interval = 10, t0 = -1.0u\"Myr\"))\n      @test write_times(input) |> collect == [-1.0, -0.8, -0.6, -0.4, -0.2, 0.0] .* u\"Myr\"\n      @test n_writes(input) == 5\n      @test time(input, State(25)) == -0.5u\"Myr\"\n    end\nend\nend","category":"page"},{"location":"components/time/","page":"Time","title":"Time","text":"<div class=\"noweb-label\">file:<i>src/Components/TimeIntegration.jl</i></div>","category":"page"},{"location":"components/time/","page":"Time","title":"Time","text":"@compose module TimeIntegration\nusing ..Common\nusing HDF5\nexport time, n_writes\n\n@kwdef struct Input <: AbstractInput\n    time::TimeProperties\nend\n\n@kwdef mutable struct State <: AbstractState\n    step::Int\nend\n\nState(_::AbstractInput) = State(0)\n\ntime(input::AbstractInput, state::AbstractState) = input.time.t0 + state.step * input.time.Δt\n\nwrite_times(input::AbstractInput) = write_times(input.time)\nwrite_times(time::TimeProperties) = (0:n_writes(time)) .* (time.Δt * time.write_interval) .+ time.t0\n\nn_writes(input::AbstractInput) = n_writes(input.time)\nn_writes(time::TimeProperties) = div(time.steps, time.write_interval)\n\nfunction write_header(fid, input::AbstractInput)\n    gid = fid[\"input\"]\n    attr = attributes(gid)\n\n    gid[\"t\"] = write_times(input) .|> in_units_of(u\"Myr\")\n    attr[\"t0\"] = input.time.t0 |> in_units_of(u\"Myr\")\n    attr[\"delta_t\"] = input.time.Δt |> in_units_of(u\"Myr\")\n    attr[\"write_interval\"] = input.time.write_interval\n    attr[\"time_steps\"] = input.time.steps\nend\n\nend","category":"page"},{"location":"components/time/","page":"Time","title":"Time","text":"","category":"page"},{"location":"#CarboKitten.jl:-Modeling-Carbonate-Platforms-in-Julia","page":"Introduction","title":"CarboKitten.jl: Modeling Carbonate Platforms in Julia","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Entangled badge)","category":"page"},{"location":"#About","page":"Introduction","title":"About","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"CarboKitten is a reimplementation of Peter Burgess' CarboCAT, a model for generating carbonate platform stratigraphies. CarboKitten is a three-dimensional model, having two spatial dimensions and one for stored stediment.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Features:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Cellular Automata to regulate facies type\nAdvection-diffusion based sediment transport","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: Sample output stratigraphy)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"CarboKitten is written in Julia for performance and extensibility.","category":"page"},{"location":"#Julia-Quickstarter","page":"Introduction","title":"Julia Quickstarter","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This code is written in Julia. You may want to check out the following references:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Julia Documentation\nTutorial on Julia for Science and Engineering","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"There are several ways to work with Julia that may be a bit different from what you're used to, if that is Matlab, Python or R.","category":"page"},{"location":"#Installing-Julia","page":"Introduction","title":"Installing Julia","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The best way to install Julia is to use juliaup at github.com/JuliaLang/juliaup.","category":"page"},{"location":"#REPL","page":"Introduction","title":"REPL","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The most basic way to work in Julia, is to start the REPL (Read Eval Print Loop).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"$ julia\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.9.3 (2023-08-24)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia>","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"From here you may use CarboKitten using CarboKitten and run any of the code inside. To work with CarboKitten efficiently, you may want to load Revise. Revise auto-detects changes to loaded code and makes it easy to rerun.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Additionally you should learn how to work with Julia packages. If you want to experiment with things, try to create a new environment in an empty folder and add CarboKitten as a dev dependency:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"pkg> dev <path to CarboKitten>","category":"page"},{"location":"#VS-Code","page":"Introduction","title":"VS Code","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"VSCode has very good support for working with Julia. Install the official Julia plugin and you should be good to go. Explore options by pressing Ctrl+Shift+P and type Julia to see what you can do. For example: start a REPL, run current script etc.","category":"page"},{"location":"#Jupyter","page":"Introduction","title":"Jupyter","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"You can run Julia code from Jupyter if you install the Julia kernel. Press ] in the REPL to get into Pkg-mode, the prompt will change","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(CarboKitten) pkg>","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"You may install the IJulia kernel with add IJulia.","category":"page"},{"location":"#Pluto","page":"Introduction","title":"Pluto","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"An alternative (and in our opinion superior) notebook interface is called Pluto.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Pluto is reactive: changes to code cells automatically update downstream dependencies.\nPluto notebooks are written to regular Julia files and can (though maybe shouldn't) be run independent from Pluto.\nThe user interface of Pluto is slightly less mature than Jupyter","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"In Pkg-mode say add Pluto.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> using Pluto\n\njulia> Pluto.run()\n[ Info: Loading...\n┌ Info:\n└ Opening http://localhost:1234/?secret=xyzxyzzy in your default browser... ~ have fun!\n┌ Info:\n│ Press Ctrl+C in this terminal to stop Pluto\n└","category":"page"},{"location":"#Plotting","page":"Introduction","title":"Plotting","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The most used library to do plotting in Julia is called Plots.jl. However, this library comes with a fair share of problems: there are a number of back-ends for which the generated plots may look slightly different. Here \"back-end\" means some plotting library written in a different language than Julia.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"A nicer plotting library that also happens to be a bit more versatile is Makie.jl. This has three back-ends that are CairoMakie, GLMakie and WGLMakie. These are all written in Julia, but they focus on different kinds of results. CairoMakie is relatively slow but results in publication quality vector graphics: SVG or PDF. GLMakie is very fast, renders on your graphics card, but only produces raster images, say PNG. Then WGLMakie does a similar thing, but through the web-browser.","category":"page"},{"location":"#Design-style","page":"Introduction","title":"Design style","text":"","category":"section"},{"location":"#Input-structures","page":"Introduction","title":"Input structures","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Input datastructures are always @kwdef. This makes it easier to understand and modify simulation scripts.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Different components of CarboKitten can work a variety of input types, as long as their expected data members are present. TODO: systematically document type requirements for each component.","category":"page"},{"location":"#Output-data","page":"Introduction","title":"Output data","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"All output is written to HDF5 files. Optionally, you may export parts of the output data to CSV files for further analysis.","category":"page"},{"location":"#Partial-functions","page":"Introduction","title":"Partial functions","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Most of the model code is written in the following particular pattern:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"function component(input)\n    prepare(input)\n\n    return function(state)\n        iterate!(state)\n    end\nend","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"In this case the prepare() statement is run once at the beginning of a model run, while the iterate!(state) statement, possibly modifying the state variable, is being run every iteration.","category":"page"},{"location":"#Entangled","page":"Introduction","title":"Entangled","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"If you plan to make a contribution to the core of CarboKitten, you should be aware of Entangled.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The documentation for CarboKitten is using Entangled for Literate Programming. This means that code blocks in the documentation contribute to the actual functioning code in the library. When you develop the library code, you should have the Entangled daemon running to keep the documentation synchronized. Included in the CarboKitten repository is a pyproject.toml that manages the Entangled installation for you through Poetry; alternatively, you may install Entangled through pip install entangled-cli.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"To install, run poetry install in the project root, then:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"poetry run entangled watch","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Entangled is still under development and it may occur that the daemon complains about not knowing wether to tangle or stitch, for example when you've accidentally written both markdown and source code. If this happens you may manually entangled tangle or entangled stitch with the --force argument to decide the issue. It may be worth saving your work in version control before doing so.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"A somewhat frequent occurence is that you forgot to run entangled watch while developing. In this case, commit the work you have done to git, then run entangled tangle or entangled stitch (whichever applies). Your files are now back in their old state, but you can git restore the edits you have made and run entangled sync again to propagate the changes. The project should be in a good state again.","category":"page"},{"location":"#Building-Documentation","page":"Introduction","title":"Building Documentation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"To recreate the plots in the documentation run","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"poetry run brei figures","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The documentation can be rendered with Documenter.jl.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia --workenv=docs docs/make.jl","category":"page"},{"location":"#Project-structure","page":"Introduction","title":"Project structure","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":".\n├── data                # data files\n├── docs                # documentation\n│   ├── make.jl         # docs build script\n│   ├── Manifest.toml   #\n│   ├── Project.toml    # dependencies for building docs\n│   └── src             # markdown source for docs\n├── entangled.toml      # entangled config\n├── examples            # example scripts\n├── Makefile            # command-line short hands\n├── Manifest.toml       #\n├── Project.toml        # project dependencies\n├── pyproject.toml      # dependencies for running Entangled\n├── README.md           #\n├── src                 # tangled library source\n└── test                # unit tests","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The figures from the documentation in \"docs/src/fig\" are git tracked, but are often regenerated when you change some of their direct dependencies. This makes switching branches harder, it would require issuing \"git stash\" first. We have made sure that the regenerated figures appear in docs/src/_fig and are not git tracked. There is a task in pyproject.toml that takes care of copying from docs/src/_fig to docs/src/fig when this repo is cloned:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"poetry run brei copy_figures","category":"page"},{"location":"#Authors","page":"Introduction","title":"Authors","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Lead engineer: Johan Hidding Netherlands eScience Center email: j.hidding [at] esciencecenter.nl Web page: www.esciencecenter.nl/team/johan-hidding-msc/ ORCID: 0000-0002-7550-1796","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Denudation modelling: Xianyi Liu Utrecht University email: x.liu6 [at] uu.nl Web page: www.uu.nl/staff/XLiu6 ORCID:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Original CarboCAT author: Peter Burgess University of Liverpool Web page: www.liverpool.ac.uk/environmental-sciences/staff/peter-burgess","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Project lead: Emilia Jarochowska Utrecht University email: e.b.jarochowska [at] uu.nl Web page: www.uu.nl/staff/EBJarochowska ORCID: 0000-0001-8937-9405","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Other team members:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Niklas Hohmann Utrecht University email: n.h.hohmann [at] uu.nl Web page: www.uu.nl/staff/NHohmann ORCID: 0000-0003-1559-1838","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Hanno Spreeuw Netherlands eScience Center email: h.spreeuw [at] esciencecenter.nl Web page: www.esciencecenter.nl/team/dr-hanno-spreeuw/ ORCID: 0000-0002-5057-0322","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"David De Vleeschouwer Westfälische Wilhelms-Universität Münster Web page: www.uni-muenster.de/GeoPalaeontologie/erdsystemforschung/staff/DeVleeschouwer ORCID: 0000-0002-3323-807X","category":"page"},{"location":"#Copyright","page":"Introduction","title":"Copyright","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Copyright 2023 Netherlands eScience Center and Utrecht University","category":"page"},{"location":"#License","page":"Introduction","title":"License","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with this program.  If not, see https://www.gnu.org/licenses/.","category":"page"},{"location":"#Funding-information","page":"Introduction","title":"Funding information","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Funded by the European Union (ERC, MindTheGap, StG project no 101041077). Views and opinions expressed are however those of the author(s) only and do not necessarily reflect those of the European Union or the European Research Council. Neither the European Union nor the granting authority can be held responsible for them.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"components/cellular-automata/#Cellular-Automata","page":"Cellular Automata","title":"Cellular Automata","text":"","category":"section"},{"location":"components/cellular-automata/","page":"Cellular Automata","title":"Cellular Automata","text":"<div class=\"component-dag\" style=\"overflow: scroll\"><?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.50.0 (20211204.2007)\n -->\n<!-- Pages: 1 -->\n<svg width=\"350pt\" height=\"221pt\"\n viewBox=\"0.00 0.00 350.00 221.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 217)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-217 346,-217 346,4 -4,4\"/>\n<!-- Boxes -->\n<g id=\"node1\" class=\"node\">\n<title>Boxes</title>\n<path fill=\"none\" stroke=\"black\" d=\"M150,-213C150,-213 12,-213 12,-213 6,-213 0,-207 0,-201 0,-201 0,-146 0,-146 0,-140 6,-134 12,-134 12,-134 150,-134 150,-134 156,-134 162,-140 162,-146 162,-146 162,-201 162,-201 162,-207 156,-213 150,-213\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-182.5 155,-182.5 \"/>\n<text text-anchor=\"start\" x=\"57.5\" y=\"-191.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">Boxes</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"7,-159.5 7,-182.5 54,-182.5 54,-159.5 7,-159.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"7,-159.5 54,-159.5 54,-182.5 7,-182.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-167.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"54,-159.5 54,-182.5 108,-182.5 108,-159.5 54,-159.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"54,-159.5 54,-182.5 108,-182.5 108,-159.5 54,-159.5\"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-167.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"108,-159.5 108,-182.5 155,-182.5 155,-159.5 108,-159.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"155,-182.5 108,-182.5 108,-159.5 155,-159.5 \"/>\n<text text-anchor=\"start\" x=\"112\" y=\"-167.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"54,-140.5 54,-159.5 \"/>\n<text text-anchor=\"start\" x=\"11\" y=\"-147.5\" font-family=\"monospace\" font-size=\"10.00\">box</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"108,-140.5 108,-159.5 \"/>\n<text text-anchor=\"start\" x=\"58\" y=\"-147.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"111\" y=\"-147.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- CellularAutomaton -->\n<g id=\"node3\" class=\"node\">\n<title>CellularAutomaton</title>\n<path fill=\"none\" stroke=\"black\" d=\"M301.5,-98C301.5,-98 40.5,-98 40.5,-98 34.5,-98 28.5,-92 28.5,-86 28.5,-86 28.5,-12 28.5,-12 28.5,-6 34.5,0 40.5,0 40.5,0 301.5,0 301.5,0 307.5,0 313.5,-6 313.5,-12 313.5,-12 313.5,-86 313.5,-86 313.5,-92 307.5,-98 301.5,-98\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"36,-68 307,-68 \"/>\n<text text-anchor=\"start\" x=\"96\" y=\"-76.8\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">CellularAutomaton</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"36,-45 36,-68 129,-68 129,-45 36,-45\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"36,-45 129,-45 129,-68 36,-68 \"/>\n<text text-anchor=\"start\" x=\"40\" y=\"-52.8\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"129,-45 129,-68 234,-68 234,-45 129,-45\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"129,-45 129,-68 234,-68 234,-45 129,-45\"/>\n<text text-anchor=\"start\" x=\"133\" y=\"-52.8\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"234,-45 234,-68 307,-68 307,-45 234,-45\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"307,-68 234,-68 234,-45 307,-45 \"/>\n<text text-anchor=\"start\" x=\"238\" y=\"-52.8\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"129,-26 129,-45 \"/>\n<text text-anchor=\"start\" x=\"40\" y=\"-33\" font-family=\"monospace\" font-size=\"10.00\">ca_interval</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"234,-26 234,-45 \"/>\n<text text-anchor=\"start\" x=\"133\" y=\"-33\" font-family=\"monospace\" font-size=\"10.00\">viability_range</text>\n<text text-anchor=\"start\" x=\"237\" y=\"-33\" font-family=\"monospace\" font-size=\"10.00\">ca</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"129,-7 129,-26 \"/>\n<text text-anchor=\"start\" x=\"40\" y=\"-14\" font-family=\"monospace\" font-size=\"10.00\">ca_random_seed</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"234,-7 234,-26 \"/>\n<text text-anchor=\"start\" x=\"133\" y=\"-14\" font-family=\"monospace\" font-size=\"10.00\">activation_range</text>\n<text text-anchor=\"start\" x=\"237\" y=\"-14\" font-family=\"monospace\" font-size=\"10.00\">ca_priority</text>\n</g>\n<!-- Boxes&#45;&gt;CellularAutomaton -->\n<g id=\"edge1\" class=\"edge\">\n<title>Boxes&#45;&gt;CellularAutomaton</title>\n<path fill=\"none\" stroke=\"black\" d=\"M109.48,-133.74C115.79,-125.15 122.6,-115.88 129.31,-106.75\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"132.33,-108.55 135.43,-98.42 126.69,-104.4 132.33,-108.55\"/>\n</g>\n<!-- FaciesBase -->\n<g id=\"node2\" class=\"node\">\n<title>FaciesBase</title>\n<path fill=\"none\" stroke=\"black\" d=\"M330,-213C330,-213 192,-213 192,-213 186,-213 180,-207 180,-201 180,-201 180,-146 180,-146 180,-140 186,-134 192,-134 192,-134 330,-134 330,-134 336,-134 342,-140 342,-146 342,-146 342,-201 342,-201 342,-207 336,-213 330,-213\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"187,-182.5 335,-182.5 \"/>\n<text text-anchor=\"start\" x=\"217\" y=\"-191.3\" font-family=\"Times,serif\" font-weight=\"bold\" font-size=\"14.00\">FaciesBase</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"187,-159.5 187,-182.5 234,-182.5 234,-159.5 187,-159.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"187,-159.5 234,-159.5 234,-182.5 187,-182.5 \"/>\n<text text-anchor=\"start\" x=\"191\" y=\"-167.3\" font-family=\"Times,serif\" font-size=\"14.00\">Input</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"234,-159.5 234,-182.5 288,-182.5 288,-159.5 234,-159.5\"/>\n<polygon fill=\"none\" stroke=\"black\" points=\"234,-159.5 234,-182.5 288,-182.5 288,-159.5 234,-159.5\"/>\n<text text-anchor=\"start\" x=\"238\" y=\"-167.3\" font-family=\"Times,serif\" font-size=\"14.00\">Facies</text>\n<polygon fill=\"#cccccc\" stroke=\"transparent\" points=\"288,-159.5 288,-182.5 335,-182.5 335,-159.5 288,-159.5\"/>\n<polyline fill=\"none\" stroke=\"black\" points=\"335,-182.5 288,-182.5 288,-159.5 335,-159.5 \"/>\n<text text-anchor=\"start\" x=\"292\" y=\"-167.3\" font-family=\"Times,serif\" font-size=\"14.00\">State</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"234,-140.5 234,-159.5 \"/>\n<text text-anchor=\"start\" x=\"191\" y=\"-147.5\" font-family=\"monospace\" font-size=\"10.00\">facies</text>\n<polyline fill=\"none\" stroke=\"black\" points=\"288,-140.5 288,-159.5 \"/>\n<text text-anchor=\"start\" x=\"238\" y=\"-147.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n<text text-anchor=\"start\" x=\"291\" y=\"-147.5\" font-family=\"monospace\" font-size=\"10.00\"> </text>\n</g>\n<!-- FaciesBase&#45;&gt;CellularAutomaton -->\n<g id=\"edge2\" class=\"edge\">\n<title>FaciesBase&#45;&gt;CellularAutomaton</title>\n<path fill=\"none\" stroke=\"black\" d=\"M232.52,-133.74C226.21,-125.15 219.4,-115.88 212.69,-106.75\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"215.31,-104.4 206.57,-98.42 209.67,-108.55 215.31,-104.4\"/>\n</g>\n</g>\n</svg>\n</div>","category":"page"},{"location":"components/cellular-automata/","page":"Cellular Automata","title":"Cellular Automata","text":"<div class=\"noweb-label\">file:<i>test/Components/CellularAutomatonSpec.jl</i></div>","category":"page"},{"location":"components/cellular-automata/","page":"Cellular Automata","title":"Cellular Automata","text":"module CellularAutomatonSpec\n\nusing Test\nusing CarboKitten.Components.Common\nusing CarboKitten.Components: CellularAutomaton as CA\n\n@testset \"Components/CellularAutomaton\" begin\n    let facies = fill(CA.Facies((4, 10), (6, 10)), 3),\n        input1 = CA.Input(\n            box=Box{Periodic{2}}(grid_size=(50, 50), phys_scale=1.0u\"m\"),\n            facies=facies),\n        input2 = CA.Input(\n            box=Box{Periodic{2}}(grid_size=(50, 50), phys_scale=1.0u\"m\"),\n            facies=facies,\n            ca_random_seed=1)\n\n        state1 = CA.initial_state(input1)\n        state2 = CA.initial_state(input2)\n        state3 = CA.initial_state(input2)\n\n        @test CA.initial_state(input1).ca == CA.initial_state(input1).ca\n        @test state1.ca != state2.ca\n\n        step! = CA.step!(input1)  # inputs have same rules\n        for i in 1:20\n            step!(state1)\n            step!(state2)\n            step!(state3)\n        end\n\n        @test state1.ca != state2.ca\n        @test state2.ca == state3.ca\n    end\nend\n\nend","category":"page"},{"location":"components/cellular-automata/","page":"Cellular Automata","title":"Cellular Automata","text":"<div class=\"noweb-label\">file:<i>src/Components/CellularAutomaton.jl</i></div>","category":"page"},{"location":"components/cellular-automata/","page":"Cellular Automata","title":"Cellular Automata","text":"@compose module CellularAutomaton\n    @mixin Boxes, FaciesBase\n    using ..Common\n    using Random\n    using ...Burgess2013.CA: step_ca\n\n    @kwdef struct Facies <: AbstractFacies\n        viability_range::Tuple{Int,Int}\n        activation_range::Tuple{Int,Int}\n    end\n\n    @kwdef struct Input <: AbstractInput\n        ca_interval::Int      = 1\n        ca_random_seed::Int   = 0\n    end\n\n    @kwdef mutable struct State <: AbstractState\n        ca::Matrix{Int}\n        ca_priority::Vector{Int}\n    end\n\n    function initial_state(input::AbstractInput)\n        n_facies = length(input.facies)\n        ca = rand(MersenneTwister(input.ca_random_seed), 0:n_facies, input.box.grid_size...)\n        return State(ca, 1:n_facies |> collect)\n    end\n\n    function step!(input::AbstractInput)\n        return step_ca(input.box, input.facies)\n    end\nend","category":"page"},{"location":"components/cellular-automata/","page":"Cellular Automata","title":"Cellular Automata","text":"","category":"page"}]
}
